function normalizePhoneNumber(t){if(t){for(var e="",n=0;n<t.length;++n)t.charAt(n)>="0"&&t.charAt(n)<="9"&&(e+=t[n]);return 10!=e.length?t:e.slice(0,3)+"-"+e.slice(3,6)+"-"+e.slice(6)}}(function(){"use strict";var t=this,e=t.Chart,n=function(t){this.canvas=t.canvas,this.ctx=t;var e=function(t,e){return t["offset"+e]?t["offset"+e]:document.defaultView.getComputedStyle(t).getPropertyValue(e)},n=this.width=e(t.canvas,"Width"),r=this.height=e(t.canvas,"Height");t.canvas.width=n,t.canvas.height=r;var n=this.width=t.canvas.width,r=this.height=t.canvas.height;return this.aspectRatio=this.width/this.height,i.retinaScale(this),this};n.defaults={global:{animation:!0,animationSteps:60,animationEasing:"easeOutQuart",showScale:!0,scaleOverride:!1,scaleSteps:null,scaleStepWidth:null,scaleStartValue:null,scaleLineColor:"rgba(0,0,0,.1)",scaleLineWidth:1,scaleShowLabels:!0,scaleLabel:"<%=value%>",scaleIntegersOnly:!0,scaleBeginAtZero:!1,scaleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",scaleFontSize:12,scaleFontStyle:"normal",scaleFontColor:"#666",responsive:!1,maintainAspectRatio:!0,showTooltips:!0,customTooltips:!1,tooltipEvents:["mousemove","touchstart","touchmove","mouseout"],tooltipFillColor:"rgba(0,0,0,0.8)",tooltipFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipFontSize:14,tooltipFontStyle:"normal",tooltipFontColor:"#fff",tooltipTitleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipTitleFontSize:14,tooltipTitleFontStyle:"bold",tooltipTitleFontColor:"#fff",tooltipYPadding:6,tooltipXPadding:6,tooltipCaretSize:8,tooltipCornerRadius:6,tooltipXOffset:10,tooltipTemplate:"<%if (label){%><%=label%>: <%}%><%= value %>",multiTooltipTemplate:"<%= value %>",multiTooltipKeyBackground:"#fff",onAnimationProgress:function(){},onAnimationComplete:function(){}}},n.types={};var i=n.helpers={},r=i.each=function(t,e,n){var i=Array.prototype.slice.call(arguments,3);if(t)if(t.length===+t.length){var r;for(r=0;r<t.length;r++)e.apply(n,[t[r],r].concat(i))}else for(var o in t)e.apply(n,[t[o],o].concat(i))},o=i.clone=function(t){var e={};return r(t,function(n,i){t.hasOwnProperty(i)&&(e[i]=n)}),e},a=i.extend=function(t){return r(Array.prototype.slice.call(arguments,1),function(e){r(e,function(n,i){e.hasOwnProperty(i)&&(t[i]=n)})}),t},s=i.merge=function(){var t=Array.prototype.slice.call(arguments,0);return t.unshift({}),a.apply(null,t)},l=i.indexOf=function(t,e){if(Array.prototype.indexOf)return t.indexOf(e);for(var n=0;n<t.length;n++)if(t[n]===e)return n;return-1},u=(i.where=function(t,e){var n=[];return i.each(t,function(t){e(t)&&n.push(t)}),n},i.findNextWhere=function(t,e,n){n||(n=-1);for(var i=n+1;i<t.length;i++){var r=t[i];if(e(r))return r}},i.findPreviousWhere=function(t,e,n){n||(n=t.length);for(var i=n-1;i>=0;i--){var r=t[i];if(e(r))return r}},i.inherits=function(t){var e=this,n=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return e.apply(this,arguments)},i=function(){this.constructor=n};return i.prototype=e.prototype,n.prototype=new i,n.extend=u,t&&a(n.prototype,t),n.__super__=e.prototype,n}),c=i.noop=function(){},d=i.uid=function(){var t=0;return function(){return"chart-"+t++}}(),h=i.warn=function(t){window.console&&"function"==typeof window.console.warn&&console.warn(t)},p=i.amd="function"==typeof define&&define.amd,f=i.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},g=i.max=function(t){return Math.max.apply(Math,t)},m=i.min=function(t){return Math.min.apply(Math,t)},v=(i.cap=function(t,e,n){if(f(e)){if(t>e)return e}else if(f(n)&&n>t)return n;return t},i.getDecimalPlaces=function(t){return t%1!==0&&f(t)?t.toString().split(".")[1].length:0}),y=i.radians=function(t){return t*(Math.PI/180)},b=(i.getAngleFromPoint=function(t,e){var n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i),o=2*Math.PI+Math.atan2(i,n);return 0>n&&0>i&&(o+=2*Math.PI),{angle:o,distance:r}},i.aliasPixel=function(t){return t%2===0?0:.5}),w=(i.splineCurve=function(t,e,n,i){var r=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)),o=Math.sqrt(Math.pow(n.x-e.x,2)+Math.pow(n.y-e.y,2)),a=i*r/(r+o),s=i*o/(r+o);return{inner:{x:e.x-a*(n.x-t.x),y:e.y-a*(n.y-t.y)},outer:{x:e.x+s*(n.x-t.x),y:e.y+s*(n.y-t.y)}}},i.calculateOrderOfMagnitude=function(t){return Math.floor(Math.log(t)/Math.LN10)}),x=(i.calculateScaleRange=function(t,e,n,i,r){var o=2,a=Math.floor(e/(1.5*n)),s=o>=a,l=g(t),u=m(t);l===u&&(l+=.5,u>=.5&&!i?u-=.5:l+=.5);for(var c=Math.abs(l-u),d=w(c),h=Math.ceil(l/(1*Math.pow(10,d)))*Math.pow(10,d),p=i?0:Math.floor(u/(1*Math.pow(10,d)))*Math.pow(10,d),f=h-p,v=Math.pow(10,d),y=Math.round(f/v);(y>a||a>2*y)&&!s;)if(y>a)v*=2,y=Math.round(f/v),y%1!==0&&(s=!0);else if(r&&d>=0){if(v/2%1!==0)break;v/=2,y=Math.round(f/v)}else v/=2,y=Math.round(f/v);return s&&(y=o,v=f/y),{steps:y,stepValue:v,min:p,max:p+y*v}},i.template=function(t,e){function n(t,e){var n=/\W/.test(t)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+t.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):i[t]=i[t];return e?n(e):n}if(t instanceof Function)return t(e);var i={};return n(t,e)}),_=(i.generateLabels=function(t,e,n,i){var o=new Array(e);return labelTemplateString&&r(o,function(e,r){o[r]=x(t,{value:n+i*(r+1)})}),o},i.easingEffects={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-1*t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return 1*((t=t/1-1)*t*t+1)},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-1*((t=t/1-1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return 1*(t/=1)*t*t*t*t},easeOutQuint:function(t){return 1*((t=t/1-1)*t*t*t*t+1)},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return-1*Math.cos(t/1*(Math.PI/2))+1},easeOutSine:function(t){return 1*Math.sin(t/1*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t/1)-1)},easeInExpo:function(t){return 0===t?1:1*Math.pow(2,10*(t/1-1))},easeOutExpo:function(t){return 1===t?1:1*(-Math.pow(2,-10*t/1)+1)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(-Math.pow(2,-10*--t)+2)},easeInCirc:function(t){return t>=1?t:-1*(Math.sqrt(1-(t/=1)*t)-1)},easeOutCirc:function(t){return 1*Math.sqrt(1-(t=t/1-1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1==(t/=1)?1:(n||(n=.3),i<Math.abs(1)?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),-(i*Math.pow(2,10*(t-=1))*Math.sin(2*(1*t-e)*Math.PI/n)))},easeOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1==(t/=1)?1:(n||(n=.3),i<Math.abs(1)?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),i*Math.pow(2,-10*t)*Math.sin(2*(1*t-e)*Math.PI/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:2==(t/=.5)?1:(n||(n=.3*1.5),i<Math.abs(1)?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),1>t?-.5*i*Math.pow(2,10*(t-=1))*Math.sin(2*(1*t-e)*Math.PI/n):i*Math.pow(2,-10*(t-=1))*Math.sin(2*(1*t-e)*Math.PI/n)*.5+1)},easeInBack:function(t){var e=1.70158;return 1*(t/=1)*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return 1*((t=t/1-1)*t*((e+1)*t+e)+1)},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?.5*t*t*(((e*=1.525)+1)*t-e):.5*((t-=2)*t*(((e*=1.525)+1)*t+e)+2)},easeInBounce:function(t){return 1-_.easeOutBounce(1-t)},easeOutBounce:function(t){return(t/=1)<1/2.75?7.5625*t*t:2/2.75>t?1*(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1*(7.5625*(t-=2.25/2.75)*t+.9375):1*(7.5625*(t-=2.625/2.75)*t+.984375)},easeInOutBounce:function(t){return.5>t?.5*_.easeInBounce(2*t):.5*_.easeOutBounce(2*t-1)+.5}}),S=i.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)}}(),C=i.cancelAnimFrame=function(){return window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame||function(t){return window.clearTimeout(t,1e3/60)}}(),O=(i.animationLoop=function(t,e,n,i,r,o){var a=0,s=_[n]||_.linear,l=function(){a++;var n=a/e,u=s(n);t.call(o,u,n,a),i.call(o,u,n),e>a?o.animationFrame=S(l):r.apply(o)};S(l)},i.getRelativePosition=function(t){var e,n,i=t.originalEvent||t,r=t.currentTarget||t.srcElement,o=r.getBoundingClientRect();return i.touches?(e=i.touches[0].clientX-o.left,n=i.touches[0].clientY-o.top):(e=i.clientX-o.left,n=i.clientY-o.top),{x:e,y:n}},i.addEvent=function(t,e,n){t.addEventListener?t.addEventListener(e,n):t.attachEvent?t.attachEvent("on"+e,n):t["on"+e]=n}),D=i.removeEvent=function(t,e,n){t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent?t.detachEvent("on"+e,n):t["on"+e]=c},k=(i.bindEvents=function(t,e,n){t.events||(t.events={}),r(e,function(e){t.events[e]=function(){n.apply(t,arguments)},O(t.chart.canvas,e,t.events[e])})},i.unbindEvents=function(t,e){r(e,function(e,n){D(t.chart.canvas,n,e)})}),T=i.getMaximumWidth=function(t){var e=t.parentNode;return e.clientWidth},E=i.getMaximumHeight=function(t){var e=t.parentNode;return e.clientHeight},P=(i.getMaximumSize=i.getMaximumWidth,i.retinaScale=function(t){var e=t.ctx,n=t.canvas.width,i=t.canvas.height;window.devicePixelRatio&&(e.canvas.style.width=n+"px",e.canvas.style.height=i+"px",e.canvas.height=i*window.devicePixelRatio,e.canvas.width=n*window.devicePixelRatio,e.scale(window.devicePixelRatio,window.devicePixelRatio))}),$=i.clear=function(t){t.ctx.clearRect(0,0,t.width,t.height)},M=i.fontString=function(t,e,n){return e+" "+t+"px "+n},I=i.longestText=function(t,e,n){t.font=e;var i=0;return r(n,function(e){var n=t.measureText(e).width;i=n>i?n:i}),i},A=i.drawRoundedRectangle=function(t,e,n,i,r,o){t.beginPath(),t.moveTo(e+o,n),t.lineTo(e+i-o,n),t.quadraticCurveTo(e+i,n,e+i,n+o),t.lineTo(e+i,n+r-o),t.quadraticCurveTo(e+i,n+r,e+i-o,n+r),t.lineTo(e+o,n+r),t.quadraticCurveTo(e,n+r,e,n+r-o),t.lineTo(e,n+o),t.quadraticCurveTo(e,n,e+o,n),t.closePath()};n.instances={},n.Type=function(t,e,i){this.options=e,this.chart=i,this.id=d(),n.instances[this.id]=this,e.responsive&&this.resize(),this.initialize.call(this,t)},a(n.Type.prototype,{initialize:function(){return this},clear:function(){return $(this.chart),this},stop:function(){return C(this.animationFrame),this},resize:function(t){this.stop();var e=this.chart.canvas,n=T(this.chart.canvas),i=this.options.maintainAspectRatio?n/this.chart.aspectRatio:E(this.chart.canvas);return e.width=this.chart.width=n,e.height=this.chart.height=i,P(this.chart),"function"==typeof t&&t.apply(this,Array.prototype.slice.call(arguments,1)),this},reflow:c,render:function(t){return t&&this.reflow(),this.options.animation&&!t?i.animationLoop(this.draw,this.options.animationSteps,this.options.animationEasing,this.options.onAnimationProgress,this.options.onAnimationComplete,this):(this.draw(),this.options.onAnimationComplete.call(this)),this},generateLegend:function(){return x(this.options.legendTemplate,this)},destroy:function(){this.clear(),k(this,this.events);var t=this.chart.canvas;t.width=this.chart.width,t.height=this.chart.height,t.style.removeProperty?(t.style.removeProperty("width"),t.style.removeProperty("height")):(t.style.removeAttribute("width"),t.style.removeAttribute("height")),delete n.instances[this.id]},showTooltip:function(t,e){"undefined"==typeof this.activeElements&&(this.activeElements=[]);var o=function(t){var e=!1;return t.length!==this.activeElements.length?e=!0:(r(t,function(t,n){t!==this.activeElements[n]&&(e=!0)},this),e)}.call(this,t);if(o||e){if(this.activeElements=t,this.draw(),this.options.customTooltips&&this.options.customTooltips(!1),t.length>0)if(this.datasets&&this.datasets.length>1){for(var a,s,u=this.datasets.length-1;u>=0&&(a=this.datasets[u].points||this.datasets[u].bars||this.datasets[u].segments,s=l(a,t[0]),-1===s);u--);var c=[],d=[],h=function(){var t,e,n,r,o,a=[],l=[],u=[];return i.each(this.datasets,function(e){t=e.points||e.bars||e.segments,t[s]&&t[s].hasValue()&&a.push(t[s])}),i.each(a,function(t){l.push(t.x),u.push(t.y),c.push(i.template(this.options.multiTooltipTemplate,t)),d.push({fill:t._saved.fillColor||t.fillColor,stroke:t._saved.strokeColor||t.strokeColor})},this),o=m(u),n=g(u),r=m(l),e=g(l),{x:r>this.chart.width/2?r:e,y:(o+n)/2}}.call(this,s);new n.MultiTooltip({x:h.x,y:h.y,xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,xOffset:this.options.tooltipXOffset,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,titleTextColor:this.options.tooltipTitleFontColor,titleFontFamily:this.options.tooltipTitleFontFamily,titleFontStyle:this.options.tooltipTitleFontStyle,titleFontSize:this.options.tooltipTitleFontSize,cornerRadius:this.options.tooltipCornerRadius,labels:c,legendColors:d,legendColorBackground:this.options.multiTooltipKeyBackground,title:t[0].label,chart:this.chart,ctx:this.chart.ctx,custom:this.options.customTooltips}).draw()}else r(t,function(t){var e=t.tooltipPosition();new n.Tooltip({x:Math.round(e.x),y:Math.round(e.y),xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,caretHeight:this.options.tooltipCaretSize,cornerRadius:this.options.tooltipCornerRadius,text:x(this.options.tooltipTemplate,t),chart:this.chart,custom:this.options.customTooltips}).draw()},this);return this}},toBase64Image:function(){return this.chart.canvas.toDataURL.apply(this.chart.canvas,arguments)}}),n.Type.extend=function(t){var e=this,i=function(){return e.apply(this,arguments)};if(i.prototype=o(e.prototype),a(i.prototype,t),i.extend=n.Type.extend,t.name||e.prototype.name){var r=t.name||e.prototype.name,l=n.defaults[e.prototype.name]?o(n.defaults[e.prototype.name]):{};n.defaults[r]=a(l,t.defaults),n.types[r]=i,n.prototype[r]=function(t,e){var o=s(n.defaults.global,n.defaults[r],e||{});return new i(t,o,this)}}else h("Name not provided for this chart, so it hasn't been registered");return e},n.Element=function(t){a(this,t),this.initialize.apply(this,arguments),this.save()},a(n.Element.prototype,{initialize:function(){},restore:function(t){return t?r(t,function(t){this[t]=this._saved[t]},this):a(this,this._saved),this},save:function(){return this._saved=o(this),delete this._saved._saved,this},update:function(t){return r(t,function(t,e){this._saved[e]=this[e],this[e]=t},this),this},transition:function(t,e){return r(t,function(t,n){this[n]=(t-this._saved[n])*e+this._saved[n]},this),this},tooltipPosition:function(){return{x:this.x,y:this.y}},hasValue:function(){return f(this.value)}}),n.Element.extend=u,n.Point=n.Element.extend({display:!0,inRange:function(t,e){var n=this.hitDetectionRadius+this.radius;return Math.pow(t-this.x,2)+Math.pow(e-this.y,2)<Math.pow(n,2)},draw:function(){if(this.display){var t=this.ctx;t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.closePath(),t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.fillStyle=this.fillColor,t.fill(),t.stroke()}}}),n.Arc=n.Element.extend({inRange:function(t,e){var n=i.getAngleFromPoint(this,{x:t,y:e}),r=n.angle>=this.startAngle&&n.angle<=this.endAngle,o=n.distance>=this.innerRadius&&n.distance<=this.outerRadius;return r&&o},tooltipPosition:function(){var t=this.startAngle+(this.endAngle-this.startAngle)/2,e=(this.outerRadius-this.innerRadius)/2+this.innerRadius;return{x:this.x+Math.cos(t)*e,y:this.y+Math.sin(t)*e}},draw:function(t){var e=this.ctx;e.beginPath(),e.arc(this.x,this.y,this.outerRadius,this.startAngle,this.endAngle),e.arc(this.x,this.y,this.innerRadius,this.endAngle,this.startAngle,!0),e.closePath(),e.strokeStyle=this.strokeColor,e.lineWidth=this.strokeWidth,e.fillStyle=this.fillColor,e.fill(),e.lineJoin="bevel",this.showStroke&&e.stroke()}}),n.Rectangle=n.Element.extend({draw:function(){var t=this.ctx,e=this.width/2,n=this.x-e,i=this.x+e,r=this.base-(this.base-this.y),o=this.strokeWidth/2;this.showStroke&&(n+=o,i-=o,r+=o),t.beginPath(),t.fillStyle=this.fillColor,t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.moveTo(n,this.base),t.lineTo(n,r),t.lineTo(i,r),t.lineTo(i,this.base),t.fill(),this.showStroke&&t.stroke()},height:function(){return this.base-this.y},inRange:function(t,e){return t>=this.x-this.width/2&&t<=this.x+this.width/2&&e>=this.y&&e<=this.base}}),n.Tooltip=n.Element.extend({draw:function(){var t=this.chart.ctx;t.font=M(this.fontSize,this.fontStyle,this.fontFamily),this.xAlign="center",this.yAlign="above";var e=this.caretPadding=2,n=t.measureText(this.text).width+2*this.xPadding,i=this.fontSize+2*this.yPadding,r=i+this.caretHeight+e;this.x+n/2>this.chart.width?this.xAlign="left":this.x-n/2<0&&(this.xAlign="right"),this.y-r<0&&(this.yAlign="below");var o=this.x-n/2,a=this.y-r;if(t.fillStyle=this.fillColor,this.custom)this.custom(this);else{switch(this.yAlign){case"above":t.beginPath(),t.moveTo(this.x,this.y-e),t.lineTo(this.x+this.caretHeight,this.y-(e+this.caretHeight)),t.lineTo(this.x-this.caretHeight,this.y-(e+this.caretHeight)),t.closePath(),t.fill();break;case"below":a=this.y+e+this.caretHeight,t.beginPath(),t.moveTo(this.x,this.y+e),t.lineTo(this.x+this.caretHeight,this.y+e+this.caretHeight),t.lineTo(this.x-this.caretHeight,this.y+e+this.caretHeight),t.closePath(),t.fill()}switch(this.xAlign){case"left":o=this.x-n+(this.cornerRadius+this.caretHeight);break;case"right":o=this.x-(this.cornerRadius+this.caretHeight)}A(t,o,a,n,i,this.cornerRadius),t.fill(),t.fillStyle=this.textColor,t.textAlign="center",t.textBaseline="middle",t.fillText(this.text,o+n/2,a+i/2)}}}),n.MultiTooltip=n.Element.extend({initialize:function(){this.font=M(this.fontSize,this.fontStyle,this.fontFamily),this.titleFont=M(this.titleFontSize,this.titleFontStyle,this.titleFontFamily),this.height=this.labels.length*this.fontSize+(this.labels.length-1)*(this.fontSize/2)+2*this.yPadding+1.5*this.titleFontSize,this.ctx.font=this.titleFont;var t=this.ctx.measureText(this.title).width,e=I(this.ctx,this.font,this.labels)+this.fontSize+3,n=g([e,t]);this.width=n+2*this.xPadding;var i=this.height/2;this.y-i<0?this.y=i:this.y+i>this.chart.height&&(this.y=this.chart.height-i),this.x>this.chart.width/2?this.x-=this.xOffset+this.width:this.x+=this.xOffset},getLineHeight:function(t){var e=this.y-this.height/2+this.yPadding,n=t-1;return 0===t?e+this.titleFontSize/2:e+(1.5*this.fontSize*n+this.fontSize/2)+1.5*this.titleFontSize},draw:function(){if(this.custom)this.custom(this);else{A(this.ctx,this.x,this.y-this.height/2,this.width,this.height,this.cornerRadius);var t=this.ctx;t.fillStyle=this.fillColor,t.fill(),t.closePath(),t.textAlign="left",t.textBaseline="middle",t.fillStyle=this.titleTextColor,t.font=this.titleFont,t.fillText(this.title,this.x+this.xPadding,this.getLineHeight(0)),t.font=this.font,i.each(this.labels,function(e,n){t.fillStyle=this.textColor,t.fillText(e,this.x+this.xPadding+this.fontSize+3,this.getLineHeight(n+1)),t.fillStyle=this.legendColorBackground,t.fillRect(this.x+this.xPadding,this.getLineHeight(n+1)-this.fontSize/2,this.fontSize,this.fontSize),t.fillStyle=this.legendColors[n].fill,t.fillRect(this.x+this.xPadding,this.getLineHeight(n+1)-this.fontSize/2,this.fontSize,this.fontSize)},this)}}}),n.Scale=n.Element.extend({initialize:function(){this.fit()},buildYLabels:function(){this.yLabels=[];for(var t=v(this.stepValue),e=0;e<=this.steps;e++)this.yLabels.push(x(this.templateString,{value:(this.min+e*this.stepValue).toFixed(t)}));this.yLabelWidth=this.display&&this.showLabels?I(this.ctx,this.font,this.yLabels):0},addXLabel:function(t){this.xLabels.push(t),this.valuesCount++,this.fit()},removeXLabel:function(){this.xLabels.shift(),this.valuesCount--,this.fit()},fit:function(){this.startPoint=this.display?this.fontSize:0,this.endPoint=this.display?this.height-1.5*this.fontSize-5:this.height,this.startPoint+=this.padding,this.endPoint-=this.padding;var t,e=this.endPoint-this.startPoint;for(this.calculateYRange(e),this.buildYLabels(),this.calculateXLabelRotation();e>this.endPoint-this.startPoint;)e=this.endPoint-this.startPoint,t=this.yLabelWidth,this.calculateYRange(e),this.buildYLabels(),t<this.yLabelWidth&&this.calculateXLabelRotation()},calculateXLabelRotation:function(){this.ctx.font=this.font;var t,e,n=this.ctx.measureText(this.xLabels[0]).width,i=this.ctx.measureText(this.xLabels[this.xLabels.length-1]).width;if(this.xScalePaddingRight=i/2+3,this.xScalePaddingLeft=n/2>this.yLabelWidth+10?n/2:this.yLabelWidth+10,this.xLabelRotation=0,this.display){var r,o=I(this.ctx,this.font,this.xLabels);this.xLabelWidth=o;for(var a=Math.floor(this.calculateX(1)-this.calculateX(0))-6;this.xLabelWidth>a&&0===this.xLabelRotation||this.xLabelWidth>a&&this.xLabelRotation<=90&&this.xLabelRotation>0;)r=Math.cos(y(this.xLabelRotation)),t=r*n,e=r*i,t+this.fontSize/2>this.yLabelWidth+8&&(this.xScalePaddingLeft=t+this.fontSize/2),this.xScalePaddingRight=this.fontSize/2,this.xLabelRotation++,this.xLabelWidth=r*o;this.xLabelRotation>0&&(this.endPoint-=Math.sin(y(this.xLabelRotation))*o+3)}else this.xLabelWidth=0,this.xScalePaddingRight=this.padding,this.xScalePaddingLeft=this.padding},calculateYRange:c,drawingArea:function(){return this.startPoint-this.endPoint},calculateY:function(t){var e=this.drawingArea()/(this.min-this.max);return this.endPoint-e*(t-this.min)},calculateX:function(t){var e=(this.xLabelRotation>0,this.width-(this.xScalePaddingLeft+this.xScalePaddingRight)),n=e/Math.max(this.valuesCount-(this.offsetGridLines?0:1),1),i=n*t+this.xScalePaddingLeft;return this.offsetGridLines&&(i+=n/2),Math.round(i)},update:function(t){i.extend(this,t),this.fit()},draw:function(){var t=this.ctx,e=(this.endPoint-this.startPoint)/this.steps,n=Math.round(this.xScalePaddingLeft);this.display&&(t.fillStyle=this.textColor,t.font=this.font,r(this.yLabels,function(r,o){var a=this.endPoint-e*o,s=Math.round(a),l=this.showHorizontalLines;t.textAlign="right",t.textBaseline="middle",this.showLabels&&t.fillText(r,n-10,a),0!==o||l||(l=!0),l&&t.beginPath(),o>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),s+=i.aliasPixel(t.lineWidth),l&&(t.moveTo(n,s),t.lineTo(this.width,s),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(n-5,s),t.lineTo(n,s),t.stroke(),t.closePath()},this),r(this.xLabels,function(e,n){var i=this.calculateX(n)+b(this.lineWidth),r=this.calculateX(n-(this.offsetGridLines?.5:0))+b(this.lineWidth),o=this.xLabelRotation>0,a=this.showVerticalLines;0!==n||a||(a=!0),a&&t.beginPath(),n>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),a&&(t.moveTo(r,this.endPoint),t.lineTo(r,this.startPoint-3),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(r,this.endPoint),t.lineTo(r,this.endPoint+5),t.stroke(),t.closePath(),t.save(),t.translate(i,o?this.endPoint+12:this.endPoint+8),t.rotate(-1*y(this.xLabelRotation)),t.font=this.font,t.textAlign=o?"right":"center",t.textBaseline=o?"middle":"top",t.fillText(e,0,0),t.restore()},this))}}),n.RadialScale=n.Element.extend({initialize:function(){this.size=m([this.height,this.width]),this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2},calculateCenterOffset:function(t){var e=this.drawingArea/(this.max-this.min);return(t-this.min)*e},update:function(){this.lineArc?this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2:this.setScaleSize(),this.buildYLabels()},buildYLabels:function(){this.yLabels=[];for(var t=v(this.stepValue),e=0;e<=this.steps;e++)this.yLabels.push(x(this.templateString,{value:(this.min+e*this.stepValue).toFixed(t)}))},getCircumference:function(){return 2*Math.PI/this.valuesCount},setScaleSize:function(){var t,e,n,i,r,o,a,s,l,u,c,d,h=m([this.height/2-this.pointLabelFontSize-5,this.width/2]),p=this.width,g=0;for(this.ctx.font=M(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),e=0;e<this.valuesCount;e++)t=this.getPointPosition(e,h),n=this.ctx.measureText(x(this.templateString,{value:this.labels[e]})).width+5,0===e||e===this.valuesCount/2?(i=n/2,t.x+i>p&&(p=t.x+i,r=e),t.x-i<g&&(g=t.x-i,a=e)):e<this.valuesCount/2?t.x+n>p&&(p=t.x+n,r=e):e>this.valuesCount/2&&t.x-n<g&&(g=t.x-n,a=e);l=g,u=Math.ceil(p-this.width),o=this.getIndexAngle(r),s=this.getIndexAngle(a),c=u/Math.sin(o+Math.PI/2),d=l/Math.sin(s+Math.PI/2),c=f(c)?c:0,d=f(d)?d:0,this.drawingArea=h-(d+c)/2,this.setCenterPoint(d,c)},setCenterPoint:function(t,e){var n=this.width-e-this.drawingArea,i=t+this.drawingArea;this.xCenter=(i+n)/2,this.yCenter=this.height/2},getIndexAngle:function(t){var e=2*Math.PI/this.valuesCount;return t*e-Math.PI/2},getPointPosition:function(t,e){var n=this.getIndexAngle(t);return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter}},draw:function(){if(this.display){var t=this.ctx;if(r(this.yLabels,function(e,n){if(n>0){var i,r=n*(this.drawingArea/this.steps),o=this.yCenter-r;if(this.lineWidth>0)if(t.strokeStyle=this.lineColor,t.lineWidth=this.lineWidth,this.lineArc)t.beginPath(),t.arc(this.xCenter,this.yCenter,r,0,2*Math.PI),t.closePath(),t.stroke();else{t.beginPath();for(var a=0;a<this.valuesCount;a++)i=this.getPointPosition(a,this.calculateCenterOffset(this.min+n*this.stepValue)),0===a?t.moveTo(i.x,i.y):t.lineTo(i.x,i.y);t.closePath(),t.stroke()}if(this.showLabels){if(t.font=M(this.fontSize,this.fontStyle,this.fontFamily),this.showLabelBackdrop){var s=t.measureText(e).width;t.fillStyle=this.backdropColor,t.fillRect(this.xCenter-s/2-this.backdropPaddingX,o-this.fontSize/2-this.backdropPaddingY,s+2*this.backdropPaddingX,this.fontSize+2*this.backdropPaddingY)}t.textAlign="center",t.textBaseline="middle",t.fillStyle=this.fontColor,t.fillText(e,this.xCenter,o)}}},this),!this.lineArc){t.lineWidth=this.angleLineWidth,t.strokeStyle=this.angleLineColor;for(var e=this.valuesCount-1;e>=0;e--){if(this.angleLineWidth>0){var n=this.getPointPosition(e,this.calculateCenterOffset(this.max));t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(n.x,n.y),t.stroke(),t.closePath()}var i=this.getPointPosition(e,this.calculateCenterOffset(this.max)+5);t.font=M(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),t.fillStyle=this.pointLabelFontColor;var o=this.labels.length,a=this.labels.length/2,s=a/2,l=s>e||e>o-s,u=e===s||e===o-s;t.textAlign=0===e?"center":e===a?"center":a>e?"left":"right",t.textBaseline=u?"middle":l?"bottom":"top",t.fillText(this.labels[e],i.x,i.y)}}}}}),i.addEvent(window,"resize",function(){var t;return function(){clearTimeout(t),t=setTimeout(function(){r(n.instances,function(t){t.options.responsive&&t.resize(t.render,!0)})},50)}}()),p?define(function(){return n}):"object"==typeof module&&module.exports&&(module.exports=n),t.Chart=n,n.noConflict=function(){return t.Chart=e,n}}).call(this),function(){"use strict";var t=this,e=t.Chart,n=e.helpers,i={scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Bar",defaults:i,initialize:function(t){var i=this.options;this.ScaleClass=e.Scale.extend({offsetGridLines:!0,calculateBarX:function(t,e,n){var r=this.calculateBaseWidth(),o=this.calculateX(n)-r/2,a=this.calculateBarWidth(t);return o+a*e+e*i.barDatasetSpacing+a/2},calculateBaseWidth:function(){return this.calculateX(1)-this.calculateX(0)-2*i.barValueSpacing},calculateBarWidth:function(t){var e=this.calculateBaseWidth()-(t-1)*i.barDatasetSpacing;return e/t}}),this.datasets=[],this.options.showTooltips&&n.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getBarsAtEvent(t):[];this.eachBars(function(t){t.restore(["fillColor","strokeColor"])}),n.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),this.BarClass=e.Rectangle.extend({strokeWidth:this.options.barStrokeWidth,showStroke:this.options.barShowStroke,ctx:this.chart.ctx}),n.each(t.datasets,function(e){var i={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,bars:[]};this.datasets.push(i),n.each(e.data,function(n,r){i.bars.push(new this.BarClass({value:n,label:t.labels[r],datasetLabel:e.label,strokeColor:e.strokeColor,fillColor:e.fillColor,highlightFill:e.highlightFill||e.fillColor,highlightStroke:e.highlightStroke||e.strokeColor}))},this)},this),this.buildScale(t.labels),this.BarClass.prototype.base=this.scale.endPoint,this.eachBars(function(t,e,i){n.extend(t,{width:this.scale.calculateBarWidth(this.datasets.length),x:this.scale.calculateBarX(this.datasets.length,i,e),y:this.scale.endPoint}),t.save()},this),this.render()},update:function(){this.scale.update(),n.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachBars(function(t){t.save()}),this.render()},eachBars:function(t){n.each(this.datasets,function(e,i){n.each(e.bars,t,this,i)},this)},getBarsAtEvent:function(t){for(var e,i=[],r=n.getRelativePosition(t),o=function(t){i.push(t.bars[e])},a=0;a<this.datasets.length;a++)for(e=0;e<this.datasets[a].bars.length;e++)if(this.datasets[a].bars[e].inRange(r.x,r.y))return n.each(this.datasets,o),i;return i},buildScale:function(t){var e=this,i=function(){var t=[];return e.eachBars(function(e){t.push(e.value)}),t},r={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var e=n.calculateScaleRange(i(),t,this.fontSize,this.beginAtZero,this.integersOnly);n.extend(this,e)},xLabels:t,font:n.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.barShowStroke?this.options.barStrokeWidth:0,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&n.extend(r,{calculateYRange:n.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new this.ScaleClass(r)},addData:function(t,e){n.each(t,function(t,n){this.datasets[n].bars.push(new this.BarClass({value:t,label:e,x:this.scale.calculateBarX(this.datasets.length,n,this.scale.valuesCount+1),
y:this.scale.endPoint,width:this.scale.calculateBarWidth(this.datasets.length),base:this.scale.endPoint,strokeColor:this.datasets[n].strokeColor,fillColor:this.datasets[n].fillColor}))},this),this.scale.addXLabel(e),this.update()},removeData:function(){this.scale.removeXLabel(),n.each(this.datasets,function(t){t.bars.shift()},this),this.update()},reflow:function(){n.extend(this.BarClass.prototype,{y:this.scale.endPoint,base:this.scale.endPoint});var t=n.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var e=t||1;this.clear(),this.chart.ctx,this.scale.draw(e),n.each(this.datasets,function(t,i){n.each(t.bars,function(t,n){t.hasValue()&&(t.base=this.scale.endPoint,t.transition({x:this.scale.calculateBarX(this.datasets.length,i,n),y:this.scale.calculateY(t.value),width:this.scale.calculateBarWidth(this.datasets.length)},e).draw())},this)},this)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,n=e.helpers,i={segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Doughnut",defaults:i,initialize:function(t){this.segments=[],this.outerRadius=(n.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,this.SegmentArc=e.Arc.extend({ctx:this.chart.ctx,x:this.chart.width/2,y:this.chart.height/2}),this.options.showTooltips&&n.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];n.each(this.segments,function(t){t.restore(["fillColor"])}),n.each(e,function(t){t.fillColor=t.highlightColor}),this.showTooltip(e)}),this.calculateTotal(t),n.each(t,function(t,e){this.addData(t,e,!0)},this),this.render()},getSegmentsAtEvent:function(t){var e=[],i=n.getRelativePosition(t);return n.each(this.segments,function(t){t.inRange(i.x,i.y)&&e.push(t)},this),e},addData:function(t,e,n){var i=e||this.segments.length;this.segments.splice(i,0,new this.SegmentArc({value:t.value,outerRadius:this.options.animateScale?0:this.outerRadius,innerRadius:this.options.animateScale?0:this.outerRadius/100*this.options.percentageInnerCutout,fillColor:t.color,highlightColor:t.highlight||t.color,showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,startAngle:1.5*Math.PI,circumference:this.options.animateRotate?0:this.calculateCircumference(t.value),label:t.label})),n||(this.reflow(),this.update())},calculateCircumference:function(t){return 2*Math.PI*(Math.abs(t)/this.total)},calculateTotal:function(t){this.total=0,n.each(t,function(t){this.total+=Math.abs(t.value)},this)},update:function(){this.calculateTotal(this.segments),n.each(this.activeElements,function(t){t.restore(["fillColor"])}),n.each(this.segments,function(t){t.save()}),this.render()},removeData:function(t){var e=n.isNumber(t)?t:this.segments.length-1;this.segments.splice(e,1),this.reflow(),this.update()},reflow:function(){n.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.outerRadius=(n.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,n.each(this.segments,function(t){t.update({outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout})},this)},draw:function(t){var e=t?t:1;this.clear(),n.each(this.segments,function(t,n){t.transition({circumference:this.calculateCircumference(t.value),outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout},e),t.endAngle=t.startAngle+t.circumference,t.draw(),0===n&&(t.startAngle=1.5*Math.PI),n<this.segments.length-1&&(this.segments[n+1].startAngle=t.endAngle)},this)}}),e.types.Doughnut.extend({name:"Pie",defaults:n.merge(i,{percentageInnerCutout:0})})}.call(this),function(){"use strict";var t=this,e=t.Chart,n=e.helpers,i={scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Line",defaults:i,initialize:function(t){this.PointClass=e.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx,inRange:function(t){return Math.pow(t-this.x,2)<Math.pow(this.radius+this.hitDetectionRadius,2)}}),this.datasets=[],this.options.showTooltips&&n.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),n.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),n.each(t.datasets,function(e){var i={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,pointColor:e.pointColor,pointStrokeColor:e.pointStrokeColor,points:[]};this.datasets.push(i),n.each(e.data,function(n,r){i.points.push(new this.PointClass({value:n,label:t.labels[r],datasetLabel:e.label,strokeColor:e.pointStrokeColor,fillColor:e.pointColor,highlightFill:e.pointHighlightFill||e.pointColor,highlightStroke:e.pointHighlightStroke||e.pointStrokeColor}))},this),this.buildScale(t.labels),this.eachPoints(function(t,e){n.extend(t,{x:this.scale.calculateX(e),y:this.scale.endPoint}),t.save()},this)},this),this.render()},update:function(){this.scale.update(),n.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachPoints(function(t){t.save()}),this.render()},eachPoints:function(t){n.each(this.datasets,function(e){n.each(e.points,t,this)},this)},getPointsAtEvent:function(t){var e=[],i=n.getRelativePosition(t);return n.each(this.datasets,function(t){n.each(t.points,function(t){t.inRange(i.x,i.y)&&e.push(t)})},this),e},buildScale:function(t){var i=this,r=function(){var t=[];return i.eachPoints(function(e){t.push(e.value)}),t},o={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var e=n.calculateScaleRange(r(),t,this.fontSize,this.beginAtZero,this.integersOnly);n.extend(this,e)},xLabels:t,font:n.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.pointDotRadius+this.options.pointDotStrokeWidth,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&n.extend(o,{calculateYRange:n.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new e.Scale(o)},addData:function(t,e){n.each(t,function(t,n){this.datasets[n].points.push(new this.PointClass({value:t,label:e,x:this.scale.calculateX(this.scale.valuesCount+1),y:this.scale.endPoint,strokeColor:this.datasets[n].pointStrokeColor,fillColor:this.datasets[n].pointColor}))},this),this.scale.addXLabel(e),this.update()},removeData:function(){this.scale.removeXLabel(),n.each(this.datasets,function(t){t.points.shift()},this),this.update()},reflow:function(){var t=n.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var e=t||1;this.clear();var i=this.chart.ctx,r=function(t){return null!==t.value},o=function(t,e,i){return n.findNextWhere(e,r,i)||t},a=function(t,e,i){return n.findPreviousWhere(e,r,i)||t};this.scale.draw(e),n.each(this.datasets,function(t){var s=n.where(t.points,r);n.each(t.points,function(t,n){t.hasValue()&&t.transition({y:this.scale.calculateY(t.value),x:this.scale.calculateX(n)},e)},this),this.options.bezierCurve&&n.each(s,function(t,e){var i=e>0&&e<s.length-1?this.options.bezierCurveTension:0;t.controlPoints=n.splineCurve(a(t,s,e),t,o(t,s,e),i),t.controlPoints.outer.y>this.scale.endPoint?t.controlPoints.outer.y=this.scale.endPoint:t.controlPoints.outer.y<this.scale.startPoint&&(t.controlPoints.outer.y=this.scale.startPoint),t.controlPoints.inner.y>this.scale.endPoint?t.controlPoints.inner.y=this.scale.endPoint:t.controlPoints.inner.y<this.scale.startPoint&&(t.controlPoints.inner.y=this.scale.startPoint)},this),i.lineWidth=this.options.datasetStrokeWidth,i.strokeStyle=t.strokeColor,i.beginPath(),n.each(s,function(t,e){if(0===e)i.moveTo(t.x,t.y);else if(this.options.bezierCurve){var n=a(t,s,e);i.bezierCurveTo(n.controlPoints.outer.x,n.controlPoints.outer.y,t.controlPoints.inner.x,t.controlPoints.inner.y,t.x,t.y)}else i.lineTo(t.x,t.y)},this),i.stroke(),this.options.datasetFill&&s.length>0&&(i.lineTo(s[s.length-1].x,this.scale.endPoint),i.lineTo(s[0].x,this.scale.endPoint),i.fillStyle=t.fillColor,i.closePath(),i.fill()),n.each(s,function(t){t.draw()})},this)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,n=e.helpers,i={scaleShowLabelBackdrop:!0,scaleBackdropColor:"rgba(255,255,255,0.75)",scaleBeginAtZero:!0,scaleBackdropPaddingY:2,scaleBackdropPaddingX:2,scaleShowLine:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"PolarArea",defaults:i,initialize:function(t){this.segments=[],this.SegmentArc=e.Arc.extend({showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,ctx:this.chart.ctx,innerRadius:0,x:this.chart.width/2,y:this.chart.height/2}),this.scale=new e.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,lineArc:!0,width:this.chart.width,height:this.chart.height,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,valuesCount:t.length}),this.updateScaleRange(t),this.scale.update(),n.each(t,function(t,e){this.addData(t,e,!0)},this),this.options.showTooltips&&n.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];n.each(this.segments,function(t){t.restore(["fillColor"])}),n.each(e,function(t){t.fillColor=t.highlightColor}),this.showTooltip(e)}),this.render()},getSegmentsAtEvent:function(t){var e=[],i=n.getRelativePosition(t);return n.each(this.segments,function(t){t.inRange(i.x,i.y)&&e.push(t)},this),e},addData:function(t,e,n){var i=e||this.segments.length;this.segments.splice(i,0,new this.SegmentArc({fillColor:t.color,highlightColor:t.highlight||t.color,label:t.label,value:t.value,outerRadius:this.options.animateScale?0:this.scale.calculateCenterOffset(t.value),circumference:this.options.animateRotate?0:this.scale.getCircumference(),startAngle:1.5*Math.PI})),n||(this.reflow(),this.update())},removeData:function(t){var e=n.isNumber(t)?t:this.segments.length-1;this.segments.splice(e,1),this.reflow(),this.update()},calculateTotal:function(t){this.total=0,n.each(t,function(t){this.total+=t.value},this),this.scale.valuesCount=this.segments.length},updateScaleRange:function(t){var e=[];n.each(t,function(t){e.push(t.value)});var i=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:n.calculateScaleRange(e,n.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);n.extend(this.scale,i,{size:n.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2})},update:function(){this.calculateTotal(this.segments),n.each(this.segments,function(t){t.save()}),this.reflow(),this.render()},reflow:function(){n.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.updateScaleRange(this.segments),this.scale.update(),n.extend(this.scale,{xCenter:this.chart.width/2,yCenter:this.chart.height/2}),n.each(this.segments,function(t){t.update({outerRadius:this.scale.calculateCenterOffset(t.value)})},this)},draw:function(t){var e=t||1;this.clear(),n.each(this.segments,function(t,n){t.transition({circumference:this.scale.getCircumference(),outerRadius:this.scale.calculateCenterOffset(t.value)},e),t.endAngle=t.startAngle+t.circumference,0===n&&(t.startAngle=1.5*Math.PI),n<this.segments.length-1&&(this.segments[n+1].startAngle=t.endAngle),t.draw()},this),this.scale.draw()}})}.call(this),function(){"use strict";var t=this,e=t.Chart,n=e.helpers;e.Type.extend({name:"Radar",defaults:{scaleShowLine:!0,angleShowLineOut:!0,scaleShowLabels:!1,scaleBeginAtZero:!0,angleLineColor:"rgba(0,0,0,.1)",angleLineWidth:1,pointLabelFontFamily:"'Arial'",pointLabelFontStyle:"normal",pointLabelFontSize:10,pointLabelFontColor:"#666",pointDot:!0,pointDotRadius:3,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'},initialize:function(t){this.PointClass=e.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx}),this.datasets=[],this.buildScale(t),this.options.showTooltips&&n.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),n.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),n.each(t.datasets,function(e){var i={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,pointColor:e.pointColor,pointStrokeColor:e.pointStrokeColor,points:[]};this.datasets.push(i),n.each(e.data,function(n,r){var o;this.scale.animation||(o=this.scale.getPointPosition(r,this.scale.calculateCenterOffset(n))),i.points.push(new this.PointClass({value:n,label:t.labels[r],datasetLabel:e.label,x:this.options.animation?this.scale.xCenter:o.x,y:this.options.animation?this.scale.yCenter:o.y,strokeColor:e.pointStrokeColor,fillColor:e.pointColor,highlightFill:e.pointHighlightFill||e.pointColor,highlightStroke:e.pointHighlightStroke||e.pointStrokeColor}))},this)},this),this.render()},eachPoints:function(t){n.each(this.datasets,function(e){n.each(e.points,t,this)},this)},getPointsAtEvent:function(t){var e=n.getRelativePosition(t),i=n.getAngleFromPoint({x:this.scale.xCenter,y:this.scale.yCenter},e),r=2*Math.PI/this.scale.valuesCount,o=Math.round((i.angle-1.5*Math.PI)/r),a=[];return(o>=this.scale.valuesCount||0>o)&&(o=0),i.distance<=this.scale.drawingArea&&n.each(this.datasets,function(t){a.push(t.points[o])}),a},buildScale:function(t){this.scale=new e.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,angleLineColor:this.options.angleLineColor,angleLineWidth:this.options.angleShowLineOut?this.options.angleLineWidth:0,pointLabelFontColor:this.options.pointLabelFontColor,pointLabelFontSize:this.options.pointLabelFontSize,pointLabelFontFamily:this.options.pointLabelFontFamily,pointLabelFontStyle:this.options.pointLabelFontStyle,height:this.chart.height,width:this.chart.width,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,labels:t.labels,valuesCount:t.datasets[0].data.length}),this.scale.setScaleSize(),this.updateScaleRange(t.datasets),this.scale.buildYLabels()},updateScaleRange:function(t){var e=function(){var e=[];return n.each(t,function(t){t.data?e=e.concat(t.data):n.each(t.points,function(t){e.push(t.value)})}),e}(),i=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:n.calculateScaleRange(e,n.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);n.extend(this.scale,i)},addData:function(t,e){this.scale.valuesCount++,n.each(t,function(t,n){var i=this.scale.getPointPosition(this.scale.valuesCount,this.scale.calculateCenterOffset(t));this.datasets[n].points.push(new this.PointClass({value:t,label:e,x:i.x,y:i.y,strokeColor:this.datasets[n].pointStrokeColor,fillColor:this.datasets[n].pointColor}))},this),this.scale.labels.push(e),this.reflow(),this.update()},removeData:function(){this.scale.valuesCount--,this.scale.labels.shift(),n.each(this.datasets,function(t){t.points.shift()},this),this.reflow(),this.update()},update:function(){this.eachPoints(function(t){t.save()}),this.reflow(),this.render()},reflow:function(){n.extend(this.scale,{width:this.chart.width,height:this.chart.height,size:n.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2}),this.updateScaleRange(this.datasets),this.scale.setScaleSize(),this.scale.buildYLabels()},draw:function(t){var e=t||1,i=this.chart.ctx;this.clear(),this.scale.draw(),n.each(this.datasets,function(t){n.each(t.points,function(t,n){t.hasValue()&&t.transition(this.scale.getPointPosition(n,this.scale.calculateCenterOffset(t.value)),e)},this),i.lineWidth=this.options.datasetStrokeWidth,i.strokeStyle=t.strokeColor,i.beginPath(),n.each(t.points,function(t,e){0===e?i.moveTo(t.x,t.y):i.lineTo(t.x,t.y)},this),i.closePath(),i.stroke(),i.fillStyle=t.fillColor,i.fill(),n.each(t.points,function(t){t.hasValue()&&t.draw()})},this)}})}.call(this),angular.module("cgBusy",[]),angular.module("cgBusy").factory("_cgBusyTrackerFactory",["$timeout","$q",function(t,e){return function(){var n={};n.promises=[],n.delayPromise=null,n.durationPromise=null,n.delayJustFinished=!1,n.reset=function(e){n.minDuration=e.minDuration,n.promises=[],angular.forEach(e.promises,function(t){t&&!t.$cgBusyFulfilled&&i(t)}),0!==n.promises.length&&(n.delayJustFinished=!1,e.delay&&(n.delayPromise=t(function(){n.delayPromise=null,n.delayJustFinished=!0},parseInt(e.delay,10))),e.minDuration&&(n.durationPromise=t(function(){n.durationPromise=null},parseInt(e.minDuration,10)+(e.delay?parseInt(e.delay,10):0))))},n.isPromise=function(t){var e=t&&(t.then||t.$then||t.$promise&&t.$promise.then);return"undefined"!=typeof e},n.callThen=function(t,n,i){var r;t.then||t.$then?r=t:t.$promise?r=t.$promise:t.denodeify&&(r=e.when(t));var o=r.then||r.$then;o.call(r,n,i)};var i=function(t){if(!n.isPromise(t))throw new Error("cgBusy expects a promise (or something that has a .promise or .$promise");-1===n.promises.indexOf(t)&&(n.promises.push(t),n.callThen(t,function(){t.$cgBusyFulfilled=!0,-1!==n.promises.indexOf(t)&&n.promises.splice(n.promises.indexOf(t),1)},function(){t.$cgBusyFulfilled=!0,-1!==n.promises.indexOf(t)&&n.promises.splice(n.promises.indexOf(t),1)}))};return n.active=function(){return n.delayPromise?!1:n.delayJustFinished?(n.delayJustFinished=!1,0===n.promises.length&&(n.durationPromise=null),n.promises.length>0):n.durationPromise?!0:n.promises.length>0},n}}]),angular.module("cgBusy").value("cgBusyDefaults",{}),angular.module("cgBusy").directive("cgBusy",["$compile","$templateCache","cgBusyDefaults","$http","_cgBusyTrackerFactory",function(t,e,n,i,r){return{restrict:"A",link:function(o,a,s,l){var u=a.css("position");("static"===u||""===u||"undefined"==typeof u)&&a.css("position","relative");var c,d,h,p,f,g=r(),m={templateUrl:"angular-busy.html",delay:0,minDuration:0,backdrop:!0,message:"Please Wait...",wrapperClass:"cg-busy cg-busy-animation"};angular.extend(m,n),o.$watchCollection(s.cgBusy,function(n){if(n||(n={promise:null}),angular.isString(n))throw new Error("Invalid value for cg-busy. cgBusy no longer accepts string ids to represent promises/trackers.");(angular.isArray(n)||g.isPromise(n))&&(n={promise:n}),n=angular.extend(angular.copy(m),n),n.templateUrl||(n.templateUrl=m.templateUrl),angular.isArray(n.promise)||(n.promise=[n.promise]),p||(p=o.$new()),p.$message=n.message,angular.equals(g.promises,n.promise)||g.reset({promises:n.promise,delay:n.delay,minDuration:n.minDuration}),p.$cgBusyIsActive=function(){return g.active()},c&&h===n.templateUrl&&f===n.backdrop||(c&&c.remove(),d&&d.remove(),h=n.templateUrl,f=n.backdrop,i.get(h,{cache:e}).success(function(e){if(n.backdrop="undefined"==typeof n.backdrop?!0:n.backdrop,n.backdrop){var i='<div class="cg-busy cg-busy-backdrop cg-busy-backdrop-animation ng-hide" ng-show="$cgBusyIsActive()"></div>';d=t(i)(p),a.append(d)}var r='<div class="'+n.wrapperClass+' ng-hide" ng-show="$cgBusyIsActive()">'+e+"</div>";c=t(r)(p),angular.element(c.children()[0]).css("position","absolute").css("top",0).css("left",0).css("right",0).css("bottom",0),a.append(c)}).error(function(t){throw new Error("Template specified for cgBusy ("+n.templateUrl+") could not be loaded. "+t)}))},!0)}}}]),angular.module("cgBusy").run(["$templateCache",function(t){"use strict";t.put("angular-busy.html",'<div class="cg-busy-default-wrapper">\n\n   <div class="cg-busy-default-sign">\n\n      <div class="cg-busy-default-spinner">\n         <div class="bar1"></div>\n         <div class="bar2"></div>\n         <div class="bar3"></div>\n         <div class="bar4"></div>\n         <div class="bar5"></div>\n         <div class="bar6"></div>\n         <div class="bar7"></div>\n         <div class="bar8"></div>\n         <div class="bar9"></div>\n         <div class="bar10"></div>\n         <div class="bar11"></div>\n         <div class="bar12"></div>\n      </div>\n\n      <div class="cg-busy-default-text">{{$message}}</div>\n\n   </div>\n\n</div>')}]),!function(t){"use strict";"object"==typeof exports?module.exports=t(require("angular"),require("Chart.js")):"function"==typeof define&&define.amd?define(["angular","chart"],t):t(angular,Chart)}(function(t,e){"use strict";function n(){var n={},i={Chart:e,getOptions:function(e){var i=e&&n[e]||{};return t.extend({},n,i)}};this.setOptions=function(e,i){return i?void(n[e]=t.extend(n[e]||{},i)):(i=e,void(n=t.extend(n,i)))},this.$get=function(){return i}}function i(n,i){function o(t,e){return t&&e&&t.length&&e.length?Array.isArray(t[0])?t.length===e.length&&t.every(function(t,n){return t.length===e[n].length}):e.reduce(a,0)>0?t.length===e.length:!1:!1}function a(t,e){return t+e}function s(e,n,i,r){var o=null;return function(a){var s=n.getPointsAtEvent||n.getBarsAtEvent||n.getSegmentsAtEvent;if(s){var l=s.call(n,a);(r===!1||t.equals(o,l)===!1)&&(o=l,e[i](l,a),e.$apply())}}}function l(i,r){for(var o=t.copy(r.colours||n.getOptions(i).colours||e.defaults.global.colours);o.length<r.data.length;)o.push(r.getColour());return o.map(u)}function u(t){return"object"==typeof t&&null!==t?t:"string"==typeof t&&"#"===t[0]?d(f(t.substr(1))):c()}function c(){var t=[h(0,255),h(0,255),h(0,255)];return d(t)}function d(t){return{fillColor:p(t,.2),strokeColor:p(t,1),pointColor:p(t,1),pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:p(t,.8)}}function h(t,e){return Math.floor(Math.random()*(e-t+1))+t}function p(t,e){return r?"rgb("+t.join(",")+")":"rgba("+t.concat(e).join(",")+")"}function f(t){var e=parseInt(t,16),n=e>>16&255,i=e>>8&255,r=255&e;return[n,i,r]}function g(e,n,i,r){return{labels:e,datasets:n.map(function(e,n){return t.extend({},r[n],{label:i[n],data:e})})}}function m(e,n,i){return e.map(function(e,r){return t.extend({},i[r],{label:e,value:n[r],color:i[r].strokeColor,highlight:i[r].pointHighlightStroke})})}function v(t,e){var n=t.parent(),i=n.find("chart-legend"),r="<chart-legend>"+e.generateLegend()+"</chart-legend>";i.length?i.replaceWith(r):n.append(r)}function y(t,e,n,i){Array.isArray(n.data[0])?t.datasets.forEach(function(t,n){(t.points||t.bars).forEach(function(t,i){t.value=e[n][i]})}):t.segments.forEach(function(t,n){t.value=e[n]}),t.update(),n.$emit("update",t),n.legend&&"false"!==n.legend&&v(i,t)}function b(t){return!t||Array.isArray(t)&&!t.length||"object"==typeof t&&!Object.keys(t).length}function w(i,r){var o=t.extend({},e.defaults.global,n.getOptions(i),r.options);return o.responsive}return function(e){return{restrict:"CA",scope:{data:"=?",labels:"=?",options:"=?",series:"=?",colours:"=?",getColour:"=?",chartType:"=",legend:"@",click:"=?",hover:"=?",chartData:"=?",chartLabels:"=?",chartOptions:"=?",chartSeries:"=?",chartColours:"=?",chartLegend:"@",chartClick:"=?",chartHover:"=?"},link:function(a,u){function d(t,e){a.$watch(t,function(t){"undefined"!=typeof t&&(a[e]=t)})}function h(n,i){if(!b(n)&&!t.equals(n,i)){var r=e||a.chartType;r&&(x&&x.destroy(),p(r))}}function p(e){if(w(e,a)&&0===u[0].clientHeight&&0===_.clientHeight)return i(function(){p(e)},50,!1);if(a.data&&a.data.length){a.getColour="function"==typeof a.getColour?a.getColour:c,a.colours=l(e,a);var r=u[0],o=r.getContext("2d"),d=Array.isArray(a.data[0])?g(a.labels,a.data,a.series||[],a.colours):m(a.labels,a.data,a.colours),h=t.extend({},n.getOptions(e),a.options);x=new n.Chart(o)[e](d,h),a.$emit("create",x),r.onclick=a.click?s(a,x,"click",!1):t.noop,r.onmousemove=a.hover?s(a,x,"hover",!0):t.noop,a.legend&&"false"!==a.legend&&v(u,x)}}function f(t){if("undefined"!=typeof console&&"test"!==n.getOptions().env){var e="function"==typeof console.warn?console.warn:console.log;a[t]&&e.call(console,'"%s" is deprecated and will be removed in a future version. Please use "chart-%s" instead.',t,t)}}var x,_=document.createElement("div");_.className="chart-container",u.replaceWith(_),_.appendChild(u[0]),r&&window.G_vmlCanvasManager.initElement(u[0]),["data","labels","options","series","colours","legend","click","hover"].forEach(f),d("chartData","data"),d("chartLabels","labels"),d("chartOptions","options"),d("chartSeries","series"),d("chartColours","colours"),d("chartLegend","legend"),d("chartClick","click"),d("chartHover","hover"),a.$watch("data",function(t,n){if(t&&t.length&&(!Array.isArray(t[0])||t[0].length)){var i=e||a.chartType;if(i){if(x){if(o(t,n))return y(x,t,a,u);x.destroy()}p(i)}}},!0),a.$watch("series",h,!0),a.$watch("labels",h,!0),a.$watch("options",h,!0),a.$watch("colours",h,!0),a.$watch("chartType",function(e,n){b(e)||t.equals(e,n)||(x&&x.destroy(),p(e))}),a.$on("$destroy",function(){x&&x.destroy()})}}}}e.defaults.global.responsive=!0,e.defaults.global.multiTooltipTemplate="<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>",e.defaults.global.colours=["#97BBCD","#DCDCDC","#F7464A","#46BFBD","#FDB45C","#949FB1","#4D5360"];var r="object"==typeof window.G_vmlCanvasManager&&null!==window.G_vmlCanvasManager&&"function"==typeof window.G_vmlCanvasManager.initElement;return r&&(e.defaults.global.animation=!1),t.module("chart.js",[]).provider("ChartJs",n).factory("ChartJsFactory",["ChartJs","$timeout",i]).directive("chartBase",["ChartJsFactory",function(t){return new t}]).directive("chartLine",["ChartJsFactory",function(t){return new t("Line")}]).directive("chartBar",["ChartJsFactory",function(t){return new t("Bar")}]).directive("chartRadar",["ChartJsFactory",function(t){return new t("Radar")}]).directive("chartDoughnut",["ChartJsFactory",function(t){return new t("Doughnut")}]).directive("chartPie",["ChartJsFactory",function(t){return new t("Pie")}]).directive("chartPolarArea",["ChartJsFactory",function(t){return new t("PolarArea")}])}),!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):"object"==typeof exports?exports["angular-file-upload"]=e():t["angular-file-upload"]=e()}(this,function(){return function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t["default"]:t},r=i(n(2)),o=i(n(3)),a=i(n(4)),s=i(n(5)),l=i(n(6)),u=i(n(7)),c=i(n(1)),d=i(n(8)),h=i(n(9)),p=i(n(10)),f=i(n(11)),g=i(n(12));angular.module(r.name,[]).value("fileUploaderOptions",o).factory("FileUploader",a).factory("FileLikeObject",s).factory("FileItem",l).factory("FileDirective",u).factory("FileSelect",c).factory("FileDrop",d).factory("FileOver",h).directive("nvFileSelect",p).directive("nvFileDrop",f).directive("nvFileOver",g).run(["FileUploader","FileLikeObject","FileItem","FileDirective","FileSelect","FileDrop","FileOver",function(t,e,n,i,r,o,a){t.FileLikeObject=e,t.FileItem=n,t.FileDirective=i,t.FileSelect=r,t.FileDrop=o,t.FileOver=a}])},function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t["default"]:t},r=function(){function t(t,e){for(var n in e){var i=e[n];i.configurable=!0,i.value&&(i.writable=!0)}Object.defineProperties(t,e)}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function u(t,e,n){var i=Object.getOwnPropertyDescriptor(t,e);if(void 0===i){var r=Object.getPrototypeOf(t);return null===r?void 0:u(r,e,n)}if("value"in i&&i.writable)return i.value;var o=i.get;return void 0===o?void 0:o.call(n)},a=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.__proto__=e)},s=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},l=(i(n(2)),angular.extend);t.exports=function(t){var e=function(t){function e(t){s(this,e);var n=l(t,{events:{$destroy:"destroy",change:"onChange"},prop:"select"});o(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,n),
this.uploader.isHTML5||this.element.removeAttr("multiple"),this.element.prop("value",null)}return a(e,t),r(e,{getOptions:{value:function(){}},getFilters:{value:function(){}},isEmptyAfterSelection:{value:function(){return!!this.element.attr("multiple")}},onChange:{value:function(){var t=this.uploader.isHTML5?this.element[0].files:this.element[0],e=this.getOptions(),n=this.getFilters();this.uploader.isHTML5||this.destroy(),this.uploader.addToQueue(t,e,n),this.isEmptyAfterSelection()&&(this.element.prop("value",null),this.element.replaceWith(this.element=this.element.clone(!0)))}}}),e}(t);return e},t.exports.$inject=["FileDirective"]},function(t,e){t.exports={name:"angularFileUpload"}},function(t,e){"use strict";t.exports={url:"/",alias:"file",headers:{},queue:[],progress:0,autoUpload:!1,removeAfterUpload:!1,method:"POST",filters:[],formData:[],queueLimit:Number.MAX_VALUE,withCredentials:!1}},function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t["default"]:t},r=function(){function t(t,e){for(var n in e){var i=e[n];i.configurable=!0,i.value&&(i.writable=!0)}Object.defineProperties(t,e)}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},a=(i(n(2)),angular.copy),s=angular.extend,l=angular.forEach,u=angular.isObject,c=angular.isNumber,d=angular.isDefined,h=angular.isArray,p=angular.element;t.exports=function(t,e,n,i,f,g){var m=i.File,v=i.FormData,y=function(){function i(e){o(this,i);var n=a(t);s(this,n,e,{isUploading:!1,_nextIndex:0,_failFilterIndex:-1,_directives:{select:[],drop:[],over:[]}}),this.filters.unshift({name:"queueLimit",fn:this._queueLimitFilter}),this.filters.unshift({name:"folder",fn:this._folderFilter})}return r(i,{addToQueue:{value:function(t,e,n){var i=this,r=this.isArrayLikeObject(t)?t:[t],o=this._getFilters(n),a=this.queue.length,s=[];l(r,function(t){var n=new f(t);if(i._isValidFile(n,o,e)){var r=new g(i,t,e);s.push(r),i.queue.push(r),i._onAfterAddingFile(r)}else{var a=o[i._failFilterIndex];i._onWhenAddingFileFailed(n,a,e)}}),this.queue.length!==a&&(this._onAfterAddingAll(s),this.progress=this._getTotalProgress()),this._render(),this.autoUpload&&this.uploadAll()}},removeFromQueue:{value:function(t){var e=this.getIndexOfItem(t),n=this.queue[e];n.isUploading&&n.cancel(),this.queue.splice(e,1),n._destroy(),this.progress=this._getTotalProgress()}},clearQueue:{value:function(){for(;this.queue.length;)this.queue[0].remove();this.progress=0}},uploadItem:{value:function(t){var e=this.getIndexOfItem(t),n=this.queue[e],i=this.isHTML5?"_xhrTransport":"_iframeTransport";n._prepareToUploading(),this.isUploading||(this.isUploading=!0,this[i](n))}},cancelItem:{value:function(t){var e=this.getIndexOfItem(t),n=this.queue[e],i=this.isHTML5?"_xhr":"_form";n&&n.isUploading&&n[i].abort()}},uploadAll:{value:function(){var t=this.getNotUploadedItems().filter(function(t){return!t.isUploading});t.length&&(l(t,function(t){return t._prepareToUploading()}),t[0].upload())}},cancelAll:{value:function(){var t=this.getNotUploadedItems();l(t,function(t){return t.cancel()})}},isFile:{value:function(t){return this.constructor.isFile(t)}},isFileLikeObject:{value:function(t){return this.constructor.isFileLikeObject(t)}},isArrayLikeObject:{value:function(t){return this.constructor.isArrayLikeObject(t)}},getIndexOfItem:{value:function(t){return c(t)?t:this.queue.indexOf(t)}},getNotUploadedItems:{value:function(){return this.queue.filter(function(t){return!t.isUploaded})}},getReadyItems:{value:function(){return this.queue.filter(function(t){return t.isReady&&!t.isUploading}).sort(function(t,e){return t.index-e.index})}},destroy:{value:function(){var t=this;l(this._directives,function(e){l(t._directives[e],function(t){t.destroy()})})}},onAfterAddingAll:{value:function(t){}},onAfterAddingFile:{value:function(t){}},onWhenAddingFileFailed:{value:function(t,e,n){}},onBeforeUploadItem:{value:function(t){}},onProgressItem:{value:function(t,e){}},onProgressAll:{value:function(t){}},onSuccessItem:{value:function(t,e,n,i){}},onErrorItem:{value:function(t,e,n,i){}},onCancelItem:{value:function(t,e,n,i){}},onCompleteItem:{value:function(t,e,n,i){}},onCompleteAll:{value:function(){}},_getTotalProgress:{value:function(t){if(this.removeAfterUpload)return t||0;var e=this.getNotUploadedItems().length,n=e?this.queue.length-e:this.queue.length,i=100/this.queue.length,r=(t||0)*i/100;return Math.round(n*i+r)}},_getFilters:{value:function(t){if(!t)return this.filters;if(h(t))return t;var e=t.match(/[^\s,]+/g);return this.filters.filter(function(t){return-1!==e.indexOf(t.name)})}},_render:{value:function(){e.$$phase||e.$apply()}},_folderFilter:{value:function(t){return!(!t.size&&!t.type)}},_queueLimitFilter:{value:function(){return this.queue.length<this.queueLimit}},_isValidFile:{value:function(t,e,n){var i=this;return this._failFilterIndex=-1,e.length?e.every(function(e){return i._failFilterIndex++,e.fn.call(i,t,n)}):!0}},_isSuccessCode:{value:function(t){return t>=200&&300>t||304===t}},_transformResponse:{value:function(t,e){var i=this._headersGetter(e);return l(n.defaults.transformResponse,function(e){t=e(t,i)}),t}},_parseHeaders:{value:function(t){var e,n,i,r={};return t?(l(t.split("\n"),function(t){i=t.indexOf(":"),e=t.slice(0,i).trim().toLowerCase(),n=t.slice(i+1).trim(),e&&(r[e]=r[e]?r[e]+", "+n:n)}),r):r}},_headersGetter:{value:function(t){return function(e){return e?t[e.toLowerCase()]||null:t}}},_xhrTransport:{value:function(t){var e=this,n=t._xhr=new XMLHttpRequest,i=new v;if(this._onBeforeUploadItem(t),l(t.formData,function(t){l(t,function(t,e){i.append(e,t)})}),"number"!=typeof t._file.size)throw new TypeError("The file specified is no longer valid");i.append(t.alias,t._file,t.file.name),n.upload.onprogress=function(n){var i=Math.round(n.lengthComputable?100*n.loaded/n.total:0);e._onProgressItem(t,i)},n.onload=function(){var i=e._parseHeaders(n.getAllResponseHeaders()),r=e._transformResponse(n.response,i),o=e._isSuccessCode(n.status)?"Success":"Error",a="_on"+o+"Item";e[a](t,r,n.status,i),e._onCompleteItem(t,r,n.status,i)},n.onerror=function(){var i=e._parseHeaders(n.getAllResponseHeaders()),r=e._transformResponse(n.response,i);e._onErrorItem(t,r,n.status,i),e._onCompleteItem(t,r,n.status,i)},n.onabort=function(){var i=e._parseHeaders(n.getAllResponseHeaders()),r=e._transformResponse(n.response,i);e._onCancelItem(t,r,n.status,i),e._onCompleteItem(t,r,n.status,i)},n.open(t.method,t.url,!0),n.withCredentials=t.withCredentials,l(t.headers,function(t,e){n.setRequestHeader(e,t)}),n.send(i),this._render()}},_iframeTransport:{value:function(t){var e=this,n=p('<form style="display: none;" />'),i=p('<iframe name="iframeTransport'+Date.now()+'">'),r=t._input;t._form&&t._form.replaceWith(r),t._form=n,this._onBeforeUploadItem(t),r.prop("name",t.alias),l(t.formData,function(t){l(t,function(t,e){var i=p('<input type="hidden" name="'+e+'" />');i.val(t),n.append(i)})}),n.prop({action:t.url,method:"POST",target:i.prop("name"),enctype:"multipart/form-data",encoding:"multipart/form-data"}),i.bind("load",function(){var n="",r=200;try{n=i[0].contentDocument.body.innerHTML}catch(o){r=500}var a={response:n,status:r,dummy:!0},s={},l=e._transformResponse(a.response,s);e._onSuccessItem(t,l,a.status,s),e._onCompleteItem(t,l,a.status,s)}),n.abort=function(){var o,a={status:0,dummy:!0},s={};i.unbind("load").prop("src","javascript:false;"),n.replaceWith(r),e._onCancelItem(t,o,a.status,s),e._onCompleteItem(t,o,a.status,s)},r.after(n),n.append(r).append(i),n[0].submit(),this._render()}},_onWhenAddingFileFailed:{value:function(t,e,n){this.onWhenAddingFileFailed(t,e,n)}},_onAfterAddingFile:{value:function(t){this.onAfterAddingFile(t)}},_onAfterAddingAll:{value:function(t){this.onAfterAddingAll(t)}},_onBeforeUploadItem:{value:function(t){t._onBeforeUpload(),this.onBeforeUploadItem(t)}},_onProgressItem:{value:function(t,e){var n=this._getTotalProgress(e);this.progress=n,t._onProgress(e),this.onProgressItem(t,e),this.onProgressAll(n),this._render()}},_onSuccessItem:{value:function(t,e,n,i){t._onSuccess(e,n,i),this.onSuccessItem(t,e,n,i)}},_onErrorItem:{value:function(t,e,n,i){t._onError(e,n,i),this.onErrorItem(t,e,n,i)}},_onCancelItem:{value:function(t,e,n,i){t._onCancel(e,n,i),this.onCancelItem(t,e,n,i)}},_onCompleteItem:{value:function(t,e,n,i){t._onComplete(e,n,i),this.onCompleteItem(t,e,n,i);var r=this.getReadyItems()[0];return this.isUploading=!1,d(r)?void r.upload():(this.onCompleteAll(),this.progress=this._getTotalProgress(),void this._render())}}},{isFile:{value:function(t){return m&&t instanceof m}},isFileLikeObject:{value:function(t){return t instanceof f}},isArrayLikeObject:{value:function(t){return u(t)&&"length"in t}},inherit:{value:function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.super_=e}}}),i}();return y.prototype.isHTML5=!(!m||!v),y.isHTML5=y.prototype.isHTML5,y},t.exports.$inject=["fileUploaderOptions","$rootScope","$http","$window","FileLikeObject","FileItem"]},function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t["default"]:t},r=function(){function t(t,e){for(var n in e){var i=e[n];i.configurable=!0,i.value&&(i.writable=!0)}Object.defineProperties(t,e)}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},a=(i(n(2)),angular.copy),s=angular.isElement,l=angular.isString;t.exports=function(){var t=function(){function t(e){o(this,t);var n=s(e),i=n?e.value:e,r=l(i)?"FakePath":"Object",a="_createFrom"+r;this[a](i)}return r(t,{_createFromFakePath:{value:function(t){this.lastModifiedDate=null,this.size=null,this.type="like/"+t.slice(t.lastIndexOf(".")+1).toLowerCase(),this.name=t.slice(t.lastIndexOf("/")+t.lastIndexOf("\\")+2)}},_createFromObject:{value:function(t){this.lastModifiedDate=a(t.lastModifiedDate),this.size=t.size,this.type=t.type,this.name=t.name}}}),t}();return t},t.exports.$inject=[]},function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t["default"]:t},r=function(){function t(t,e){for(var n in e){var i=e[n];i.configurable=!0,i.value&&(i.writable=!0)}Object.defineProperties(t,e)}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},a=(i(n(2)),angular.copy),s=angular.extend,l=angular.element,u=angular.isElement;t.exports=function(t,e){var n=function(){function n(t,i,r){o(this,n);var c=u(i),d=c?l(i):null,h=c?null:i;s(this,{url:t.url,alias:t.alias,headers:a(t.headers),formData:a(t.formData),removeAfterUpload:t.removeAfterUpload,withCredentials:t.withCredentials,method:t.method},r,{uploader:t,file:new e(i),isReady:!1,isUploading:!1,isUploaded:!1,isSuccess:!1,isCancel:!1,isError:!1,progress:0,index:null,_file:h,_input:d}),d&&this._replaceNode(d)}return r(n,{upload:{value:function(){try{this.uploader.uploadItem(this)}catch(t){this.uploader._onCompleteItem(this,"",0,[]),this.uploader._onErrorItem(this,"",0,[])}}},cancel:{value:function(){this.uploader.cancelItem(this)}},remove:{value:function(){this.uploader.removeFromQueue(this)}},onBeforeUpload:{value:function(){}},onProgress:{value:function(t){}},onSuccess:{value:function(t,e,n){}},onError:{value:function(t,e,n){}},onCancel:{value:function(t,e,n){}},onComplete:{value:function(t,e,n){}},_onBeforeUpload:{value:function(){this.isReady=!0,this.isUploading=!0,this.isUploaded=!1,this.isSuccess=!1,this.isCancel=!1,this.isError=!1,this.progress=0,this.onBeforeUpload()}},_onProgress:{value:function(t){this.progress=t,this.onProgress(t)}},_onSuccess:{value:function(t,e,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!0,this.isSuccess=!0,this.isCancel=!1,this.isError=!1,this.progress=100,this.index=null,this.onSuccess(t,e,n)}},_onError:{value:function(t,e,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!0,this.isSuccess=!1,this.isCancel=!1,this.isError=!0,this.progress=0,this.index=null,this.onError(t,e,n)}},_onCancel:{value:function(t,e,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!1,this.isSuccess=!1,this.isCancel=!0,this.isError=!1,this.progress=0,this.index=null,this.onCancel(t,e,n)}},_onComplete:{value:function(t,e,n){this.onComplete(t,e,n),this.removeAfterUpload&&this.remove()}},_destroy:{value:function(){this._input&&this._input.remove(),this._form&&this._form.remove(),delete this._form,delete this._input}},_prepareToUploading:{value:function(){this.index=this.index||++this.uploader._nextIndex,this.isReady=!0}},_replaceNode:{value:function(e){var n=t(e.clone())(e.scope());n.prop("value",null),e.css("display","none"),e.after(n)}}}),n}();return n},t.exports.$inject=["$compile","FileLikeObject"]},function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t["default"]:t},r=function(){function t(t,e){for(var n in e){var i=e[n];i.configurable=!0,i.value&&(i.writable=!0)}Object.defineProperties(t,e)}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},a=(i(n(2)),angular.extend);t.exports=function(){var t=function(){function t(e){o(this,t),a(this,e),this.uploader._directives[this.prop].push(this),this._saveLinks(),this.bind()}return r(t,{bind:{value:function(){for(var t in this.events){var e=this.events[t];this.element.bind(t,this[e])}}},unbind:{value:function(){for(var t in this.events)this.element.unbind(t,this.events[t])}},destroy:{value:function(){var t=this.uploader._directives[this.prop].indexOf(this);this.uploader._directives[this.prop].splice(t,1),this.unbind()}},_saveLinks:{value:function(){for(var t in this.events){var e=this.events[t];this[e]=this[e].bind(this)}}}}),t}();return t.prototype.events={},t},t.exports.$inject=[]},function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t["default"]:t},r=function(){function t(t,e){for(var n in e){var i=e[n];i.configurable=!0,i.value&&(i.writable=!0)}Object.defineProperties(t,e)}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function c(t,e,n){var i=Object.getOwnPropertyDescriptor(t,e);if(void 0===i){var r=Object.getPrototypeOf(t);return null===r?void 0:c(r,e,n)}if("value"in i&&i.writable)return i.value;var o=i.get;return void 0===o?void 0:o.call(n)},a=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.__proto__=e)},s=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},l=(i(n(2)),angular.extend),u=angular.forEach;t.exports=function(t){var e=function(t){function e(t){s(this,e);var n=l(t,{events:{$destroy:"destroy",drop:"onDrop",dragover:"onDragOver",dragleave:"onDragLeave"},prop:"drop"});o(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,n)}return a(e,t),r(e,{getOptions:{value:function(){}},getFilters:{value:function(){}},onDrop:{value:function(t){var e=this._getTransfer(t);if(e){var n=this.getOptions(),i=this.getFilters();this._preventAndStop(t),u(this.uploader._directives.over,this._removeOverClass,this),this.uploader.addToQueue(e.files,n,i)}}},onDragOver:{value:function(t){var e=this._getTransfer(t);this._haveFiles(e.types)&&(e.dropEffect="copy",this._preventAndStop(t),u(this.uploader._directives.over,this._addOverClass,this))}},onDragLeave:{value:function(t){t.currentTarget!==this.element[0]&&(this._preventAndStop(t),u(this.uploader._directives.over,this._removeOverClass,this))}},_getTransfer:{value:function(t){return t.dataTransfer?t.dataTransfer:t.originalEvent.dataTransfer}},_preventAndStop:{value:function(t){t.preventDefault(),t.stopPropagation()}},_haveFiles:{value:function(t){return t?t.indexOf?-1!==t.indexOf("Files"):t.contains?t.contains("Files"):!1:!1}},_addOverClass:{value:function(t){t.addOverClass()}},_removeOverClass:{value:function(t){t.removeOverClass()}}}),e}(t);return e},t.exports.$inject=["FileDirective"]},function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t["default"]:t},r=function(){function t(t,e){for(var n in e){var i=e[n];i.configurable=!0,i.value&&(i.writable=!0)}Object.defineProperties(t,e)}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function u(t,e,n){var i=Object.getOwnPropertyDescriptor(t,e);if(void 0===i){var r=Object.getPrototypeOf(t);return null===r?void 0:u(r,e,n)}if("value"in i&&i.writable)return i.value;var o=i.get;return void 0===o?void 0:o.call(n)},a=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.__proto__=e)},s=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},l=(i(n(2)),angular.extend);t.exports=function(t){var e=function(t){function e(t){s(this,e);var n=l(t,{events:{$destroy:"destroy"},prop:"over",overClass:"nv-file-over"});o(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,n)}return a(e,t),r(e,{addOverClass:{value:function(){this.element.addClass(this.getOverClass())}},removeOverClass:{value:function(){this.element.removeClass(this.getOverClass())}},getOverClass:{value:function(){return this.overClass}}}),e}(t);return e},t.exports.$inject=["FileDirective"]},function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t["default"]:t};i(n(2)),t.exports=function(t,e,n){return{link:function(i,r,o){var a=i.$eval(o.uploader);if(!(a instanceof e))throw new TypeError('"Uploader" must be an instance of FileUploader');var s=new n({uploader:a,element:r});s.getOptions=t(o.options).bind(s,i),s.getFilters=function(){return o.filters}}}},t.exports.$inject=["$parse","FileUploader","FileSelect"]},function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t["default"]:t};i(n(2)),t.exports=function(t,e,n){return{link:function(i,r,o){var a=i.$eval(o.uploader);if(!(a instanceof e))throw new TypeError('"Uploader" must be an instance of FileUploader');if(a.isHTML5){var s=new n({uploader:a,element:r});s.getOptions=t(o.options).bind(s,i),s.getFilters=function(){return o.filters}}}}},t.exports.$inject=["$parse","FileUploader","FileDrop"]},function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t["default"]:t};i(n(2)),t.exports=function(t,e){return{link:function(n,i,r){var o=n.$eval(r.uploader);if(!(o instanceof t))throw new TypeError('"Uploader" must be an instance of FileUploader');var a=new e({uploader:o,element:i});a.getOverClass=function(){return r.overClass||a.overClass}}}},t.exports.$inject=["FileUploader","FileOver"]}])}),!function(){"use strict";angular.module("pdf",[]).directive("ngPdf",["$window",function(t){var e=function(t){var e=t.getContext("2d"),n=window.devicePixelRatio||1,i=e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1;return n/i},n=function(t,n,i){var r=e(t);return t.width=Math.floor(n*r),t.height=Math.floor(i*r),t.style.width=Math.floor(n)+"px",t.style.height=Math.floor(i)+"px",t.getContext("2d").setTransform(r,0,0,r,0,0),t};return{restrict:"E",templateUrl:function(t,e){return e.templateUrl?e.templateUrl:"partials/viewer.html"},link:function(e,i,r){function o(){a&&a.length&&PDFJS.getDocument(a,null,null,e.onProgress).then(function(t){"function"==typeof e.onLoad&&e.onLoad(),s=t,e.renderPage(e.pageToDisplay),e.$apply(function(){e.pageCount=t.numPages})},function(t){t&&"function"==typeof e.onError&&e.onError(t)})}var a=e.pdfUrl,s=null,l=r.page?r.page:1,u=r.scale>0?r.scale:1,c=r.canvasid?document.getElementById(r.canvasid):document.getElementById("pdf-canvas"),d=c.getContext("2d"),h=angular.element(t);h.on("scroll",function(){e.$apply(function(){e.scroll=h[0].scrollY})}),PDFJS.disableWorker=!0,e.pageNum=l,e.renderPage=function(t){s.getPage(t).then(function(t){var o,a,s,l={};"page-fit"!==r.scale||u?o=t.getViewport(u):(o=t.getViewport(1),a=i[0].clientWidth/o.width,s=i[0].clientHeight/o.height,u=Math.min(a,s)),n(c,o.width,o.height),l={canvasContext:d,viewport:o},t.render(l).promise.then(function(){"function"==typeof e.onPageRender&&e.onPageRender()})})},e.goPrevious=function(){e.pageToDisplay<=1||(e.pageNum=parseInt(e.pageNum)-1)},e.goNext=function(){e.pageToDisplay>=s.numPages||(e.pageNum=parseInt(e.pageNum)+1)},e.zoomIn=function(){return u=parseFloat(u)+.2,e.renderPage(e.pageToDisplay),u},e.zoomOut=function(){return u=parseFloat(u)-.2,e.renderPage(e.pageToDisplay),u},e.changePage=function(){e.renderPage(e.pageToDisplay)},e.rotate=function(){"rotate0"===c.getAttribute("class")?c.setAttribute("class","rotate90"):"rotate90"===c.getAttribute("class")?c.setAttribute("class","rotate180"):"rotate180"===c.getAttribute("class")?c.setAttribute("class","rotate270"):c.setAttribute("class","rotate0")},e.$watch("pageNum",function(t){e.pageToDisplay=parseInt(t),null!==s&&e.renderPage(e.pageToDisplay)}),e.$watch("pdfUrl",function(t){""!==t&&(console.log("pdfUrl value change detected: ",e.pdfUrl),a=t,e.pageToDisplay=1,o())})}}}])}(),!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e="length"in t&&t.length,n=Q.type(t);return"function"===n||Q.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function i(t,e,n){if(Q.isFunction(e))return Q.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return Q.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(st.test(e))return Q.filter(e,t,n);e=Q.filter(e,t)}return Q.grep(t,function(t){return z.call(e,t)>=0!==n})}function r(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e=ft[t]={};return Q.each(t.match(pt)||[],function(t,n){e[n]=!0}),e}function a(){Z.removeEventListener("DOMContentLoaded",a,!1),t.removeEventListener("load",a,!1),Q.ready()}function s(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=Q.expando+s.uid++}function l(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(wt,"-$1").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:bt.test(n)?Q.parseJSON(n):n}catch(r){}yt.set(t,e,n)}else n=void 0;return n}function u(){return!0}function c(){return!1}function d(){try{return Z.activeElement}catch(t){}}function h(t,e){return Q.nodeName(t,"table")&&Q.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function p(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function f(t){var e=Nt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function g(t,e){for(var n=0,i=t.length;i>n;n++)vt.set(t[n],"globalEval",!e||vt.get(e[n],"globalEval"))}function m(t,e){var n,i,r,o,a,s,l,u;if(1===e.nodeType){if(vt.hasData(t)&&(o=vt.access(t),a=vt.set(e,o),u=o.events)){delete a.handle,a.events={};for(r in u)for(n=0,i=u[r].length;i>n;n++)Q.event.add(e,r,u[r][n])}yt.hasData(t)&&(s=yt.access(t),l=Q.extend({},s),yt.set(e,l))}}function v(t,e){var n=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&Q.nodeName(t,e)?Q.merge([t],n):n}function y(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Ct.test(t.type)?e.checked=t.checked:("input"===n||"textarea"===n)&&(e.defaultValue=t.defaultValue)}function b(e,n){var i,r=Q(n.createElement(e)).appendTo(n.body),o=t.getDefaultComputedStyle&&(i=t.getDefaultComputedStyle(r[0]))?i.display:Q.css(r[0],"display");return r.detach(),o}function w(t){var e=Z,n=Ht[t];return n||(n=b(t,e),"none"!==n&&n||(Rt=(Rt||Q("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Rt[0].contentDocument,e.write(),e.close(),n=b(t,e),Rt.detach()),Ht[t]=n),n}function x(t,e,n){var i,r,o,a,s=t.style;return n=n||Bt(t),n&&(a=n.getPropertyValue(e)||n[e]),n&&(""!==a||Q.contains(t.ownerDocument,t)||(a=Q.style(t,e)),Ut.test(a)&&jt.test(e)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function _(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function S(t,e){if(e in t)return e;for(var n=e[0].toUpperCase()+e.slice(1),i=e,r=Gt.length;r--;)if(e=Gt[r]+n,e in t)return e;return i}function C(t,e,n){var i=qt.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function O(t,e,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,a=0;4>o;o+=2)"margin"===n&&(a+=Q.css(t,n+_t[o],!0,r)),i?("content"===n&&(a-=Q.css(t,"padding"+_t[o],!0,r)),"margin"!==n&&(a-=Q.css(t,"border"+_t[o]+"Width",!0,r))):(a+=Q.css(t,"padding"+_t[o],!0,r),"padding"!==n&&(a+=Q.css(t,"border"+_t[o]+"Width",!0,r)));return a}function D(t,e,n){var i=!0,r="width"===e?t.offsetWidth:t.offsetHeight,o=Bt(t),a="border-box"===Q.css(t,"boxSizing",!1,o);if(0>=r||null==r){if(r=x(t,e,o),(0>r||null==r)&&(r=t.style[e]),Ut.test(r))return r;i=a&&(K.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+O(t,e,n||(a?"border":"content"),i,o)+"px"}function k(t,e){for(var n,i,r,o=[],a=0,s=t.length;s>a;a++)i=t[a],i.style&&(o[a]=vt.get(i,"olddisplay"),n=i.style.display,e?(o[a]||"none"!==n||(i.style.display=""),""===i.style.display&&St(i)&&(o[a]=vt.access(i,"olddisplay",w(i.nodeName)))):(r=St(i),"none"===n&&r||vt.set(i,"olddisplay",r?n:Q.css(i,"display"))));for(a=0;s>a;a++)i=t[a],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?o[a]||"":"none"));return t}function T(t,e,n,i,r){return new T.prototype.init(t,e,n,i,r)}function E(){return setTimeout(function(){Kt=void 0}),Kt=Q.now()}function P(t,e){var n,i=0,r={height:t};for(e=e?1:0;4>i;i+=2-e)n=_t[i],r["margin"+n]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function $(t,e,n){for(var i,r=(ne[e]||[]).concat(ne["*"]),o=0,a=r.length;a>o;o++)if(i=r[o].call(n,e,t))return i}function M(t,e,n){var i,r,o,a,s,l,u,c,d=this,h={},p=t.style,f=t.nodeType&&St(t),g=vt.get(t,"fxshow");n.queue||(s=Q._queueHooks(t,"fx"),null==s.unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,Q.queue(t,"fx").length||s.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],u=Q.css(t,"display"),c="none"===u?vt.get(t,"olddisplay")||w(t.nodeName):u,"inline"===c&&"none"===Q.css(t,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(i in e)if(r=e[i],Jt.exec(r)){if(delete e[i],o=o||"toggle"===r,r===(f?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;f=!0}h[i]=g&&g[i]||Q.style(t,i)}else u=void 0;if(Q.isEmptyObject(h))"inline"===("none"===u?w(t.nodeName):u)&&(p.display=u);else{g?"hidden"in g&&(f=g.hidden):g=vt.access(t,"fxshow",{}),o&&(g.hidden=!f),f?Q(t).show():d.done(function(){Q(t).hide()}),d.done(function(){var e;vt.remove(t,"fxshow");for(e in h)Q.style(t,e,h[e])});for(i in h)a=$(f?g[i]:0,i,d),i in g||(g[i]=a.start,f&&(a.end=a.start,a.start="width"===i||"height"===i?1:0))}}function I(t,e){var n,i,r,o,a;for(n in t)if(i=Q.camelCase(n),r=e[i],o=t[n],Q.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),a=Q.cssHooks[i],a&&"expand"in a){o=a.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}function A(t,e,n){var i,r,o=0,a=ee.length,s=Q.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=Kt||E(),n=Math.max(0,u.startTime+u.duration-e),i=n/u.duration||0,o=1-i,a=0,l=u.tweens.length;l>a;a++)u.tweens[a].run(o);return s.notifyWith(t,[u,o,n]),1>o&&l?n:(s.resolveWith(t,[u]),!1)},u=s.promise({elem:t,props:Q.extend({},e),opts:Q.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:Kt||E(),duration:n.duration,tweens:[],createTween:function(e,n){var i=Q.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)u.tweens[n].run(1);return e?s.resolveWith(t,[u,e]):s.rejectWith(t,[u,e]),this}}),c=u.props;for(I(c,u.opts.specialEasing);a>o;o++)if(i=ee[o].call(u,t,c,u.opts))return i;return Q.map(c,$,u),Q.isFunction(u.opts.start)&&u.opts.start.call(t,u),Q.fx.timer(Q.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function W(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(pt)||[];if(Q.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function N(t,e,n,i){function r(s){var l;return o[s]=!0,Q.each(t[s]||[],function(t,s){var u=s(e,n,i);return"string"!=typeof u||a||o[u]?a?!(l=u):void 0:(e.dataTypes.unshift(u),r(u),!1)}),l}var o={},a=t===be;return r(e.dataTypes[0])||!o["*"]&&r("*")}function F(t,e){var n,i,r=Q.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&Q.extend(!0,t,i),t}function L(t,e,n){for(var i,r,o,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function R(t,e,n,i){var r,o,a,s,l,u={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)u[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(a=u[l+" "+o]||u["* "+o],!a)for(r in u)if(s=r.split(" "),s[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){a===!0?a=u[r]:u[r]!==!0&&(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&&t["throws"])e=a(e);else try{e=a(e)}catch(d){return{state:"parsererror",error:a?d:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}function H(t,e,n,i){var r;if(Q.isArray(e))Q.each(e,function(e,r){n||Ce.test(t)?i(t,r):H(t+"["+("object"==typeof r?e:"")+"]",r,n,i)});else if(n||"object"!==Q.type(e))i(t,e);else for(r in e)H(t+"["+r+"]",e[r],n,i)}function j(t){return Q.isWindow(t)?t:9===t.nodeType&&t.defaultView}var U=[],B=U.slice,Y=U.concat,q=U.push,z=U.indexOf,V={},X=V.toString,G=V.hasOwnProperty,K={},Z=t.document,J="2.1.4",Q=function(t,e){return new Q.fn.init(t,e)},tt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,et=/^-ms-/,nt=/-([\da-z])/gi,it=function(t,e){return e.toUpperCase()};Q.fn=Q.prototype={jquery:J,constructor:Q,selector:"",length:0,toArray:function(){return B.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:B.call(this)},pushStack:function(t){var e=Q.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return Q.each(this,t,e)},map:function(t){return this.pushStack(Q.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(B.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:q,sort:U.sort,splice:U.splice},Q.extend=Q.fn.extend=function(){var t,e,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||Q.isFunction(a)||(a={}),s===l&&(a=this,s--);l>s;s++)if(null!=(t=arguments[s]))for(e in t)n=a[e],
i=t[e],a!==i&&(u&&i&&(Q.isPlainObject(i)||(r=Q.isArray(i)))?(r?(r=!1,o=n&&Q.isArray(n)?n:[]):o=n&&Q.isPlainObject(n)?n:{},a[e]=Q.extend(u,o,i)):void 0!==i&&(a[e]=i));return a},Q.extend({expando:"jQuery"+(J+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===Q.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!Q.isArray(t)&&t-parseFloat(t)+1>=0},isPlainObject:function(t){return"object"!==Q.type(t)||t.nodeType||Q.isWindow(t)?!1:t.constructor&&!G.call(t.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?V[X.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=Q.trim(t),t&&(1===t.indexOf("use strict")?(e=Z.createElement("script"),e.text=t,Z.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(et,"ms-").replace(nt,it)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,i){var r,o=0,a=t.length,s=n(t);if(i){if(s)for(;a>o&&(r=e.apply(t[o],i),r!==!1);o++);else for(o in t)if(r=e.apply(t[o],i),r===!1)break}else if(s)for(;a>o&&(r=e.call(t[o],o,t[o]),r!==!1);o++);else for(o in t)if(r=e.call(t[o],o,t[o]),r===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(tt,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?Q.merge(i,"string"==typeof t?[t]:t):q.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:z.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;n>i;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i,r=[],o=0,a=t.length,s=!n;a>o;o++)i=!e(t[o],o),i!==s&&r.push(t[o]);return r},map:function(t,e,i){var r,o=0,a=t.length,s=n(t),l=[];if(s)for(;a>o;o++)r=e(t[o],o,i),null!=r&&l.push(r);else for(o in t)r=e(t[o],o,i),null!=r&&l.push(r);return Y.apply([],l)},guid:1,proxy:function(t,e){var n,i,r;return"string"==typeof e&&(n=t[e],e=t,t=n),Q.isFunction(t)?(i=B.call(arguments,2),r=function(){return t.apply(e||this,i.concat(B.call(arguments)))},r.guid=t.guid=t.guid||Q.guid++,r):void 0},now:Date.now,support:K}),Q.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){V["[object "+e+"]"]=e.toLowerCase()});var rt=function(t){function e(t,e,n,i){var r,o,a,s,l,u,d,p,f,g;if((e?e.ownerDocument||e:H)!==M&&$(e),e=e||M,n=n||[],s=e.nodeType,"string"!=typeof t||!t||1!==s&&9!==s&&11!==s)return n;if(!i&&A){if(11!==s&&(r=yt.exec(t)))if(a=r[1]){if(9===s){if(o=e.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(e.ownerDocument&&(o=e.ownerDocument.getElementById(a))&&L(e,o)&&o.id===a)return n.push(o),n}else{if(r[2])return J.apply(n,e.getElementsByTagName(t)),n;if((a=r[3])&&x.getElementsByClassName)return J.apply(n,e.getElementsByClassName(a)),n}if(x.qsa&&(!W||!W.test(t))){if(p=d=R,f=e,g=1!==s&&t,1===s&&"object"!==e.nodeName.toLowerCase()){for(u=O(t),(d=e.getAttribute("id"))?p=d.replace(wt,"\\$&"):e.setAttribute("id",p),p="[id='"+p+"'] ",l=u.length;l--;)u[l]=p+h(u[l]);f=bt.test(t)&&c(e.parentNode)||e,g=u.join(",")}if(g)try{return J.apply(n,f.querySelectorAll(g)),n}catch(m){}finally{d||e.removeAttribute("id")}}}return k(t.replace(lt,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>_.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[R]=!0,t}function r(t){var e=M.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=t.length;i--;)_.attrHandle[n[i]]=e}function a(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||V)-(~t.sourceIndex||V);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function s(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function u(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function c(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function d(){}function h(t){for(var e=0,n=t.length,i="";n>e;e++)i+=t[e].value;return i}function p(t,e,n){var i=e.dir,r=n&&"parentNode"===i,o=U++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,o)}:function(e,n,a){var s,l,u=[j,o];if(a){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,a))return!0}else for(;e=e[i];)if(1===e.nodeType||r){if(l=e[R]||(e[R]={}),(s=l[i])&&s[0]===j&&s[1]===o)return u[2]=s[2];if(l[i]=u,u[2]=t(e,n,a))return!0}}}function f(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function g(t,n,i){for(var r=0,o=n.length;o>r;r++)e(t,n[r],i);return i}function m(t,e,n,i,r){for(var o,a=[],s=0,l=t.length,u=null!=e;l>s;s++)(o=t[s])&&(!n||n(o,i,r))&&(a.push(o),u&&e.push(s));return a}function v(t,e,n,r,o,a){return r&&!r[R]&&(r=v(r)),o&&!o[R]&&(o=v(o,a)),i(function(i,a,s,l){var u,c,d,h=[],p=[],f=a.length,v=i||g(e||"*",s.nodeType?[s]:s,[]),y=!t||!i&&e?v:m(v,h,t,s,l),b=n?o||(i?t:f||r)?[]:a:y;if(n&&n(y,b,s,l),r)for(u=m(b,p),r(u,[],s,l),c=u.length;c--;)(d=u[c])&&(b[p[c]]=!(y[p[c]]=d));if(i){if(o||t){if(o){for(u=[],c=b.length;c--;)(d=b[c])&&u.push(y[c]=d);o(null,b=[],u,l)}for(c=b.length;c--;)(d=b[c])&&(u=o?tt(i,d):h[c])>-1&&(i[u]=!(a[u]=d))}}else b=m(b===a?b.splice(f,b.length):b),o?o(null,a,b,l):J.apply(a,b)})}function y(t){for(var e,n,i,r=t.length,o=_.relative[t[0].type],a=o||_.relative[" "],s=o?1:0,l=p(function(t){return t===e},a,!0),u=p(function(t){return tt(e,t)>-1},a,!0),c=[function(t,n,i){var r=!o&&(i||n!==T)||((e=n).nodeType?l(t,n,i):u(t,n,i));return e=null,r}];r>s;s++)if(n=_.relative[t[s].type])c=[p(f(c),n)];else{if(n=_.filter[t[s].type].apply(null,t[s].matches),n[R]){for(i=++s;r>i&&!_.relative[t[i].type];i++);return v(s>1&&f(c),s>1&&h(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(lt,"$1"),n,i>s&&y(t.slice(s,i)),r>i&&y(t=t.slice(i)),r>i&&h(t))}c.push(n)}return f(c)}function b(t,n){var r=n.length>0,o=t.length>0,a=function(i,a,s,l,u){var c,d,h,p=0,f="0",g=i&&[],v=[],y=T,b=i||o&&_.find.TAG("*",u),w=j+=null==y?1:Math.random()||.1,x=b.length;for(u&&(T=a!==M&&a);f!==x&&null!=(c=b[f]);f++){if(o&&c){for(d=0;h=t[d++];)if(h(c,a,s)){l.push(c);break}u&&(j=w)}r&&((c=!h&&c)&&p--,i&&g.push(c))}if(p+=f,r&&f!==p){for(d=0;h=n[d++];)h(g,v,a,s);if(i){if(p>0)for(;f--;)g[f]||v[f]||(v[f]=K.call(l));v=m(v)}J.apply(l,v),u&&!i&&v.length>0&&p+n.length>1&&e.uniqueSort(l)}return u&&(j=w,T=y),g};return r?i(a):a}var w,x,_,S,C,O,D,k,T,E,P,$,M,I,A,W,N,F,L,R="sizzle"+1*new Date,H=t.document,j=0,U=0,B=n(),Y=n(),q=n(),z=function(t,e){return t===e&&(P=!0),0},V=1<<31,X={}.hasOwnProperty,G=[],K=G.pop,Z=G.push,J=G.push,Q=G.slice,tt=function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",rt=it.replace("w","w#"),ot="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",at=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ot+")*)|.*)\\)|)",st=new RegExp(nt+"+","g"),lt=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ut=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),dt=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ht=new RegExp(at),pt=new RegExp("^"+rt+"$"),ft={ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it.replace("w","w*")+")"),ATTR:new RegExp("^"+ot),PSEUDO:new RegExp("^"+at),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},gt=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,bt=/[+~]/,wt=/'|\\/g,xt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),_t=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},St=function(){$()};try{J.apply(G=Q.call(H.childNodes),H.childNodes),G[H.childNodes.length].nodeType}catch(Ct){J={apply:G.length?function(t,e){Z.apply(t,Q.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}x=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},$=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:H;return i!==M&&9===i.nodeType&&i.documentElement?(M=i,I=i.documentElement,n=i.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",St,!1):n.attachEvent&&n.attachEvent("onunload",St)),A=!C(i),x.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),x.getElementsByTagName=r(function(t){return t.appendChild(i.createComment("")),!t.getElementsByTagName("*").length}),x.getElementsByClassName=vt.test(i.getElementsByClassName),x.getById=r(function(t){return I.appendChild(t).id=R,!i.getElementsByName||!i.getElementsByName(R).length}),x.getById?(_.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&A){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},_.filter.ID=function(t){var e=t.replace(xt,_t);return function(t){return t.getAttribute("id")===e}}):(delete _.find.ID,_.filter.ID=function(t){var e=t.replace(xt,_t);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),_.find.TAG=x.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):x.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},_.find.CLASS=x.getElementsByClassName&&function(t,e){return A?e.getElementsByClassName(t):void 0},N=[],W=[],(x.qsa=vt.test(i.querySelectorAll))&&(r(function(t){I.appendChild(t).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\f]' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&W.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||W.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+R+"-]").length||W.push("~="),t.querySelectorAll(":checked").length||W.push(":checked"),t.querySelectorAll("a#"+R+"+*").length||W.push(".#.+[+~]")}),r(function(t){var e=i.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&W.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||W.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),W.push(",.*:")})),(x.matchesSelector=vt.test(F=I.matches||I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&r(function(t){x.disconnectedMatch=F.call(t,"div"),F.call(t,"[s!='']:x"),N.push("!=",at)}),W=W.length&&new RegExp(W.join("|")),N=N.length&&new RegExp(N.join("|")),e=vt.test(I.compareDocumentPosition),L=e||vt.test(I.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},z=e?function(t,e){if(t===e)return P=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!x.sortDetached&&e.compareDocumentPosition(t)===n?t===i||t.ownerDocument===H&&L(H,t)?-1:e===i||e.ownerDocument===H&&L(H,e)?1:E?tt(E,t)-tt(E,e):0:4&n?-1:1)}:function(t,e){if(t===e)return P=!0,0;var n,r=0,o=t.parentNode,s=e.parentNode,l=[t],u=[e];if(!o||!s)return t===i?-1:e===i?1:o?-1:s?1:E?tt(E,t)-tt(E,e):0;if(o===s)return a(t,e);for(n=t;n=n.parentNode;)l.unshift(n);for(n=e;n=n.parentNode;)u.unshift(n);for(;l[r]===u[r];)r++;return r?a(l[r],u[r]):l[r]===H?-1:u[r]===H?1:0},i):M},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==M&&$(t),n=n.replace(dt,"='$1']"),!(!x.matchesSelector||!A||N&&N.test(n)||W&&W.test(n)))try{var i=F.call(t,n);if(i||x.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(r){}return e(n,M,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==M&&$(t),L(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==M&&$(t);var n=_.attrHandle[e.toLowerCase()],i=n&&X.call(_.attrHandle,e.toLowerCase())?n(t,e,!A):void 0;return void 0!==i?i:x.attributes||!A?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(P=!x.detectDuplicates,E=!x.sortStable&&t.slice(0),t.sort(z),P){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return E=null,t},S=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=S(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=S(e);return n},_=e.selectors={cacheLength:50,createPseudo:i,match:ft,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(xt,_t),t[3]=(t[3]||t[4]||t[5]||"").replace(xt,_t),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ft.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ht.test(n)&&(e=O(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(xt,_t).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=B[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&B(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:n?(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(st," ")+" ").indexOf(i)>-1:"|="===n?o===i||o.slice(0,i.length+1)===i+"-":!1):!0}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var u,c,d,h,p,f,g=o!==a?"nextSibling":"previousSibling",m=e.parentNode,v=s&&e.nodeName.toLowerCase(),y=!l&&!s;if(m){if(o){for(;g;){for(d=e;d=d[g];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=g="only"===t&&!f&&"nextSibling"}return!0}if(f=[a?m.firstChild:m.lastChild],a&&y){for(c=m[R]||(m[R]={}),u=c[t]||[],p=u[0]===j&&u[1],h=u[0]===j&&u[2],d=p&&m.childNodes[p];d=++p&&d&&d[g]||(h=p=0)||f.pop();)if(1===d.nodeType&&++h&&d===e){c[t]=[j,p,h];break}}else if(y&&(u=(e[R]||(e[R]={}))[t])&&u[0]===j)h=u[1];else for(;(d=++p&&d&&d[g]||(h=p=0)||f.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++h||(y&&((d[R]||(d[R]={}))[t]=[j,h]),d!==e)););return h-=r,h===i||h%i===0&&h/i>=0}}},PSEUDO:function(t,n){var r,o=_.pseudos[t]||_.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[R]?o(n):o.length>1?(r=[t,t,"",n],_.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),a=r.length;a--;)i=tt(t,r[a]),t[i]=!(e[i]=r[a])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=D(t.replace(lt,"$1"));return r[R]?i(function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(xt,_t),function(e){return(e.textContent||e.innerText||S(e)).indexOf(t)>-1}}),lang:i(function(t){return pt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(xt,_t).toLowerCase(),function(e){var n;do if(n=A?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===I},focus:function(t){return t===M.activeElement&&(!M.hasFocus||M.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!_.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return gt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[0>n?n+e:n]}),even:u(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:u(function(t,e,n){for(var i=0>n?n+e:n;--i>=0;)t.push(i);return t}),gt:u(function(t,e,n){for(var i=0>n?n+e:n;++i<e;)t.push(i);return t})}},_.pseudos.nth=_.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})_.pseudos[w]=s(w);for(w in{submit:!0,reset:!0})_.pseudos[w]=l(w);return d.prototype=_.filters=_.pseudos,_.setFilters=new d,O=e.tokenize=function(t,n){var i,r,o,a,s,l,u,c=Y[t+" "];if(c)return n?0:c.slice(0);for(s=t,l=[],u=_.preFilter;s;){(!i||(r=ut.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),i=!1,(r=ct.exec(s))&&(i=r.shift(),o.push({value:i,type:r[0].replace(lt," ")}),s=s.slice(i.length));for(a in _.filter)!(r=ft[a].exec(s))||u[a]&&!(r=u[a](r))||(i=r.shift(),o.push({value:i,type:a,matches:r}),s=s.slice(i.length));if(!i)break}return n?s.length:s?e.error(t):Y(t,l).slice(0)},D=e.compile=function(t,e){var n,i=[],r=[],o=q[t+" "];if(!o){for(e||(e=O(t)),n=e.length;n--;)o=y(e[n]),o[R]?i.push(o):r.push(o);o=q(t,b(r,i)),o.selector=t}return o},k=e.select=function(t,e,n,i){var r,o,a,s,l,u="function"==typeof t&&t,d=!i&&O(t=u.selector||t);if(n=n||[],1===d.length){if(o=d[0]=d[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&x.getById&&9===e.nodeType&&A&&_.relative[o[1].type]){if(e=(_.find.ID(a.matches[0].replace(xt,_t),e)||[])[0],!e)return n;u&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=ft.needsContext.test(t)?0:o.length;r--&&(a=o[r],!_.relative[s=a.type]);)if((l=_.find[s])&&(i=l(a.matches[0].replace(xt,_t),bt.test(o[0].type)&&c(e.parentNode)||e))){if(o.splice(r,1),t=i.length&&h(o),!t)return J.apply(n,i),n;break}}return(u||D(t,d))(i,e,!A,n,bt.test(t)&&c(e.parentNode)||e),n},x.sortStable=R.split("").sort(z).join("")===R,x.detectDuplicates=!!P,$(),x.sortDetached=r(function(t){return 1&t.compareDocumentPosition(M.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),x.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var i;return n?void 0:t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);Q.find=rt,Q.expr=rt.selectors,Q.expr[":"]=Q.expr.pseudos,Q.unique=rt.uniqueSort,Q.text=rt.getText,Q.isXMLDoc=rt.isXML,Q.contains=rt.contains;var ot=Q.expr.match.needsContext,at=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,st=/^.[^:#\[\.,]*$/;Q.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?Q.find.matchesSelector(i,t)?[i]:[]:Q.find.matches(t,Q.grep(e,function(t){return 1===t.nodeType}))},Q.fn.extend({find:function(t){var e,n=this.length,i=[],r=this;if("string"!=typeof t)return this.pushStack(Q(t).filter(function(){for(e=0;n>e;e++)if(Q.contains(r[e],this))return!0}));for(e=0;n>e;e++)Q.find(t,r[e],i);return i=this.pushStack(n>1?Q.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&ot.test(t)?Q(t):t||[],!1).length}});var lt,ut=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ct=Q.fn.init=function(t,e){var n,i;if(!t)return this;if("string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:ut.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||lt).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof Q?e[0]:e,Q.merge(this,Q.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:Z,!0)),at.test(n[1])&&Q.isPlainObject(e))for(n in e)Q.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return i=Z.getElementById(n[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=Z,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):Q.isFunction(t)?"undefined"!=typeof lt.ready?lt.ready(t):t(Q):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),Q.makeArray(t,this))};ct.prototype=Q.fn,lt=Q(Z);var dt=/^(?:parents|prev(?:Until|All))/,ht={children:!0,contents:!0,next:!0,prev:!0};Q.extend({dir:function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&Q(t).is(n))break;i.push(t)}return i},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}}),Q.fn.extend({has:function(t){var e=Q(t,this),n=e.length;return this.filter(function(){for(var t=0;n>t;t++)if(Q.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,r=this.length,o=[],a=ot.test(t)||"string"!=typeof t?Q(t,e||this.context):0;r>i;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&Q.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?Q.unique(o):o)},index:function(t){return t?"string"==typeof t?z.call(Q(t),this[0]):z.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(Q.unique(Q.merge(this.get(),Q(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),Q.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return Q.dir(t,"parentNode")},parentsUntil:function(t,e,n){return Q.dir(t,"parentNode",n)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return Q.dir(t,"nextSibling")},prevAll:function(t){return Q.dir(t,"previousSibling")},nextUntil:function(t,e,n){return Q.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return Q.dir(t,"previousSibling",n)},siblings:function(t){return Q.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return Q.sibling(t.firstChild)},contents:function(t){return t.contentDocument||Q.merge([],t.childNodes)}},function(t,e){Q.fn[t]=function(n,i){var r=Q.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=Q.filter(i,r)),this.length>1&&(ht[t]||Q.unique(r),dt.test(t)&&r.reverse()),this.pushStack(r)}});var pt=/\S+/g,ft={};Q.Callbacks=function(t){t="string"==typeof t?ft[t]||o(t):Q.extend({},t);var e,n,i,r,a,s,l=[],u=!t.once&&[],c=function(o){for(e=t.memory&&o,n=!0,s=r||0,r=0,a=l.length,i=!0;l&&a>s;s++)if(l[s].apply(o[0],o[1])===!1&&t.stopOnFalse){e=!1;break}i=!1,l&&(u?u.length&&c(u.shift()):e?l=[]:d.disable())},d={add:function(){if(l){var n=l.length;!function o(e){Q.each(e,function(e,n){var i=Q.type(n);"function"===i?t.unique&&d.has(n)||l.push(n):n&&n.length&&"string"!==i&&o(n)})}(arguments),i?a=l.length:e&&(r=n,c(e))}return this},remove:function(){return l&&Q.each(arguments,function(t,e){for(var n;(n=Q.inArray(e,l,n))>-1;)l.splice(n,1),i&&(a>=n&&a--,s>=n&&s--)}),this},has:function(t){return t?Q.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],a=0,this},disable:function(){return l=u=e=void 0,this},disabled:function(){return!l},lock:function(){return u=void 0,e||d.disable(),this},locked:function(){return!u},fireWith:function(t,e){return!l||n&&!u||(e=e||[],e=[t,e.slice?e.slice():e],i?u.push(e):c(e)),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!n}};return d},Q.extend({Deferred:function(t){var e=[["resolve","done",Q.Callbacks("once memory"),"resolved"],["reject","fail",Q.Callbacks("once memory"),"rejected"],["notify","progress",Q.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return Q.Deferred(function(n){Q.each(e,function(e,o){var a=Q.isFunction(t[e])&&t[e];r[o[1]](function(){var t=a&&a.apply(this,arguments);t&&Q.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===i?n.promise():this,a?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?Q.extend(t,i):i}},r={};return i.pipe=i.then,Q.each(e,function(t,o){var a=o[2],s=o[3];i[o[1]]=a.add,s&&a.add(function(){n=s},e[1^t][2].disable,e[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=a.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(t){var e,n,i,r=0,o=B.call(arguments),a=o.length,s=1!==a||t&&Q.isFunction(t.promise)?a:0,l=1===s?t:Q.Deferred(),u=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?B.call(arguments):r,i===e?l.notifyWith(n,i):--s||l.resolveWith(n,i)}};if(a>1)for(e=new Array(a),n=new Array(a),i=new Array(a);a>r;r++)o[r]&&Q.isFunction(o[r].promise)?o[r].promise().done(u(r,i,o)).fail(l.reject).progress(u(r,n,e)):--s;return s||l.resolveWith(i,o),l.promise()}});var gt;Q.fn.ready=function(t){return Q.ready.promise().done(t),this},Q.extend({isReady:!1,readyWait:1,holdReady:function(t){t?Q.readyWait++:Q.ready(!0)},ready:function(t){(t===!0?--Q.readyWait:Q.isReady)||(Q.isReady=!0,t!==!0&&--Q.readyWait>0||(gt.resolveWith(Z,[Q]),Q.fn.triggerHandler&&(Q(Z).triggerHandler("ready"),Q(Z).off("ready"))))}}),Q.ready.promise=function(e){return gt||(gt=Q.Deferred(),"complete"===Z.readyState?setTimeout(Q.ready):(Z.addEventListener("DOMContentLoaded",a,!1),t.addEventListener("load",a,!1))),gt.promise(e)},Q.ready.promise();var mt=Q.access=function(t,e,n,i,r,o,a){var s=0,l=t.length,u=null==n;if("object"===Q.type(n)){r=!0;for(s in n)Q.access(t,e,s,n[s],!0,o,a)}else if(void 0!==i&&(r=!0,Q.isFunction(i)||(a=!0),u&&(a?(e.call(t,i),e=null):(u=e,e=function(t,e,n){return u.call(Q(t),n)})),e))for(;l>s;s++)e(t[s],n,a?i:i.call(t[s],s,e(t[s],n)));return r?t:u?e.call(t):l?e(t[0],n):o};Q.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},s.uid=1,s.accepts=Q.acceptData,s.prototype={key:function(t){if(!s.accepts(t))return 0;var e={},n=t[this.expando];if(!n){n=s.uid++;try{e[this.expando]={value:n},Object.defineProperties(t,e)}catch(i){e[this.expando]=n,Q.extend(t,e)}}return this.cache[n]||(this.cache[n]={}),n},set:function(t,e,n){var i,r=this.key(t),o=this.cache[r];if("string"==typeof e)o[e]=n;else if(Q.isEmptyObject(o))Q.extend(this.cache[r],e);else for(i in e)o[i]=e[i];return o},get:function(t,e){var n=this.cache[this.key(t)];return void 0===e?n:n[e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?(i=this.get(t,e),void 0!==i?i:this.get(t,Q.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,r,o=this.key(t),a=this.cache[o];if(void 0===e)this.cache[o]={};else{Q.isArray(e)?i=e.concat(e.map(Q.camelCase)):(r=Q.camelCase(e),e in a?i=[e,r]:(i=r,i=i in a?[i]:i.match(pt)||[])),n=i.length;for(;n--;)delete a[i[n]]}},hasData:function(t){return!Q.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var vt=new s,yt=new s,bt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,wt=/([A-Z])/g;Q.extend({hasData:function(t){return yt.hasData(t)||vt.hasData(t)},data:function(t,e,n){return yt.access(t,e,n)},removeData:function(t,e){yt.remove(t,e)},_data:function(t,e,n){return vt.access(t,e,n)},_removeData:function(t,e){vt.remove(t,e)}}),Q.fn.extend({data:function(t,e){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(r=yt.get(o),1===o.nodeType&&!vt.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(i=a[n].name,0===i.indexOf("data-")&&(i=Q.camelCase(i.slice(5)),l(o,i,r[i])));vt.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){yt.set(this,t)}):mt(this,function(e){var n,i=Q.camelCase(t);if(o&&void 0===e){if(n=yt.get(o,t),void 0!==n)return n;if(n=yt.get(o,i),void 0!==n)return n;if(n=l(o,i,void 0),void 0!==n)return n}else this.each(function(){var n=yt.get(this,i);yt.set(this,i,e),-1!==t.indexOf("-")&&void 0!==n&&yt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){yt.remove(this,t)})}}),Q.extend({queue:function(t,e,n){var i;return t?(e=(e||"fx")+"queue",i=vt.get(t,e),n&&(!i||Q.isArray(n)?i=vt.access(t,e,Q.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=Q.queue(t,e),i=n.length,r=n.shift(),o=Q._queueHooks(t,e),a=function(){Q.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,a,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return vt.get(t,n)||vt.access(t,n,{empty:Q.Callbacks("once memory").add(function(){vt.remove(t,[e+"queue",n])})})}}),Q.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?Q.queue(this[0],t):void 0===e?this:this.each(function(){var n=Q.queue(this,t,e);Q._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&Q.dequeue(this,t)})},dequeue:function(t){return this.each(function(){Q.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=Q.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)n=vt.get(o[a],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(e)}});var xt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,_t=["Top","Right","Bottom","Left"],St=function(t,e){return t=e||t,"none"===Q.css(t,"display")||!Q.contains(t.ownerDocument,t)},Ct=/^(?:checkbox|radio)$/i;!function(){var t=Z.createDocumentFragment(),e=t.appendChild(Z.createElement("div")),n=Z.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),K.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",
K.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Ot="undefined";K.focusinBubbles="onfocusin"in t;var Dt=/^key/,kt=/^(?:mouse|pointer|contextmenu)|click/,Tt=/^(?:focusinfocus|focusoutblur)$/,Et=/^([^.]*)(?:\.(.+)|)$/;Q.event={global:{},add:function(t,e,n,i,r){var o,a,s,l,u,c,d,h,p,f,g,m=vt.get(t);if(m)for(n.handler&&(o=n,n=o.handler,r=o.selector),n.guid||(n.guid=Q.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(e){return typeof Q!==Ot&&Q.event.triggered!==e.type?Q.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(pt)||[""],u=e.length;u--;)s=Et.exec(e[u])||[],p=g=s[1],f=(s[2]||"").split(".").sort(),p&&(d=Q.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=Q.event.special[p]||{},c=Q.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&Q.expr.match.needsContext.test(r),namespace:f.join(".")},o),(h=l[p])||(h=l[p]=[],h.delegateCount=0,d.setup&&d.setup.call(t,i,f,a)!==!1||t.addEventListener&&t.addEventListener(p,a,!1)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,c):h.push(c),Q.event.global[p]=!0)},remove:function(t,e,n,i,r){var o,a,s,l,u,c,d,h,p,f,g,m=vt.hasData(t)&&vt.get(t);if(m&&(l=m.events)){for(e=(e||"").match(pt)||[""],u=e.length;u--;)if(s=Et.exec(e[u])||[],p=g=s[1],f=(s[2]||"").split(".").sort(),p){for(d=Q.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,h=l[p]||[],s=s[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!r&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,d.remove&&d.remove.call(t,c));a&&!h.length&&(d.teardown&&d.teardown.call(t,f,m.handle)!==!1||Q.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)Q.event.remove(t,p+e[u],n,i,!0);Q.isEmptyObject(l)&&(delete m.handle,vt.remove(t,"events"))}},trigger:function(e,n,i,r){var o,a,s,l,u,c,d,h=[i||Z],p=G.call(e,"type")?e.type:e,f=G.call(e,"namespace")?e.namespace.split("."):[];if(a=s=i=i||Z,3!==i.nodeType&&8!==i.nodeType&&!Tt.test(p+Q.event.triggered)&&(p.indexOf(".")>=0&&(f=p.split("."),p=f.shift(),f.sort()),u=p.indexOf(":")<0&&"on"+p,e=e[Q.expando]?e:new Q.Event(p,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=f.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:Q.makeArray(n,[e]),d=Q.event.special[p]||{},r||!d.trigger||d.trigger.apply(i,n)!==!1)){if(!r&&!d.noBubble&&!Q.isWindow(i)){for(l=d.delegateType||p,Tt.test(l+p)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(i.ownerDocument||Z)&&h.push(s.defaultView||s.parentWindow||t)}for(o=0;(a=h[o++])&&!e.isPropagationStopped();)e.type=o>1?l:d.bindType||p,c=(vt.get(a,"events")||{})[e.type]&&vt.get(a,"handle"),c&&c.apply(a,n),c=u&&a[u],c&&c.apply&&Q.acceptData(a)&&(e.result=c.apply(a,n),e.result===!1&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||d._default&&d._default.apply(h.pop(),n)!==!1||!Q.acceptData(i)||u&&Q.isFunction(i[p])&&!Q.isWindow(i)&&(s=i[u],s&&(i[u]=null),Q.event.triggered=p,i[p](),Q.event.triggered=void 0,s&&(i[u]=s)),e.result}},dispatch:function(t){t=Q.event.fix(t);var e,n,i,r,o,a=[],s=B.call(arguments),l=(vt.get(this,"events")||{})[t.type]||[],u=Q.event.special[t.type]||{};if(s[0]=t,t.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,t)!==!1){for(a=Q.event.handlers.call(this,t,l),e=0;(r=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(o.namespace))&&(t.handleObj=o,t.data=o.data,i=((Q.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,s),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,r,o,a=[],s=e.delegateCount,l=t.target;if(s&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==t.type){for(i=[],n=0;s>n;n++)o=e[n],r=o.selector+" ",void 0===i[r]&&(i[r]=o.needsContext?Q(r,this).index(l)>=0:Q.find(r,this,null,[l]).length),i[r]&&i.push(o);i.length&&a.push({elem:l,handlers:i})}return s<e.length&&a.push({elem:this,handlers:e.slice(s)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,r,o=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||Z,i=n.documentElement,r=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||r&&r.scrollLeft||0)-(i&&i.clientLeft||r&&r.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||r&&r.scrollTop||0)-(i&&i.clientTop||r&&r.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[Q.expando])return t;var e,n,i,r=t.type,o=t,a=this.fixHooks[r];for(a||(this.fixHooks[r]=a=kt.test(r)?this.mouseHooks:Dt.test(r)?this.keyHooks:{}),i=a.props?this.props.concat(a.props):this.props,t=new Q.Event(o),e=i.length;e--;)n=i[e],t[n]=o[n];return t.target||(t.target=Z),3===t.target.nodeType&&(t.target=t.target.parentNode),a.filter?a.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==d()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===d()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&Q.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return Q.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,i){var r=Q.extend(new Q.Event,n,{type:t,isSimulated:!0,originalEvent:{}});i?Q.event.trigger(r,null,e):Q.event.dispatch.call(e,r),r.isDefaultPrevented()&&n.preventDefault()}},Q.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)},Q.Event=function(t,e){return this instanceof Q.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?u:c):this.type=t,e&&Q.extend(this,e),this.timeStamp=t&&t.timeStamp||Q.now(),void(this[Q.expando]=!0)):new Q.Event(t,e)},Q.Event.prototype={isDefaultPrevented:c,isPropagationStopped:c,isImmediatePropagationStopped:c,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=u,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=u,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=u,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},Q.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){Q.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return(!r||r!==i&&!Q.contains(i,r))&&(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),K.focusinBubbles||Q.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){Q.event.simulate(e,t.target,Q.event.fix(t),!0)};Q.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=vt.access(i,e);r||i.addEventListener(t,n,!0),vt.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=vt.access(i,e)-1;r?vt.access(i,e,r):(i.removeEventListener(t,n,!0),vt.remove(i,e))}}}),Q.fn.extend({on:function(t,e,n,i,r){var o,a;if("object"==typeof t){"string"!=typeof e&&(n=n||e,e=void 0);for(a in t)this.on(a,e,n,t[a],r);return this}if(null==n&&null==i?(i=e,n=e=void 0):null==i&&("string"==typeof e?(i=n,n=void 0):(i=n,n=e,e=void 0)),i===!1)i=c;else if(!i)return this;return 1===r&&(o=i,i=function(t){return Q().off(t),o.apply(this,arguments)},i.guid=o.guid||(o.guid=Q.guid++)),this.each(function(){Q.event.add(this,t,i,n,e)})},one:function(t,e,n,i){return this.on(t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,Q(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return(e===!1||"function"==typeof e)&&(n=e,e=void 0),n===!1&&(n=c),this.each(function(){Q.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){Q.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?Q.event.trigger(t,e,n,!0):void 0}});var Pt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,$t=/<([\w:]+)/,Mt=/<|&#?\w+;/,It=/<(?:script|style|link)/i,At=/checked\s*(?:[^=]|=\s*.checked.)/i,Wt=/^$|\/(?:java|ecma)script/i,Nt=/^true\/(.*)/,Ft=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Lt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Lt.optgroup=Lt.option,Lt.tbody=Lt.tfoot=Lt.colgroup=Lt.caption=Lt.thead,Lt.th=Lt.td,Q.extend({clone:function(t,e,n){var i,r,o,a,s=t.cloneNode(!0),l=Q.contains(t.ownerDocument,t);if(!(K.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||Q.isXMLDoc(t)))for(a=v(s),o=v(t),i=0,r=o.length;r>i;i++)y(o[i],a[i]);if(e)if(n)for(o=o||v(t),a=a||v(s),i=0,r=o.length;r>i;i++)m(o[i],a[i]);else m(t,s);return a=v(s,"script"),a.length>0&&g(a,!l&&v(t,"script")),s},buildFragment:function(t,e,n,i){for(var r,o,a,s,l,u,c=e.createDocumentFragment(),d=[],h=0,p=t.length;p>h;h++)if(r=t[h],r||0===r)if("object"===Q.type(r))Q.merge(d,r.nodeType?[r]:r);else if(Mt.test(r)){for(o=o||c.appendChild(e.createElement("div")),a=($t.exec(r)||["",""])[1].toLowerCase(),s=Lt[a]||Lt._default,o.innerHTML=s[1]+r.replace(Pt,"<$1></$2>")+s[2],u=s[0];u--;)o=o.lastChild;Q.merge(d,o.childNodes),o=c.firstChild,o.textContent=""}else d.push(e.createTextNode(r));for(c.textContent="",h=0;r=d[h++];)if((!i||-1===Q.inArray(r,i))&&(l=Q.contains(r.ownerDocument,r),o=v(c.appendChild(r),"script"),l&&g(o),n))for(u=0;r=o[u++];)Wt.test(r.type||"")&&n.push(r);return c},cleanData:function(t){for(var e,n,i,r,o=Q.event.special,a=0;void 0!==(n=t[a]);a++){if(Q.acceptData(n)&&(r=n[vt.expando],r&&(e=vt.cache[r]))){if(e.events)for(i in e.events)o[i]?Q.event.remove(n,i):Q.removeEvent(n,i,e.handle);vt.cache[r]&&delete vt.cache[r]}delete yt.cache[n[yt.expando]]}}}),Q.fn.extend({text:function(t){return mt(this,function(t){return void 0===t?Q.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=h(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=h(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,i=t?Q.filter(t,this):this,r=0;null!=(n=i[r]);r++)e||1!==n.nodeType||Q.cleanData(v(n)),n.parentNode&&(e&&Q.contains(n.ownerDocument,n)&&g(v(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(Q.cleanData(v(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return Q.clone(this,t,e)})},html:function(t){return mt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!It.test(t)&&!Lt[($t.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Pt,"<$1></$2>");try{for(;i>n;n++)e=this[n]||{},1===e.nodeType&&(Q.cleanData(v(e,!1)),e.innerHTML=t);e=0}catch(r){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,Q.cleanData(v(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=Y.apply([],t);var n,i,r,o,a,s,l=0,u=this.length,c=this,d=u-1,h=t[0],g=Q.isFunction(h);if(g||u>1&&"string"==typeof h&&!K.checkClone&&At.test(h))return this.each(function(n){var i=c.eq(n);g&&(t[0]=h.call(this,n,i.html())),i.domManip(t,e)});if(u&&(n=Q.buildFragment(t,this[0].ownerDocument,!1,this),i=n.firstChild,1===n.childNodes.length&&(n=i),i)){for(r=Q.map(v(n,"script"),p),o=r.length;u>l;l++)a=n,l!==d&&(a=Q.clone(a,!0,!0),o&&Q.merge(r,v(a,"script"))),e.call(this[l],a,l);if(o)for(s=r[r.length-1].ownerDocument,Q.map(r,f),l=0;o>l;l++)a=r[l],Wt.test(a.type||"")&&!vt.access(a,"globalEval")&&Q.contains(s,a)&&(a.src?Q._evalUrl&&Q._evalUrl(a.src):Q.globalEval(a.textContent.replace(Ft,"")))}return this}}),Q.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){Q.fn[t]=function(t){for(var n,i=[],r=Q(t),o=r.length-1,a=0;o>=a;a++)n=a===o?this:this.clone(!0),Q(r[a])[e](n),q.apply(i,n.get());return this.pushStack(i)}});var Rt,Ht={},jt=/^margin/,Ut=new RegExp("^("+xt+")(?!px)[a-z%]+$","i"),Bt=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):t.getComputedStyle(e,null)};!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",a.innerHTML="",r.appendChild(o);var e=t.getComputedStyle(a,null);n="1%"!==e.top,i="4px"===e.width,r.removeChild(o)}var n,i,r=Z.documentElement,o=Z.createElement("div"),a=Z.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",K.clearCloneStyle="content-box"===a.style.backgroundClip,o.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",o.appendChild(a),t.getComputedStyle&&Q.extend(K,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==i&&e(),i},reliableMarginRight:function(){var e,n=a.appendChild(Z.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",r.appendChild(o),e=!parseFloat(t.getComputedStyle(n,null).marginRight),r.removeChild(o),a.removeChild(n),e}}))}(),Q.swap=function(t,e,n,i){var r,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=a[o];return r};var Yt=/^(none|table(?!-c[ea]).+)/,qt=new RegExp("^("+xt+")(.*)$","i"),zt=new RegExp("^([+-])=("+xt+")","i"),Vt={position:"absolute",visibility:"hidden",display:"block"},Xt={letterSpacing:"0",fontWeight:"400"},Gt=["Webkit","O","Moz","ms"];Q.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=x(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,a,s=Q.camelCase(e),l=t.style;return e=Q.cssProps[s]||(Q.cssProps[s]=S(l,s)),a=Q.cssHooks[e]||Q.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(r=a.get(t,!1,i))?r:l[e]:(o=typeof n,"string"===o&&(r=zt.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(Q.css(t,e)),o="number"),void(null!=n&&n===n&&("number"!==o||Q.cssNumber[s]||(n+="px"),K.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,i))||(l[e]=n))))}},css:function(t,e,n,i){var r,o,a,s=Q.camelCase(e);return e=Q.cssProps[s]||(Q.cssProps[s]=S(t.style,s)),a=Q.cssHooks[e]||Q.cssHooks[s],a&&"get"in a&&(r=a.get(t,!0,n)),void 0===r&&(r=x(t,e,i)),"normal"===r&&e in Xt&&(r=Xt[e]),""===n||n?(o=parseFloat(r),n===!0||Q.isNumeric(o)?o||0:r):r}}),Q.each(["height","width"],function(t,e){Q.cssHooks[e]={get:function(t,n,i){return n?Yt.test(Q.css(t,"display"))&&0===t.offsetWidth?Q.swap(t,Vt,function(){return D(t,e,i)}):D(t,e,i):void 0},set:function(t,n,i){var r=i&&Bt(t);return C(t,n,i?O(t,e,i,"border-box"===Q.css(t,"boxSizing",!1,r),r):0)}}}),Q.cssHooks.marginRight=_(K.reliableMarginRight,function(t,e){return e?Q.swap(t,{display:"inline-block"},x,[t,"marginRight"]):void 0}),Q.each({margin:"",padding:"",border:"Width"},function(t,e){Q.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];4>i;i++)r[t+_t[i]+e]=o[i]||o[i-2]||o[0];return r}},jt.test(t)||(Q.cssHooks[t+e].set=C)}),Q.fn.extend({css:function(t,e){return mt(this,function(t,e,n){var i,r,o={},a=0;if(Q.isArray(e)){for(i=Bt(t),r=e.length;r>a;a++)o[e[a]]=Q.css(t,e[a],!1,i);return o}return void 0!==n?Q.style(t,e,n):Q.css(t,e)},t,e,arguments.length>1)},show:function(){return k(this,!0)},hide:function(){return k(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){St(this)?Q(this).show():Q(this).hide()})}}),Q.Tween=T,T.prototype={constructor:T,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||"swing",this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(Q.cssNumber[n]?"":"px")},cur:function(){var t=T.propHooks[this.prop];return t&&t.get?t.get(this):T.propHooks._default.get(this)},run:function(t){var e,n=T.propHooks[this.prop];return this.options.duration?this.pos=e=Q.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):T.propHooks._default.set(this),this}},T.prototype.init.prototype=T.prototype,T.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=Q.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){Q.fx.step[t.prop]?Q.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[Q.cssProps[t.prop]]||Q.cssHooks[t.prop])?Q.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},T.propHooks.scrollTop=T.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},Q.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},Q.fx=T.prototype.init,Q.fx.step={};var Kt,Zt,Jt=/^(?:toggle|show|hide)$/,Qt=new RegExp("^(?:([+-])=|)("+xt+")([a-z%]*)$","i"),te=/queueHooks$/,ee=[M],ne={"*":[function(t,e){var n=this.createTween(t,e),i=n.cur(),r=Qt.exec(e),o=r&&r[3]||(Q.cssNumber[t]?"":"px"),a=(Q.cssNumber[t]||"px"!==o&&+i)&&Qt.exec(Q.css(n.elem,t)),s=1,l=20;if(a&&a[3]!==o){o=o||a[3],r=r||[],a=+i||1;do s=s||".5",a/=s,Q.style(n.elem,t,a+o);while(s!==(s=n.cur()/i)&&1!==s&&--l)}return r&&(a=n.start=+a||+i||0,n.unit=o,n.end=r[1]?a+(r[1]+1)*r[2]:+r[2]),n}]};Q.Animation=Q.extend(A,{tweener:function(t,e){Q.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,i=0,r=t.length;r>i;i++)n=t[i],ne[n]=ne[n]||[],ne[n].unshift(e)},prefilter:function(t,e){e?ee.unshift(t):ee.push(t)}}),Q.speed=function(t,e,n){var i=t&&"object"==typeof t?Q.extend({},t):{complete:n||!n&&e||Q.isFunction(t)&&t,duration:t,easing:n&&e||e&&!Q.isFunction(e)&&e};return i.duration=Q.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in Q.fx.speeds?Q.fx.speeds[i.duration]:Q.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){Q.isFunction(i.old)&&i.old.call(this),i.queue&&Q.dequeue(this,i.queue)},i},Q.fn.extend({fadeTo:function(t,e,n,i){return this.filter(St).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=Q.isEmptyObject(t),o=Q.speed(e,n,i),a=function(){var e=A(this,Q.extend({},t),o);(r||vt.get(this,"finish"))&&e.stop(!0)};return a.finish=a,r||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=Q.timers,a=vt.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&te.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));(e||!n)&&Q.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=vt.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=Q.timers,a=i?i.length:0;for(n.finish=!0,Q.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;a>e;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),Q.each(["toggle","show","hide"],function(t,e){var n=Q.fn[e];Q.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(P(e,!0),t,i,r)}}),Q.each({slideDown:P("show"),slideUp:P("hide"),slideToggle:P("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){Q.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),Q.timers=[],Q.fx.tick=function(){var t,e=0,n=Q.timers;for(Kt=Q.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||Q.fx.stop(),Kt=void 0},Q.fx.timer=function(t){Q.timers.push(t),t()?Q.fx.start():Q.timers.pop()},Q.fx.interval=13,Q.fx.start=function(){Zt||(Zt=setInterval(Q.fx.tick,Q.fx.interval))},Q.fx.stop=function(){clearInterval(Zt),Zt=null},Q.fx.speeds={slow:600,fast:200,_default:400},Q.fn.delay=function(t,e){return t=Q.fx?Q.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var i=setTimeout(e,t);n.stop=function(){clearTimeout(i)}})},function(){var t=Z.createElement("input"),e=Z.createElement("select"),n=e.appendChild(Z.createElement("option"));t.type="checkbox",K.checkOn=""!==t.value,K.optSelected=n.selected,e.disabled=!0,K.optDisabled=!n.disabled,t=Z.createElement("input"),t.value="t",t.type="radio",K.radioValue="t"===t.value}();var ie,re,oe=Q.expr.attrHandle;Q.fn.extend({attr:function(t,e){return mt(this,Q.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){Q.removeAttr(this,t)})}}),Q.extend({attr:function(t,e,n){var i,r,o=t.nodeType;return t&&3!==o&&8!==o&&2!==o?typeof t.getAttribute===Ot?Q.prop(t,e,n):(1===o&&Q.isXMLDoc(t)||(e=e.toLowerCase(),i=Q.attrHooks[e]||(Q.expr.match.bool.test(e)?re:ie)),void 0===n?i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=Q.find.attr(t,e),null==r?void 0:r):null!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):void Q.removeAttr(t,e)):void 0},removeAttr:function(t,e){var n,i,r=0,o=e&&e.match(pt);if(o&&1===t.nodeType)for(;n=o[r++];)i=Q.propFix[n]||n,Q.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)},attrHooks:{type:{set:function(t,e){if(!K.radioValue&&"radio"===e&&Q.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}}}),re={set:function(t,e,n){return e===!1?Q.removeAttr(t,n):t.setAttribute(n,n),n}},Q.each(Q.expr.match.bool.source.match(/\w+/g),function(t,e){var n=oe[e]||Q.find.attr;oe[e]=function(t,e,i){var r,o;return i||(o=oe[e],oe[e]=r,r=null!=n(t,e,i)?e.toLowerCase():null,oe[e]=o),r}});var ae=/^(?:input|select|textarea|button)$/i;Q.fn.extend({prop:function(t,e){return mt(this,Q.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[Q.propFix[t]||t]})}}),Q.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,n){var i,r,o,a=t.nodeType;return t&&3!==a&&8!==a&&2!==a?(o=1!==a||!Q.isXMLDoc(t),o&&(e=Q.propFix[e]||e,r=Q.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]):void 0},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||ae.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),K.optSelected||(Q.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),Q.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Q.propFix[this.toLowerCase()]=this});var se=/[\t\r\n\f]/g;Q.fn.extend({addClass:function(t){var e,n,i,r,o,a,s="string"==typeof t&&t,l=0,u=this.length;if(Q.isFunction(t))return this.each(function(e){Q(this).addClass(t.call(this,e,this.className))});if(s)for(e=(t||"").match(pt)||[];u>l;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(se," "):" ")){for(o=0;r=e[o++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a=Q.trim(i),n.className!==a&&(n.className=a)}return this},removeClass:function(t){var e,n,i,r,o,a,s=0===arguments.length||"string"==typeof t&&t,l=0,u=this.length;if(Q.isFunction(t))return this.each(function(e){Q(this).removeClass(t.call(this,e,this.className))});if(s)for(e=(t||"").match(pt)||[];u>l;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(se," "):"")){for(o=0;r=e[o++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");a=t?Q.trim(i):"",n.className!==a&&(n.className=a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):this.each(Q.isFunction(t)?function(n){Q(this).toggleClass(t.call(this,n,this.className,e),e)}:function(){if("string"===n)for(var e,i=0,r=Q(this),o=t.match(pt)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else(n===Ot||"boolean"===n)&&(this.className&&vt.set(this,"__className__",this.className),this.className=this.className||t===!1?"":vt.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,i=this.length;i>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(se," ").indexOf(e)>=0)return!0;return!1}});var le=/\r/g;Q.fn.extend({val:function(t){var e,n,i,r=this[0];return arguments.length?(i=Q.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,Q(this).val()):t,null==r?r="":"number"==typeof r?r+="":Q.isArray(r)&&(r=Q.map(r,function(t){return null==t?"":t+""})),e=Q.valHooks[this.type]||Q.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=Q.valHooks[r.type]||Q.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(le,""):null==n?"":n)):void 0}}),Q.extend({valHooks:{option:{get:function(t){var e=Q.find.attr(t,"value");return null!=e?e:Q.trim(Q.text(t))}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,o="select-one"===t.type||0>r,a=o?null:[],s=o?r+1:i.length,l=0>r?s:o?r:0;s>l;l++)if(n=i[l],!(!n.selected&&l!==r||(K.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&Q.nodeName(n.parentNode,"optgroup"))){if(e=Q(n).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var n,i,r=t.options,o=Q.makeArray(e),a=r.length;a--;)i=r[a],(i.selected=Q.inArray(i.value,o)>=0)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),Q.each(["radio","checkbox"],function(){Q.valHooks[this]={set:function(t,e){return Q.isArray(e)?t.checked=Q.inArray(Q(t).val(),e)>=0:void 0}},K.checkOn||(Q.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),Q.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){Q.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),Q.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}});var ue=Q.now(),ce=/\?/;Q.parseJSON=function(t){return JSON.parse(t+"")},Q.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{n=new DOMParser,e=n.parseFromString(t,"text/xml")}catch(i){e=void 0}return(!e||e.getElementsByTagName("parsererror").length)&&Q.error("Invalid XML: "+t),e};var de=/#.*$/,he=/([?&])_=[^&]*/,pe=/^(.*?):[ \t]*([^\r\n]*)$/gm,fe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ge=/^(?:GET|HEAD)$/,me=/^\/\//,ve=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,ye={},be={},we="*/".concat("*"),xe=t.location.href,_e=ve.exec(xe.toLowerCase())||[];Q.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xe,type:"GET",isLocal:fe.test(_e[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":we,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":Q.parseJSON,"text xml":Q.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?F(F(t,Q.ajaxSettings),e):F(Q.ajaxSettings,t)},ajaxPrefilter:W(ye),ajaxTransport:W(be),ajax:function(t,e){function n(t,e,n,a){var l,c,v,y,w,_=e;2!==b&&(b=2,s&&clearTimeout(s),i=void 0,o=a||"",x.readyState=t>0?4:0,l=t>=200&&300>t||304===t,n&&(y=L(d,x,n)),y=R(d,y,x,l),l?(d.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(Q.lastModified[r]=w),w=x.getResponseHeader("etag"),w&&(Q.etag[r]=w)),204===t||"HEAD"===d.type?_="nocontent":304===t?_="notmodified":(_=y.state,c=y.data,v=y.error,l=!v)):(v=_,(t||!_)&&(_="error",0>t&&(t=0))),x.status=t,x.statusText=(e||_)+"",l?f.resolveWith(h,[c,_,x]):f.rejectWith(h,[x,_,v]),x.statusCode(m),m=void 0,u&&p.trigger(l?"ajaxSuccess":"ajaxError",[x,d,l?c:v]),g.fireWith(h,[x,_]),u&&(p.trigger("ajaxComplete",[x,d]),--Q.active||Q.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,o,a,s,l,u,c,d=Q.ajaxSetup({},e),h=d.context||d,p=d.context&&(h.nodeType||h.jquery)?Q(h):Q.event,f=Q.Deferred(),g=Q.Callbacks("once memory"),m=d.statusCode||{},v={},y={},b=0,w="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(2===b){if(!a)for(a={};e=pe.exec(o);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===b?o:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return b||(t=y[n]=y[n]||t,v[t]=e),this},overrideMimeType:function(t){return b||(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>b)for(e in t)m[e]=[m[e],t[e]];else x.always(t[x.status]);return this},abort:function(t){var e=t||w;return i&&i.abort(e),n(0,e),this}};if(f.promise(x).complete=g.add,x.success=x.done,x.error=x.fail,d.url=((t||d.url||xe)+"").replace(de,"").replace(me,_e[1]+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=Q.trim(d.dataType||"*").toLowerCase().match(pt)||[""],null==d.crossDomain&&(l=ve.exec(d.url.toLowerCase()),d.crossDomain=!(!l||l[1]===_e[1]&&l[2]===_e[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(_e[3]||("http:"===_e[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=Q.param(d.data,d.traditional)),N(ye,d,e,x),2===b)return x;u=Q.event&&d.global,u&&0===Q.active++&&Q.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!ge.test(d.type),r=d.url,d.hasContent||(d.data&&(r=d.url+=(ce.test(r)?"&":"?")+d.data,
delete d.data),d.cache===!1&&(d.url=he.test(r)?r.replace(he,"$1_="+ue++):r+(ce.test(r)?"&":"?")+"_="+ue++)),d.ifModified&&(Q.lastModified[r]&&x.setRequestHeader("If-Modified-Since",Q.lastModified[r]),Q.etag[r]&&x.setRequestHeader("If-None-Match",Q.etag[r])),(d.data&&d.hasContent&&d.contentType!==!1||e.contentType)&&x.setRequestHeader("Content-Type",d.contentType),x.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+we+"; q=0.01":""):d.accepts["*"]);for(c in d.headers)x.setRequestHeader(c,d.headers[c]);if(d.beforeSend&&(d.beforeSend.call(h,x,d)===!1||2===b))return x.abort();w="abort";for(c in{success:1,error:1,complete:1})x[c](d[c]);if(i=N(be,d,e,x)){x.readyState=1,u&&p.trigger("ajaxSend",[x,d]),d.async&&d.timeout>0&&(s=setTimeout(function(){x.abort("timeout")},d.timeout));try{b=1,i.send(v,n)}catch(_){if(!(2>b))throw _;n(-1,_)}}else n(-1,"No Transport");return x},getJSON:function(t,e,n){return Q.get(t,e,n,"json")},getScript:function(t,e){return Q.get(t,void 0,e,"script")}}),Q.each(["get","post"],function(t,e){Q[e]=function(t,n,i,r){return Q.isFunction(n)&&(r=r||i,i=n,n=void 0),Q.ajax({url:t,type:e,dataType:r,data:n,success:i})}}),Q._evalUrl=function(t){return Q.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},Q.fn.extend({wrapAll:function(t){var e;return Q.isFunction(t)?this.each(function(e){Q(this).wrapAll(t.call(this,e))}):(this[0]&&(e=Q(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return this.each(Q.isFunction(t)?function(e){Q(this).wrapInner(t.call(this,e))}:function(){var e=Q(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=Q.isFunction(t);return this.each(function(n){Q(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){Q.nodeName(this,"body")||Q(this).replaceWith(this.childNodes)}).end()}}),Q.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},Q.expr.filters.visible=function(t){return!Q.expr.filters.hidden(t)};var Se=/%20/g,Ce=/\[\]$/,Oe=/\r?\n/g,De=/^(?:submit|button|image|reset|file)$/i,ke=/^(?:input|select|textarea|keygen)/i;Q.param=function(t,e){var n,i=[],r=function(t,e){e=Q.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=Q.ajaxSettings&&Q.ajaxSettings.traditional),Q.isArray(t)||t.jquery&&!Q.isPlainObject(t))Q.each(t,function(){r(this.name,this.value)});else for(n in t)H(n,t[n],e,r);return i.join("&").replace(Se,"+")},Q.fn.extend({serialize:function(){return Q.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=Q.prop(this,"elements");return t?Q.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!Q(this).is(":disabled")&&ke.test(this.nodeName)&&!De.test(t)&&(this.checked||!Ct.test(t))}).map(function(t,e){var n=Q(this).val();return null==n?null:Q.isArray(n)?Q.map(n,function(t){return{name:e.name,value:t.replace(Oe,"\r\n")}}):{name:e.name,value:n.replace(Oe,"\r\n")}}).get()}}),Q.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var Te=0,Ee={},Pe={0:200,1223:204},$e=Q.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in Ee)Ee[t]()}),K.cors=!!$e&&"withCredentials"in $e,K.ajax=$e=!!$e,Q.ajaxTransport(function(t){var e;return K.cors||$e&&!t.crossDomain?{send:function(n,i){var r,o=t.xhr(),a=++Te;if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)o[r]=t.xhrFields[r];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)o.setRequestHeader(r,n[r]);e=function(t){return function(){e&&(delete Ee[a],e=o.onload=o.onerror=null,"abort"===t?o.abort():"error"===t?i(o.status,o.statusText):i(Pe[o.status]||o.status,o.statusText,"string"==typeof o.responseText?{text:o.responseText}:void 0,o.getAllResponseHeaders()))}},o.onload=e(),o.onerror=e("error"),e=Ee[a]=e("abort");try{o.send(t.hasContent&&t.data||null)}catch(s){if(e)throw s}},abort:function(){e&&e()}}:void 0}),Q.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return Q.globalEval(t),t}}}),Q.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),Q.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=Q("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),Z.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Me=[],Ie=/(=)\?(?=&|$)|\?\?/;Q.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Me.pop()||Q.expando+"_"+ue++;return this[t]=!0,t}}),Q.ajaxPrefilter("json jsonp",function(e,n,i){var r,o,a,s=e.jsonp!==!1&&(Ie.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ie.test(e.data)&&"data");return s||"jsonp"===e.dataTypes[0]?(r=e.jsonpCallback=Q.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Ie,"$1"+r):e.jsonp!==!1&&(e.url+=(ce.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return a||Q.error(r+" was not called"),a[0]},e.dataTypes[0]="json",o=t[r],t[r]=function(){a=arguments},i.always(function(){t[r]=o,e[r]&&(e.jsonpCallback=n.jsonpCallback,Me.push(r)),a&&Q.isFunction(o)&&o(a[0]),a=o=void 0}),"script"):void 0}),Q.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||Z;var i=at.exec(t),r=!n&&[];return i?[e.createElement(i[1])]:(i=Q.buildFragment([t],e,r),r&&r.length&&Q(r).remove(),Q.merge([],i.childNodes))};var Ae=Q.fn.load;Q.fn.load=function(t,e,n){if("string"!=typeof t&&Ae)return Ae.apply(this,arguments);var i,r,o,a=this,s=t.indexOf(" ");return s>=0&&(i=Q.trim(t.slice(s)),t=t.slice(0,s)),Q.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),a.length>0&&Q.ajax({url:t,type:r,dataType:"html",data:e}).done(function(t){o=arguments,a.html(i?Q("<div>").append(Q.parseHTML(t)).find(i):t)}).complete(n&&function(t,e){a.each(n,o||[t.responseText,e,t])}),this},Q.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){Q.fn[e]=function(t){return this.on(e,t)}}),Q.expr.filters.animated=function(t){return Q.grep(Q.timers,function(e){return t===e.elem}).length};var We=t.document.documentElement;Q.offset={setOffset:function(t,e,n){var i,r,o,a,s,l,u,c=Q.css(t,"position"),d=Q(t),h={};"static"===c&&(t.style.position="relative"),s=d.offset(),o=Q.css(t,"top"),l=Q.css(t,"left"),u=("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1,u?(i=d.position(),a=i.top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),Q.isFunction(e)&&(e=e.call(t,n,s)),null!=e.top&&(h.top=e.top-s.top+a),null!=e.left&&(h.left=e.left-s.left+r),"using"in e?e.using.call(t,h):d.css(h)}},Q.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){Q.offset.setOffset(this,t,e)});var e,n,i=this[0],r={top:0,left:0},o=i&&i.ownerDocument;return o?(e=o.documentElement,Q.contains(e,i)?(typeof i.getBoundingClientRect!==Ot&&(r=i.getBoundingClientRect()),n=j(o),{top:r.top+n.pageYOffset-e.clientTop,left:r.left+n.pageXOffset-e.clientLeft}):r):void 0},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===Q.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),Q.nodeName(t[0],"html")||(i=t.offset()),i.top+=Q.css(t[0],"borderTopWidth",!0),i.left+=Q.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-Q.css(n,"marginTop",!0),left:e.left-i.left-Q.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||We;t&&!Q.nodeName(t,"html")&&"static"===Q.css(t,"position");)t=t.offsetParent;return t||We})}}),Q.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var i="pageYOffset"===n;Q.fn[e]=function(r){return mt(this,function(e,r,o){var a=j(e);return void 0===o?a?a[n]:e[r]:void(a?a.scrollTo(i?t.pageXOffset:o,i?o:t.pageYOffset):e[r]=o)},e,r,arguments.length,null)}}),Q.each(["top","left"],function(t,e){Q.cssHooks[e]=_(K.pixelPosition,function(t,n){return n?(n=x(t,e),Ut.test(n)?Q(t).position()[e]+"px":n):void 0})}),Q.each({Height:"height",Width:"width"},function(t,e){Q.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){Q.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),a=n||(i===!0||r===!0?"margin":"border");return mt(this,function(e,n,i){var r;return Q.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===i?Q.css(e,n,a):Q.style(e,n,i,a)},e,o?i:void 0,o,null)}})}),Q.fn.size=function(){return this.length},Q.fn.andSelf=Q.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return Q});var Ne=t.jQuery,Fe=t.$;return Q.noConflict=function(e){return t.$===Q&&(t.$=Fe),e&&t.jQuery===Q&&(t.jQuery=Ne),Q},typeof e===Ot&&(t.jQuery=t.$=Q),Q}),function(){function t(t,e){if(t!==e){var n=null===t,i=t===_,r=t===t,o=null===e,a=e===_,s=e===e;if(t>e&&!o||!r||n&&!a&&s||i&&s)return 1;if(e>t&&!n||!s||o&&!i&&r||a&&r)return-1}return 0}function e(t,e,n){for(var i=t.length,r=n?i:-1;n?r--:++r<i;)if(e(t[r],r,t))return r;return-1}function n(t,e,n){if(e!==e)return p(t,n);for(var i=n-1,r=t.length;++i<r;)if(t[i]===e)return i;return-1}function i(t){return"function"==typeof t||!1}function r(t){return null==t?"":t+""}function o(t,e){for(var n=-1,i=t.length;++n<i&&e.indexOf(t.charAt(n))>-1;);return n}function a(t,e){for(var n=t.length;n--&&e.indexOf(t.charAt(n))>-1;);return n}function s(e,n){return t(e.criteria,n.criteria)||e.index-n.index}function l(e,n,i){for(var r=-1,o=e.criteria,a=n.criteria,s=o.length,l=i.length;++r<s;){var u=t(o[r],a[r]);if(u){if(r>=l)return u;var c=i[r];return u*("asc"===c||c===!0?1:-1)}}return e.index-n.index}function u(t){return jt[t]}function c(t){return Ut[t]}function d(t,e,n){return e?t=qt[t]:n&&(t=zt[t]),"\\"+t}function h(t){return"\\"+zt[t]}function p(t,e,n){for(var i=t.length,r=e+(n?0:-1);n?r--:++r<i;){var o=t[r];if(o!==o)return r}return-1}function f(t){return!!t&&"object"==typeof t}function g(t){return 160>=t&&t>=9&&13>=t||32==t||160==t||5760==t||6158==t||t>=8192&&(8202>=t||8232==t||8233==t||8239==t||8287==t||12288==t||65279==t)}function m(t,e){for(var n=-1,i=t.length,r=-1,o=[];++n<i;)t[n]===e&&(t[n]=j,o[++r]=n);return o}function v(t,e){for(var n,i=-1,r=t.length,o=-1,a=[];++i<r;){var s=t[i],l=e?e(s,i,t):s;i&&n===l||(n=l,a[++o]=s)}return a}function y(t){for(var e=-1,n=t.length;++e<n&&g(t.charCodeAt(e)););return e}function b(t){for(var e=t.length;e--&&g(t.charCodeAt(e)););return e}function w(t){return Bt[t]}function x(g){function X(t){if(f(t)&&!Es(t)&&!(t instanceof jt)){if(t instanceof tt)return t;if(ea.call(t,"__chain__")&&ea.call(t,"__wrapped__"))return pi(t)}return new tt(t)}function J(){}function tt(t,e,n){this.__wrapped__=t,this.__actions__=n||[],this.__chain__=!!e}function jt(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=Ta,this.__views__=[]}function Ut(){var t=new jt(this.__wrapped__);return t.__actions__=ne(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ne(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ne(this.__views__),t}function Bt(){if(this.__filtered__){var t=new jt(this);t.__dir__=-1,t.__filtered__=!0}else t=this.clone(),t.__dir__*=-1;return t}function Yt(){var t=this.__wrapped__.value(),e=this.__dir__,n=Es(t),i=0>e,r=n?t.length:0,o=zn(0,r,this.__views__),a=o.start,s=o.end,l=s-a,u=i?s:a-1,c=this.__iteratees__,d=c.length,h=0,p=Sa(l,this.__takeCount__);if(!n||F>r||r==l&&p==l)return nn(t,this.__actions__);var f=[];t:for(;l--&&p>h;){u+=e;for(var g=-1,m=t[u];++g<d;){var v=c[g],y=v.iteratee,b=v.type,w=y(m);if(b==R)m=w;else if(!w){if(b==L)continue t;break t}}f[h++]=m}return f}function qt(){this.__data__={}}function zt(t){return this.has(t)&&delete this.__data__[t]}function Vt(t){return"__proto__"==t?_:this.__data__[t]}function Xt(t){return"__proto__"!=t&&ea.call(this.__data__,t)}function Gt(t,e){return"__proto__"!=t&&(this.__data__[t]=e),this}function Kt(t){var e=t?t.length:0;for(this.data={hash:va(null),set:new da};e--;)this.push(t[e])}function Zt(t,e){var n=t.data,i="string"==typeof e||Ar(e)?n.set.has(e):n.hash[e];return i?0:-1}function Jt(t){var e=this.data;"string"==typeof t||Ar(t)?e.set.add(t):e.hash[t]=!0}function ee(t,e){for(var n=-1,i=t.length,r=-1,o=e.length,a=jo(i+o);++n<i;)a[n]=t[n];for(;++r<o;)a[n++]=e[r];return a}function ne(t,e){var n=-1,i=t.length;for(e||(e=jo(i));++n<i;)e[n]=t[n];return e}function ie(t,e){for(var n=-1,i=t.length;++n<i&&e(t[n],n,t)!==!1;);return t}function re(t,e){for(var n=t.length;n--&&e(t[n],n,t)!==!1;);return t}function oe(t,e){for(var n=-1,i=t.length;++n<i;)if(!e(t[n],n,t))return!1;return!0}function ae(t,e,n,i){for(var r=-1,o=t.length,a=i,s=a;++r<o;){var l=t[r],u=+e(l);n(u,a)&&(a=u,s=l)}return s}function se(t,e){for(var n=-1,i=t.length,r=-1,o=[];++n<i;){var a=t[n];e(a,n,t)&&(o[++r]=a)}return o}function le(t,e){for(var n=-1,i=t.length,r=jo(i);++n<i;)r[n]=e(t[n],n,t);return r}function ue(t,e){for(var n=-1,i=e.length,r=t.length;++n<i;)t[r+n]=e[n];return t}function ce(t,e,n,i){var r=-1,o=t.length;for(i&&o&&(n=t[++r]);++r<o;)n=e(n,t[r],r,t);return n}function de(t,e,n,i){var r=t.length;for(i&&r&&(n=t[--r]);r--;)n=e(n,t[r],r,t);return n}function he(t,e){for(var n=-1,i=t.length;++n<i;)if(e(t[n],n,t))return!0;return!1}function pe(t,e){for(var n=t.length,i=0;n--;)i+=+e(t[n])||0;return i}function fe(t,e){return t===_?e:t}function ge(t,e,n,i){return t!==_&&ea.call(i,n)?t:e}function me(t,e,n){for(var i=-1,r=Hs(e),o=r.length;++i<o;){var a=r[i],s=t[a],l=n(s,e[a],a,t,e);(l===l?l===s:s!==s)&&(s!==_||a in t)||(t[a]=l)}return t}function ve(t,e){return null==e?t:be(e,Hs(e),t)}function ye(t,e){for(var n=-1,i=null==t,r=!i&&Zn(t),o=r?t.length:0,a=e.length,s=jo(a);++n<a;){var l=e[n];r?s[n]=Jn(l,o)?t[l]:_:s[n]=i?_:t[l]}return s}function be(t,e,n){n||(n={});for(var i=-1,r=e.length;++i<r;){var o=e[i];n[o]=t[o]}return n}function we(t,e,n){var i=typeof t;return"function"==i?e===_?t:an(t,e,n):null==t?To:"object"==i?Re(t):e===_?Ao(t):He(t,e)}function xe(t,e,n,i,r,o,a){var s;if(n&&(s=r?n(t,i,r):n(t)),s!==_)return s;if(!Ar(t))return t;var l=Es(t);if(l){if(s=Vn(t),!e)return ne(t,s)}else{var u=ia.call(t),c=u==V;if(u!=K&&u!=U&&(!c||r))return Ht[u]?Gn(t,u,e):r?t:{};if(s=Xn(c?{}:t),!e)return ve(s,t)}o||(o=[]),a||(a=[]);for(var d=o.length;d--;)if(o[d]==t)return a[d];return o.push(t),a.push(s),(l?ie:$e)(t,function(i,r){s[r]=xe(i,e,n,r,t,o,a)}),s}function _e(t,e,n){if("function"!=typeof t)throw new Ko(H);return ha(function(){t.apply(_,n)},e)}function Se(t,e){var i=t?t.length:0,r=[];if(!i)return r;var o=-1,a=Bn(),s=a===n,l=s&&e.length>=F?gn(e):null,u=e.length;l&&(a=Zt,s=!1,e=l);t:for(;++o<i;){var c=t[o];if(s&&c===c){for(var d=u;d--;)if(e[d]===c)continue t;r.push(c)}else a(e,c,0)<0&&r.push(c)}return r}function Ce(t,e){var n=!0;return Na(t,function(t,i,r){return n=!!e(t,i,r)}),n}function Oe(t,e,n,i){var r=i,o=r;return Na(t,function(t,a,s){var l=+e(t,a,s);(n(l,r)||l===i&&l===o)&&(r=l,o=t)}),o}function De(t,e,n,i){var r=t.length;for(n=null==n?0:+n||0,0>n&&(n=-n>r?0:r+n),i=i===_||i>r?r:+i||0,0>i&&(i+=r),r=n>i?0:i>>>0,n>>>=0;r>n;)t[n++]=e;return t}function ke(t,e){var n=[];return Na(t,function(t,i,r){e(t,i,r)&&n.push(t)}),n}function Te(t,e,n,i){var r;return n(t,function(t,n,o){return e(t,n,o)?(r=i?n:t,!1):void 0}),r}function Ee(t,e,n,i){i||(i=[]);for(var r=-1,o=t.length;++r<o;){var a=t[r];f(a)&&Zn(a)&&(n||Es(a)||Or(a))?e?Ee(a,e,n,i):ue(i,a):n||(i[i.length]=a)}return i}function Pe(t,e){return La(t,e,to)}function $e(t,e){return La(t,e,Hs)}function Me(t,e){return Ra(t,e,Hs)}function Ie(t,e){for(var n=-1,i=e.length,r=-1,o=[];++n<i;){var a=e[n];Ir(t[a])&&(o[++r]=a)}return o}function Ae(t,e,n){if(null!=t){n!==_&&n in di(t)&&(e=[n]);for(var i=0,r=e.length;null!=t&&r>i;)t=t[e[i++]];return i&&i==r?t:_}}function We(t,e,n,i,r,o){return t===e?!0:null==t||null==e||!Ar(t)&&!f(e)?t!==t&&e!==e:Ne(t,e,We,n,i,r,o)}function Ne(t,e,n,i,r,o,a){var s=Es(t),l=Es(e),u=B,c=B;s||(u=ia.call(t),u==U?u=K:u!=K&&(s=Br(t))),l||(c=ia.call(e),c==U?c=K:c!=K&&(l=Br(e)));var d=u==K,h=c==K,p=u==c;if(p&&!s&&!d)return Rn(t,e,u);if(!r){var f=d&&ea.call(t,"__wrapped__"),g=h&&ea.call(e,"__wrapped__");if(f||g)return n(f?t.value():t,g?e.value():e,i,r,o,a)}if(!p)return!1;o||(o=[]),a||(a=[]);for(var m=o.length;m--;)if(o[m]==t)return a[m]==e;o.push(t),a.push(e);var v=(s?Ln:Hn)(t,e,n,i,r,o,a);return o.pop(),a.pop(),v}function Fe(t,e,n){var i=e.length,r=i,o=!n;if(null==t)return!r;for(t=di(t);i--;){var a=e[i];if(o&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<r;){a=e[i];var s=a[0],l=t[s],u=a[1];if(o&&a[2]){if(l===_&&!(s in t))return!1}else{var c=n?n(l,u,s):_;if(!(c===_?We(u,l,n,!0):c))return!1}}return!0}function Le(t,e){var n=-1,i=Zn(t)?jo(t.length):[];return Na(t,function(t,r,o){i[++n]=e(t,r,o)}),i}function Re(t){var e=Yn(t);if(1==e.length&&e[0][2]){var n=e[0][0],i=e[0][1];return function(t){return null==t?!1:t[n]===i&&(i!==_||n in di(t))}}return function(t){return Fe(t,e)}}function He(t,e){var n=Es(t),i=ti(t)&&ii(e),r=t+"";return t=hi(t),function(o){if(null==o)return!1;var a=r;if(o=di(o),(n||!i)&&!(a in o)){if(o=1==t.length?o:Ae(o,Xe(t,0,-1)),null==o)return!1;a=Di(t),o=di(o)}return o[a]===e?e!==_||a in o:We(e,o[a],_,!0)}}function je(t,e,n,i,r){if(!Ar(t))return t;var o=Zn(e)&&(Es(e)||Br(e)),a=o?_:Hs(e);return ie(a||e,function(s,l){if(a&&(l=s,s=e[l]),f(s))i||(i=[]),r||(r=[]),Ue(t,e,l,je,n,i,r);else{var u=t[l],c=n?n(u,s,l,t,e):_,d=c===_;d&&(c=s),c===_&&(!o||l in t)||!d&&(c===c?c===u:u!==u)||(t[l]=c)}}),t}function Ue(t,e,n,i,r,o,a){for(var s=o.length,l=e[n];s--;)if(o[s]==l)return void(t[n]=a[s]);var u=t[n],c=r?r(u,l,n,t,e):_,d=c===_;d&&(c=l,Zn(l)&&(Es(l)||Br(l))?c=Es(u)?u:Zn(u)?ne(u):[]:Hr(l)||Or(l)?c=Or(u)?Xr(u):Hr(u)?u:{}:d=!1),o.push(l),a.push(c),d?t[n]=i(c,l,r,o,a):(c===c?c!==u:u===u)&&(t[n]=c)}function Be(t){return function(e){return null==e?_:e[t]}}function Ye(t){var e=t+"";return t=hi(t),function(n){return Ae(n,t,e)}}function qe(t,e){for(var n=t?e.length:0;n--;){var i=e[n];if(i!=r&&Jn(i)){var r=i;pa.call(t,i,1)}}return t}function ze(t,e){return t+ya(Da()*(e-t+1))}function Ve(t,e,n,i,r){return r(t,function(t,r,o){n=i?(i=!1,t):e(n,t,r,o)}),n}function Xe(t,e,n){var i=-1,r=t.length;e=null==e?0:+e||0,0>e&&(e=-e>r?0:r+e),n=n===_||n>r?r:+n||0,0>n&&(n+=r),r=e>n?0:n-e>>>0,e>>>=0;for(var o=jo(r);++i<r;)o[i]=t[i+e];return o}function Ge(t,e){var n;return Na(t,function(t,i,r){return n=e(t,i,r),!n}),!!n}function Ke(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}function Ze(t,e,n){var i=jn(),r=-1;e=le(e,function(t){return i(t)});var o=Le(t,function(t){var n=le(e,function(e){return e(t)});return{criteria:n,index:++r,value:t}});return Ke(o,function(t,e){return l(t,e,n)})}function Je(t,e){var n=0;return Na(t,function(t,i,r){n+=+e(t,i,r)||0}),n}function Qe(t,e){var i=-1,r=Bn(),o=t.length,a=r===n,s=a&&o>=F,l=s?gn():null,u=[];l?(r=Zt,a=!1):(s=!1,l=e?[]:u);t:for(;++i<o;){var c=t[i],d=e?e(c,i,t):c;if(a&&c===c){for(var h=l.length;h--;)if(l[h]===d)continue t;e&&l.push(d),u.push(c)}else r(l,d,0)<0&&((e||s)&&l.push(d),u.push(c))}return u}function tn(t,e){for(var n=-1,i=e.length,r=jo(i);++n<i;)r[n]=t[e[n]];return r}function en(t,e,n,i){for(var r=t.length,o=i?r:-1;(i?o--:++o<r)&&e(t[o],o,t););return n?Xe(t,i?0:o,i?o+1:r):Xe(t,i?o+1:0,i?r:o)}function nn(t,e){var n=t;n instanceof jt&&(n=n.value());for(var i=-1,r=e.length;++i<r;){var o=e[i];n=o.func.apply(o.thisArg,ue([n],o.args))}return n}function rn(t,e,n){var i=0,r=t?t.length:i;if("number"==typeof e&&e===e&&$a>=r){for(;r>i;){var o=i+r>>>1,a=t[o];(n?e>=a:e>a)&&null!==a?i=o+1:r=o}return r}return on(t,e,To,n)}function on(t,e,n,i){e=n(e);for(var r=0,o=t?t.length:0,a=e!==e,s=null===e,l=e===_;o>r;){var u=ya((r+o)/2),c=n(t[u]),d=c!==_,h=c===c;if(a)var p=h||i;else p=s?h&&d&&(i||null!=c):l?h&&(i||d):null==c?!1:i?e>=c:e>c;p?r=u+1:o=u}return Sa(o,Pa)}function an(t,e,n){if("function"!=typeof t)return To;if(e===_)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 3:return function(n,i,r){return t.call(e,n,i,r)};case 4:return function(n,i,r,o){return t.call(e,n,i,r,o)};case 5:return function(n,i,r,o,a){return t.call(e,n,i,r,o,a)}}return function(){return t.apply(e,arguments)}}function sn(t){var e=new aa(t.byteLength),n=new fa(e);return n.set(new fa(t)),e}function ln(t,e,n){for(var i=n.length,r=-1,o=_a(t.length-i,0),a=-1,s=e.length,l=jo(s+o);++a<s;)l[a]=e[a];for(;++r<i;)l[n[r]]=t[r];for(;o--;)l[a++]=t[r++];return l}function un(t,e,n){for(var i=-1,r=n.length,o=-1,a=_a(t.length-r,0),s=-1,l=e.length,u=jo(a+l);++o<a;)u[o]=t[o];for(var c=o;++s<l;)u[c+s]=e[s];for(;++i<r;)u[c+n[i]]=t[o++];return u}function cn(t,e){return function(n,i,r){var o=e?e():{};if(i=jn(i,r,3),Es(n))for(var a=-1,s=n.length;++a<s;){var l=n[a];t(o,l,i(l,a,n),n)}else Na(n,function(e,n,r){t(o,e,i(e,n,r),r)});return o}}function dn(t){return vr(function(e,n){var i=-1,r=null==e?0:n.length,o=r>2?n[r-2]:_,a=r>2?n[2]:_,s=r>1?n[r-1]:_;for("function"==typeof o?(o=an(o,s,5),r-=2):(o="function"==typeof s?s:_,r-=o?1:0),a&&Qn(n[0],n[1],a)&&(o=3>r?_:o,r=1);++i<r;){var l=n[i];l&&t(e,l,o)}return e})}function hn(t,e){return function(n,i){var r=n?Ua(n):0;if(!ni(r))return t(n,i);for(var o=e?r:-1,a=di(n);(e?o--:++o<r)&&i(a[o],o,a)!==!1;);return n}}function pn(t){return function(e,n,i){for(var r=di(e),o=i(e),a=o.length,s=t?a:-1;t?s--:++s<a;){var l=o[s];if(n(r[l],l,r)===!1)break}return e}}function fn(t,e){function n(){var r=this&&this!==Qt&&this instanceof n?i:t;return r.apply(e,arguments)}var i=vn(t);return n}function gn(t){return va&&da?new Kt(t):null}function mn(t){return function(e){for(var n=-1,i=Oo(co(e)),r=i.length,o="";++n<r;)o=t(o,i[n],n);return o}}function vn(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=Wa(t.prototype),i=t.apply(n,e);return Ar(i)?i:n}}function yn(t){function e(n,i,r){r&&Qn(n,i,r)&&(i=_);var o=Fn(n,t,_,_,_,_,_,i);return o.placeholder=e.placeholder,o}return e}function bn(t,e){return vr(function(n){var i=n[0];return null==i?i:(n.push(e),t.apply(_,n))})}function wn(t,e){return function(n,i,r){if(r&&Qn(n,i,r)&&(i=_),i=jn(i,r,3),1==i.length){n=Es(n)?n:ci(n);var o=ae(n,i,t,e);if(!n.length||o!==e)return o}return Oe(n,i,t,e)}}function xn(t,n){return function(i,r,o){if(r=jn(r,o,3),Es(i)){var a=e(i,r,n);return a>-1?i[a]:_}return Te(i,r,t)}}function _n(t){return function(n,i,r){return n&&n.length?(i=jn(i,r,3),e(n,i,t)):-1}}function Sn(t){return function(e,n,i){return n=jn(n,i,3),Te(e,n,t,!0)}}function Cn(t){return function(){for(var e,n=arguments.length,i=t?n:-1,r=0,o=jo(n);t?i--:++i<n;){var a=o[r++]=arguments[i];if("function"!=typeof a)throw new Ko(H);!e&&tt.prototype.thru&&"wrapper"==Un(a)&&(e=new tt([],!0))}for(i=e?-1:n;++i<n;){a=o[i];var s=Un(a),l="wrapper"==s?ja(a):_;e=l&&ei(l[0])&&l[1]==($|k|E|M)&&!l[4].length&&1==l[9]?e[Un(l[0])].apply(e,l[3]):1==a.length&&ei(a)?e[s]():e.thru(a)}return function(){var t=arguments,i=t[0];if(e&&1==t.length&&Es(i)&&i.length>=F)return e.plant(i).value();for(var r=0,a=n?o[r].apply(this,t):i;++r<n;)a=o[r].call(this,a);return a}}}function On(t,e){return function(n,i,r){return"function"==typeof i&&r===_&&Es(n)?t(n,i):e(n,an(i,r,3))}}function Dn(t){return function(e,n,i){return("function"!=typeof n||i!==_)&&(n=an(n,i,3)),t(e,n,to)}}function kn(t){return function(e,n,i){return("function"!=typeof n||i!==_)&&(n=an(n,i,3)),t(e,n)}}function Tn(t){return function(e,n,i){var r={};return n=jn(n,i,3),$e(e,function(e,i,o){var a=n(e,i,o);i=t?a:i,e=t?e:a,r[i]=e}),r}}function En(t){return function(e,n,i){return e=r(e),(t?e:"")+In(e,n,i)+(t?"":e)}}function Pn(t){var e=vr(function(n,i){var r=m(i,e.placeholder);return Fn(n,t,_,i,r)});return e}function $n(t,e){return function(n,i,r,o){var a=arguments.length<3;return"function"==typeof i&&o===_&&Es(n)?t(n,i,r,a):Ve(n,jn(i,o,4),r,a,e)}}function Mn(t,e,n,i,r,o,a,s,l,u){function c(){for(var b=arguments.length,w=b,x=jo(b);w--;)x[w]=arguments[w];if(i&&(x=ln(x,i,r)),o&&(x=un(x,o,a)),f||v){var S=c.placeholder,D=m(x,S);if(b-=D.length,u>b){var k=s?ne(s):_,T=_a(u-b,0),$=f?D:_,M=f?_:D,I=f?x:_,A=f?_:x;e|=f?E:P,e&=~(f?P:E),g||(e&=~(C|O));var W=[t,e,n,I,$,A,M,k,l,T],N=Mn.apply(_,W);return ei(t)&&Ba(N,W),N.placeholder=S,N}}var F=h?n:this,L=p?F[t]:t;return s&&(x=li(x,s)),d&&l<x.length&&(x.length=l),this&&this!==Qt&&this instanceof c&&(L=y||vn(t)),L.apply(F,x)}var d=e&$,h=e&C,p=e&O,f=e&k,g=e&D,v=e&T,y=p?_:vn(t);return c}function In(t,e,n){var i=t.length;if(e=+e,i>=e||!wa(e))return"";var r=e-i;return n=null==n?" ":n+"",vo(n,ma(r/n.length)).slice(0,r)}function An(t,e,n,i){function r(){for(var e=-1,s=arguments.length,l=-1,u=i.length,c=jo(u+s);++l<u;)c[l]=i[l];for(;s--;)c[l++]=arguments[++e];var d=this&&this!==Qt&&this instanceof r?a:t;return d.apply(o?n:this,c)}var o=e&C,a=vn(t);return r}function Wn(t){var e=qo[t];return function(t,n){return n=n===_?0:+n||0,n?(n=ua(10,n),e(t*n)/n):e(t)}}function Nn(t){return function(e,n,i,r){var o=jn(i);return null==i&&o===we?rn(e,n,t):on(e,n,o(i,r,1),t)}}function Fn(t,e,n,i,r,o,a,s){var l=e&O;if(!l&&"function"!=typeof t)throw new Ko(H);var u=i?i.length:0;if(u||(e&=~(E|P),i=r=_),u-=r?r.length:0,e&P){var c=i,d=r;i=r=_}var h=l?_:ja(t),p=[t,e,n,i,r,c,d,o,a,s];if(h&&(ri(p,h),e=p[1],s=p[9]),p[9]=null==s?l?0:t.length:_a(s-u,0)||0,e==C)var f=fn(p[0],p[2]);else f=e!=E&&e!=(C|E)||p[4].length?Mn.apply(_,p):An.apply(_,p);var g=h?Ha:Ba;return g(f,p)}function Ln(t,e,n,i,r,o,a){var s=-1,l=t.length,u=e.length;if(l!=u&&!(r&&u>l))return!1;for(;++s<l;){var c=t[s],d=e[s],h=i?i(r?d:c,r?c:d,s):_;if(h!==_){if(h)continue;return!1}if(r){if(!he(e,function(t){return c===t||n(c,t,i,r,o,a)}))return!1}else if(c!==d&&!n(c,d,i,r,o,a))return!1}return!0}function Rn(t,e,n){switch(n){case Y:case q:return+t==+e;case z:return t.name==e.name&&t.message==e.message;case G:return t!=+t?e!=+e:t==+e;case Z:case Q:return t==e+""}return!1}function Hn(t,e,n,i,r,o,a){var s=Hs(t),l=s.length,u=Hs(e),c=u.length;if(l!=c&&!r)return!1;for(var d=l;d--;){var h=s[d];if(!(r?h in e:ea.call(e,h)))return!1}for(var p=r;++d<l;){h=s[d];var f=t[h],g=e[h],m=i?i(r?g:f,r?f:g,h):_;if(!(m===_?n(f,g,i,r,o,a):m))return!1;p||(p="constructor"==h)}if(!p){var v=t.constructor,y=e.constructor;if(v!=y&&"constructor"in t&&"constructor"in e&&!("function"==typeof v&&v instanceof v&&"function"==typeof y&&y instanceof y))return!1}return!0}function jn(t,e,n){var i=X.callback||Do;return i=i===Do?we:i,n?i(t,e,n):i}function Un(t){for(var e=t.name+"",n=Aa[e],i=n?n.length:0;i--;){var r=n[i],o=r.func;if(null==o||o==t)return r.name}return e}function Bn(t,e,i){var r=X.indexOf||Ci;return r=r===Ci?n:r,t?r(t,e,i):r}function Yn(t){for(var e=eo(t),n=e.length;n--;)e[n][2]=ii(e[n][1]);return e}function qn(t,e){var n=null==t?_:t[e];return Fr(n)?n:_}function zn(t,e,n){for(var i=-1,r=n.length;++i<r;){var o=n[i],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=Sa(e,t+a);break;case"takeRight":t=_a(t,e-a)}}return{start:t,end:e}}function Vn(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&ea.call(t,"index")&&(n.index=t.index,n.input=t.input),n}function Xn(t){var e=t.constructor;return"function"==typeof e&&e instanceof e||(e=Vo),new e}function Gn(t,e,n){var i=t.constructor;switch(e){case et:return sn(t);case Y:case q:return new i(+t);case nt:case it:case rt:case ot:case at:case st:case lt:case ut:case ct:var r=t.buffer;return new i(n?sn(r):r,t.byteOffset,t.length);case G:case Q:return new i(t);case Z:var o=new i(t.source,Et.exec(t));o.lastIndex=t.lastIndex}return o}function Kn(t,e,n){null==t||ti(e,t)||(e=hi(e),t=1==e.length?t:Ae(t,Xe(e,0,-1)),e=Di(e));var i=null==t?t:t[e];return null==i?_:i.apply(t,n)}function Zn(t){return null!=t&&ni(Ua(t))}function Jn(t,e){return t="number"==typeof t||Mt.test(t)?+t:-1,e=null==e?Ma:e,t>-1&&t%1==0&&e>t}function Qn(t,e,n){if(!Ar(n))return!1;var i=typeof e;if("number"==i?Zn(n)&&Jn(e,n.length):"string"==i&&e in n){var r=n[e];return t===t?t===r:r!==r}return!1}function ti(t,e){var n=typeof t;if("string"==n&&_t.test(t)||"number"==n)return!0;if(Es(t))return!1;var i=!xt.test(t);return i||null!=e&&t in di(e)}function ei(t){var e=Un(t),n=X[e];if("function"!=typeof n||!(e in jt.prototype))return!1;if(t===n)return!0;var i=ja(n);return!!i&&t===i[0]}function ni(t){return"number"==typeof t&&t>-1&&t%1==0&&Ma>=t}function ii(t){return t===t&&!Ar(t)}function ri(t,e){var n=t[1],i=e[1],r=n|i,o=$>r,a=i==$&&n==k||i==$&&n==M&&t[7].length<=e[8]||i==($|M)&&n==k;if(!o&&!a)return t;i&C&&(t[2]=e[2],r|=n&C?0:D);var s=e[3];if(s){var l=t[3];t[3]=l?ln(l,s,e[4]):ne(s),t[4]=l?m(t[3],j):ne(e[4])}return s=e[5],s&&(l=t[5],t[5]=l?un(l,s,e[6]):ne(s),t[6]=l?m(t[5],j):ne(e[6])),s=e[7],s&&(t[7]=ne(s)),i&$&&(t[8]=null==t[8]?e[8]:Sa(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=r,t}function oi(t,e){return t===_?e:Ps(t,e,oi)}function ai(t,e){t=di(t);for(var n=-1,i=e.length,r={};++n<i;){var o=e[n];o in t&&(r[o]=t[o])}return r}function si(t,e){var n={};return Pe(t,function(t,i,r){e(t,i,r)&&(n[i]=t)}),n}function li(t,e){for(var n=t.length,i=Sa(e.length,n),r=ne(t);i--;){var o=e[i];t[i]=Jn(o,n)?r[o]:_}return t}function ui(t){for(var e=to(t),n=e.length,i=n&&t.length,r=!!i&&ni(i)&&(Es(t)||Or(t)),o=-1,a=[];++o<n;){var s=e[o];(r&&Jn(s,i)||ea.call(t,s))&&a.push(s)}return a}function ci(t){return null==t?[]:Zn(t)?Ar(t)?t:Vo(t):oo(t)}function di(t){return Ar(t)?t:Vo(t)}function hi(t){if(Es(t))return t;var e=[];return r(t).replace(St,function(t,n,i,r){e.push(i?r.replace(kt,"$1"):n||t)}),e}function pi(t){return t instanceof jt?t.clone():new tt(t.__wrapped__,t.__chain__,ne(t.__actions__))}function fi(t,e,n){e=(n?Qn(t,e,n):null==e)?1:_a(ya(e)||1,1);for(var i=0,r=t?t.length:0,o=-1,a=jo(ma(r/e));r>i;)a[++o]=Xe(t,i,i+=e);return a}function gi(t){for(var e=-1,n=t?t.length:0,i=-1,r=[];++e<n;){var o=t[e];o&&(r[++i]=o)}return r}function mi(t,e,n){var i=t?t.length:0;return i?((n?Qn(t,e,n):null==e)&&(e=1),Xe(t,0>e?0:e)):[]}function vi(t,e,n){var i=t?t.length:0;return i?((n?Qn(t,e,n):null==e)&&(e=1),e=i-(+e||0),Xe(t,0,0>e?0:e)):[]}function yi(t,e,n){return t&&t.length?en(t,jn(e,n,3),!0,!0):[]}function bi(t,e,n){return t&&t.length?en(t,jn(e,n,3),!0):[]}function wi(t,e,n,i){var r=t?t.length:0;return r?(n&&"number"!=typeof n&&Qn(t,e,n)&&(n=0,i=r),De(t,e,n,i)):[]}function xi(t){return t?t[0]:_}function _i(t,e,n){var i=t?t.length:0;return n&&Qn(t,e,n)&&(e=!1),i?Ee(t,e):[]}function Si(t){var e=t?t.length:0;return e?Ee(t,!0):[]}function Ci(t,e,i){var r=t?t.length:0;if(!r)return-1;if("number"==typeof i)i=0>i?_a(r+i,0):i;else if(i){var o=rn(t,e);return r>o&&(e===e?e===t[o]:t[o]!==t[o])?o:-1}return n(t,e,i||0)}function Oi(t){return vi(t,1)}function Di(t){var e=t?t.length:0;return e?t[e-1]:_}function ki(t,e,n){var i=t?t.length:0;if(!i)return-1;var r=i;if("number"==typeof n)r=(0>n?_a(i+n,0):Sa(n||0,i-1))+1;else if(n){r=rn(t,e,!0)-1;var o=t[r];return(e===e?e===o:o!==o)?r:-1}if(e!==e)return p(t,r,!0);for(;r--;)if(t[r]===e)return r;return-1}function Ti(){var t=arguments,e=t[0];if(!e||!e.length)return e;for(var n=0,i=Bn(),r=t.length;++n<r;)for(var o=0,a=t[n];(o=i(e,a,o))>-1;)pa.call(e,o,1);return e}function Ei(t,e,n){var i=[];if(!t||!t.length)return i;var r=-1,o=[],a=t.length;for(e=jn(e,n,3);++r<a;){var s=t[r];
e(s,r,t)&&(i.push(s),o.push(r))}return qe(t,o),i}function Pi(t){return mi(t,1)}function $i(t,e,n){var i=t?t.length:0;return i?(n&&"number"!=typeof n&&Qn(t,e,n)&&(e=0,n=i),Xe(t,e,n)):[]}function Mi(t,e,n){var i=t?t.length:0;return i?((n?Qn(t,e,n):null==e)&&(e=1),Xe(t,0,0>e?0:e)):[]}function Ii(t,e,n){var i=t?t.length:0;return i?((n?Qn(t,e,n):null==e)&&(e=1),e=i-(+e||0),Xe(t,0>e?0:e)):[]}function Ai(t,e,n){return t&&t.length?en(t,jn(e,n,3),!1,!0):[]}function Wi(t,e,n){return t&&t.length?en(t,jn(e,n,3)):[]}function Ni(t,e,i,r){var o=t?t.length:0;if(!o)return[];null!=e&&"boolean"!=typeof e&&(r=i,i=Qn(t,e,r)?_:e,e=!1);var a=jn();return(null!=i||a!==we)&&(i=a(i,r,3)),e&&Bn()===n?v(t,i):Qe(t,i)}function Fi(t){if(!t||!t.length)return[];var e=-1,n=0;t=se(t,function(t){return Zn(t)?(n=_a(t.length,n),!0):void 0});for(var i=jo(n);++e<n;)i[e]=le(t,Be(e));return i}function Li(t,e,n){var i=t?t.length:0;if(!i)return[];var r=Fi(t);return null==e?r:(e=an(e,n,4),le(r,function(t){return ce(t,e,_,!0)}))}function Ri(){for(var t=-1,e=arguments.length;++t<e;){var n=arguments[t];if(Zn(n))var i=i?ue(Se(i,n),Se(n,i)):n}return i?Qe(i):[]}function Hi(t,e){var n=-1,i=t?t.length:0,r={};for(!i||e||Es(t[0])||(e=[]);++n<i;){var o=t[n];e?r[o]=e[n]:o&&(r[o[0]]=o[1])}return r}function ji(t){var e=X(t);return e.__chain__=!0,e}function Ui(t,e,n){return e.call(n,t),t}function Bi(t,e,n){return e.call(n,t)}function Yi(){return ji(this)}function qi(){return new tt(this.value(),this.__chain__)}function zi(t){for(var e,n=this;n instanceof J;){var i=pi(n);e?r.__wrapped__=i:e=i;var r=i;n=n.__wrapped__}return r.__wrapped__=t,e}function Vi(){var t=this.__wrapped__,e=function(t){return t.reverse()};if(t instanceof jt){var n=t;return this.__actions__.length&&(n=new jt(this)),n=n.reverse(),n.__actions__.push({func:Bi,args:[e],thisArg:_}),new tt(n,this.__chain__)}return this.thru(e)}function Xi(){return this.value()+""}function Gi(){return nn(this.__wrapped__,this.__actions__)}function Ki(t,e,n){var i=Es(t)?oe:Ce;return n&&Qn(t,e,n)&&(e=_),("function"!=typeof e||n!==_)&&(e=jn(e,n,3)),i(t,e)}function Zi(t,e,n){var i=Es(t)?se:ke;return e=jn(e,n,3),i(t,e)}function Ji(t,e){return rs(t,Re(e))}function Qi(t,e,n,i){var r=t?Ua(t):0;return ni(r)||(t=oo(t),r=t.length),n="number"!=typeof n||i&&Qn(e,n,i)?0:0>n?_a(r+n,0):n||0,"string"==typeof t||!Es(t)&&Ur(t)?r>=n&&t.indexOf(e,n)>-1:!!r&&Bn(t,e,n)>-1}function tr(t,e,n){var i=Es(t)?le:Le;return e=jn(e,n,3),i(t,e)}function er(t,e){return tr(t,Ao(e))}function nr(t,e,n){var i=Es(t)?se:ke;return e=jn(e,n,3),i(t,function(t,n,i){return!e(t,n,i)})}function ir(t,e,n){if(n?Qn(t,e,n):null==e){t=ci(t);var i=t.length;return i>0?t[ze(0,i-1)]:_}var r=-1,o=Vr(t),i=o.length,a=i-1;for(e=Sa(0>e?0:+e||0,i);++r<e;){var s=ze(r,a),l=o[s];o[s]=o[r],o[r]=l}return o.length=e,o}function rr(t){return ir(t,Ta)}function or(t){var e=t?Ua(t):0;return ni(e)?e:Hs(t).length}function ar(t,e,n){var i=Es(t)?he:Ge;return n&&Qn(t,e,n)&&(e=_),("function"!=typeof e||n!==_)&&(e=jn(e,n,3)),i(t,e)}function sr(t,e,n){if(null==t)return[];n&&Qn(t,e,n)&&(e=_);var i=-1;e=jn(e,n,3);var r=Le(t,function(t,n,r){return{criteria:e(t,n,r),index:++i,value:t}});return Ke(r,s)}function lr(t,e,n,i){return null==t?[]:(i&&Qn(e,n,i)&&(n=_),Es(e)||(e=null==e?[]:[e]),Es(n)||(n=null==n?[]:[n]),Ze(t,e,n))}function ur(t,e){return Zi(t,Re(e))}function cr(t,e){if("function"!=typeof e){if("function"!=typeof t)throw new Ko(H);var n=t;t=e,e=n}return t=wa(t=+t)?t:0,function(){return--t<1?e.apply(this,arguments):void 0}}function dr(t,e,n){return n&&Qn(t,e,n)&&(e=_),e=t&&null==e?t.length:_a(+e||0,0),Fn(t,$,_,_,_,_,e)}function hr(t,e){var n;if("function"!=typeof e){if("function"!=typeof t)throw new Ko(H);var i=t;t=e,e=i}return function(){return--t>0&&(n=e.apply(this,arguments)),1>=t&&(e=_),n}}function pr(t,e,n){function i(){p&&sa(p),u&&sa(u),g=0,u=p=f=_}function r(e,n){n&&sa(n),u=p=f=_,e&&(g=gs(),c=t.apply(h,l),p||u||(l=h=_))}function o(){var t=e-(gs()-d);0>=t||t>e?r(f,u):p=ha(o,t)}function a(){r(v,p)}function s(){if(l=arguments,d=gs(),h=this,f=v&&(p||!y),m===!1)var n=y&&!p;else{u||y||(g=d);var i=m-(d-g),r=0>=i||i>m;r?(u&&(u=sa(u)),g=d,c=t.apply(h,l)):u||(u=ha(a,i))}return r&&p?p=sa(p):p||e===m||(p=ha(o,e)),n&&(r=!0,c=t.apply(h,l)),!r||p||u||(l=h=_),c}var l,u,c,d,h,p,f,g=0,m=!1,v=!0;if("function"!=typeof t)throw new Ko(H);if(e=0>e?0:+e||0,n===!0){var y=!0;v=!1}else Ar(n)&&(y=!!n.leading,m="maxWait"in n&&_a(+n.maxWait||0,e),v="trailing"in n?!!n.trailing:v);return s.cancel=i,s}function fr(t,e){if("function"!=typeof t||e&&"function"!=typeof e)throw new Ko(H);var n=function(){var i=arguments,r=e?e.apply(this,i):i[0],o=n.cache;if(o.has(r))return o.get(r);var a=t.apply(this,i);return n.cache=o.set(r,a),a};return n.cache=new fr.Cache,n}function gr(t){if("function"!=typeof t)throw new Ko(H);return function(){return!t.apply(this,arguments)}}function mr(t){return hr(2,t)}function vr(t,e){if("function"!=typeof t)throw new Ko(H);return e=_a(e===_?t.length-1:+e||0,0),function(){for(var n=arguments,i=-1,r=_a(n.length-e,0),o=jo(r);++i<r;)o[i]=n[e+i];switch(e){case 0:return t.call(this,o);case 1:return t.call(this,n[0],o);case 2:return t.call(this,n[0],n[1],o)}var a=jo(e+1);for(i=-1;++i<e;)a[i]=n[i];return a[e]=o,t.apply(this,a)}}function yr(t){if("function"!=typeof t)throw new Ko(H);return function(e){return t.apply(this,e)}}function br(t,e,n){var i=!0,r=!0;if("function"!=typeof t)throw new Ko(H);return n===!1?i=!1:Ar(n)&&(i="leading"in n?!!n.leading:i,r="trailing"in n?!!n.trailing:r),pr(t,e,{leading:i,maxWait:+e,trailing:r})}function wr(t,e){return e=null==e?To:e,Fn(e,E,_,[t],[])}function xr(t,e,n,i){return e&&"boolean"!=typeof e&&Qn(t,e,n)?e=!1:"function"==typeof e&&(i=n,n=e,e=!1),"function"==typeof n?xe(t,e,an(n,i,3)):xe(t,e)}function _r(t,e,n){return"function"==typeof e?xe(t,!0,an(e,n,3)):xe(t,!0)}function Sr(t,e){return t>e}function Cr(t,e){return t>=e}function Or(t){return f(t)&&Zn(t)&&ea.call(t,"callee")&&!ca.call(t,"callee")}function Dr(t){return t===!0||t===!1||f(t)&&ia.call(t)==Y}function kr(t){return f(t)&&ia.call(t)==q}function Tr(t){return!!t&&1===t.nodeType&&f(t)&&!Hr(t)}function Er(t){return null==t?!0:Zn(t)&&(Es(t)||Ur(t)||Or(t)||f(t)&&Ir(t.splice))?!t.length:!Hs(t).length}function Pr(t,e,n,i){n="function"==typeof n?an(n,i,3):_;var r=n?n(t,e):_;return r===_?We(t,e,n):!!r}function $r(t){return f(t)&&"string"==typeof t.message&&ia.call(t)==z}function Mr(t){return"number"==typeof t&&wa(t)}function Ir(t){return Ar(t)&&ia.call(t)==V}function Ar(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function Wr(t,e,n,i){return n="function"==typeof n?an(n,i,3):_,Fe(t,Yn(e),n)}function Nr(t){return Rr(t)&&t!=+t}function Fr(t){return null==t?!1:Ir(t)?oa.test(ta.call(t)):f(t)&&$t.test(t)}function Lr(t){return null===t}function Rr(t){return"number"==typeof t||f(t)&&ia.call(t)==G}function Hr(t){var e;if(!f(t)||ia.call(t)!=K||Or(t)||!ea.call(t,"constructor")&&(e=t.constructor,"function"==typeof e&&!(e instanceof e)))return!1;var n;return Pe(t,function(t,e){n=e}),n===_||ea.call(t,n)}function jr(t){return Ar(t)&&ia.call(t)==Z}function Ur(t){return"string"==typeof t||f(t)&&ia.call(t)==Q}function Br(t){return f(t)&&ni(t.length)&&!!Rt[ia.call(t)]}function Yr(t){return t===_}function qr(t,e){return e>t}function zr(t,e){return e>=t}function Vr(t){var e=t?Ua(t):0;return ni(e)?e?ne(t):[]:oo(t)}function Xr(t){return be(t,to(t))}function Gr(t,e,n){var i=Wa(t);return n&&Qn(t,e,n)&&(e=_),e?ve(i,e):i}function Kr(t){return Ie(t,to(t))}function Zr(t,e,n){var i=null==t?_:Ae(t,hi(e),e+"");return i===_?n:i}function Jr(t,e){if(null==t)return!1;var n=ea.call(t,e);if(!n&&!ti(e)){if(e=hi(e),t=1==e.length?t:Ae(t,Xe(e,0,-1)),null==t)return!1;e=Di(e),n=ea.call(t,e)}return n||ni(t.length)&&Jn(e,t.length)&&(Es(t)||Or(t))}function Qr(t,e,n){n&&Qn(t,e,n)&&(e=_);for(var i=-1,r=Hs(t),o=r.length,a={};++i<o;){var s=r[i],l=t[s];e?ea.call(a,l)?a[l].push(s):a[l]=[s]:a[l]=s}return a}function to(t){if(null==t)return[];Ar(t)||(t=Vo(t));var e=t.length;e=e&&ni(e)&&(Es(t)||Or(t))&&e||0;for(var n=t.constructor,i=-1,r="function"==typeof n&&n.prototype===t,o=jo(e),a=e>0;++i<e;)o[i]=i+"";for(var s in t)a&&Jn(s,e)||"constructor"==s&&(r||!ea.call(t,s))||o.push(s);return o}function eo(t){t=di(t);for(var e=-1,n=Hs(t),i=n.length,r=jo(i);++e<i;){var o=n[e];r[e]=[o,t[o]]}return r}function no(t,e,n){var i=null==t?_:t[e];return i===_&&(null==t||ti(e,t)||(e=hi(e),t=1==e.length?t:Ae(t,Xe(e,0,-1)),i=null==t?_:t[Di(e)]),i=i===_?n:i),Ir(i)?i.call(t):i}function io(t,e,n){if(null==t)return t;var i=e+"";e=null!=t[i]||ti(e,t)?[i]:hi(e);for(var r=-1,o=e.length,a=o-1,s=t;null!=s&&++r<o;){var l=e[r];Ar(s)&&(r==a?s[l]=n:null==s[l]&&(s[l]=Jn(e[r+1])?[]:{})),s=s[l]}return t}function ro(t,e,n,i){var r=Es(t)||Br(t);if(e=jn(e,i,4),null==n)if(r||Ar(t)){var o=t.constructor;n=r?Es(t)?new o:[]:Wa(Ir(o)?o.prototype:_)}else n={};return(r?ie:$e)(t,function(t,i,r){return e(n,t,i,r)}),n}function oo(t){return tn(t,Hs(t))}function ao(t){return tn(t,to(t))}function so(t,e,n){return e=+e||0,n===_?(n=e,e=0):n=+n||0,t>=Sa(e,n)&&t<_a(e,n)}function lo(t,e,n){n&&Qn(t,e,n)&&(e=n=_);var i=null==t,r=null==e;if(null==n&&(r&&"boolean"==typeof t?(n=t,t=1):"boolean"==typeof e&&(n=e,r=!0)),i&&r&&(e=1,r=!1),t=+t||0,r?(e=t,t=0):e=+e||0,n||t%1||e%1){var o=Da();return Sa(t+o*(e-t+la("1e-"+((o+"").length-1))),e)}return ze(t,e)}function uo(t){return t=r(t),t&&t.charAt(0).toUpperCase()+t.slice(1)}function co(t){return t=r(t),t&&t.replace(It,u).replace(Dt,"")}function ho(t,e,n){t=r(t),e+="";var i=t.length;return n=n===_?i:Sa(0>n?0:+n||0,i),n-=e.length,n>=0&&t.indexOf(e,n)==n}function po(t){return t=r(t),t&&vt.test(t)?t.replace(gt,c):t}function fo(t){return t=r(t),t&&Ot.test(t)?t.replace(Ct,d):t||"(?:)"}function go(t,e,n){t=r(t),e=+e;var i=t.length;if(i>=e||!wa(e))return t;var o=(e-i)/2,a=ya(o),s=ma(o);return n=In("",s,n),n.slice(0,a)+t+n}function mo(t,e,n){return(n?Qn(t,e,n):null==e)?e=0:e&&(e=+e),t=wo(t),Oa(t,e||(Pt.test(t)?16:10))}function vo(t,e){var n="";if(t=r(t),e=+e,1>e||!t||!wa(e))return n;do e%2&&(n+=t),e=ya(e/2),t+=t;while(e);return n}function yo(t,e,n){return t=r(t),n=null==n?0:Sa(0>n?0:+n||0,t.length),t.lastIndexOf(e,n)==n}function bo(t,e,n){var i=X.templateSettings;n&&Qn(t,e,n)&&(e=n=_),t=r(t),e=me(ve({},n||e),i,ge);var o,a,s=me(ve({},e.imports),i.imports,ge),l=Hs(s),u=tn(s,l),c=0,d=e.interpolate||At,p="__p += '",f=Xo((e.escape||At).source+"|"+d.source+"|"+(d===wt?Tt:At).source+"|"+(e.evaluate||At).source+"|$","g"),g="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++Lt+"]")+"\n";t.replace(f,function(e,n,i,r,s,l){return i||(i=r),p+=t.slice(c,l).replace(Wt,h),n&&(o=!0,p+="' +\n__e("+n+") +\n'"),s&&(a=!0,p+="';\n"+s+";\n__p += '"),i&&(p+="' +\n((__t = ("+i+")) == null ? '' : __t) +\n'"),c=l+e.length,e}),p+="';\n";var m=e.variable;m||(p="with (obj) {\n"+p+"\n}\n"),p=(a?p.replace(dt,""):p).replace(ht,"$1").replace(pt,"$1;"),p="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var v=Zs(function(){return Yo(l,g+"return "+p).apply(_,u)});if(v.source=p,$r(v))throw v;return v}function wo(t,e,n){var i=t;return(t=r(t))?(n?Qn(i,e,n):null==e)?t.slice(y(t),b(t)+1):(e+="",t.slice(o(t,e),a(t,e)+1)):t}function xo(t,e,n){var i=t;return t=r(t),t?(n?Qn(i,e,n):null==e)?t.slice(y(t)):t.slice(o(t,e+"")):t}function _o(t,e,n){var i=t;return t=r(t),t?(n?Qn(i,e,n):null==e)?t.slice(0,b(t)+1):t.slice(0,a(t,e+"")+1):t}function So(t,e,n){n&&Qn(t,e,n)&&(e=_);var i=I,o=A;if(null!=e)if(Ar(e)){var a="separator"in e?e.separator:a;i="length"in e?+e.length||0:i,o="omission"in e?r(e.omission):o}else i=+e||0;if(t=r(t),i>=t.length)return t;var s=i-o.length;if(1>s)return o;var l=t.slice(0,s);if(null==a)return l+o;if(jr(a)){if(t.slice(s).search(a)){var u,c,d=t.slice(0,s);for(a.global||(a=Xo(a.source,(Et.exec(a)||"")+"g")),a.lastIndex=0;u=a.exec(d);)c=u.index;l=l.slice(0,null==c?s:c)}}else if(t.indexOf(a,s)!=s){var h=l.lastIndexOf(a);h>-1&&(l=l.slice(0,h))}return l+o}function Co(t){return t=r(t),t&&mt.test(t)?t.replace(ft,w):t}function Oo(t,e,n){return n&&Qn(t,e,n)&&(e=_),t=r(t),t.match(e||Nt)||[]}function Do(t,e,n){return n&&Qn(t,e,n)&&(e=_),f(t)?Eo(t):we(t,e)}function ko(t){return function(){return t}}function To(t){return t}function Eo(t){return Re(xe(t,!0))}function Po(t,e){return He(t,xe(e,!0))}function $o(t,e,n){if(null==n){var i=Ar(e),r=i?Hs(e):_,o=r&&r.length?Ie(e,r):_;(o?o.length:i)||(o=!1,n=e,e=t,t=this)}o||(o=Ie(e,Hs(e)));var a=!0,s=-1,l=Ir(t),u=o.length;n===!1?a=!1:Ar(n)&&"chain"in n&&(a=n.chain);for(;++s<u;){var c=o[s],d=e[c];t[c]=d,l&&(t.prototype[c]=function(e){return function(){var n=this.__chain__;if(a||n){var i=t(this.__wrapped__),r=i.__actions__=ne(this.__actions__);return r.push({func:e,args:arguments,thisArg:t}),i.__chain__=n,i}return e.apply(t,ue([this.value()],arguments))}}(d))}return t}function Mo(){return Qt._=ra,this}function Io(){}function Ao(t){return ti(t)?Be(t):Ye(t)}function Wo(t){return function(e){return Ae(t,hi(e),e+"")}}function No(t,e,n){n&&Qn(t,e,n)&&(e=n=_),t=+t||0,n=null==n?1:+n||0,null==e?(e=t,t=0):e=+e||0;for(var i=-1,r=_a(ma((e-t)/(n||1)),0),o=jo(r);++i<r;)o[i]=t,t+=n;return o}function Fo(t,e,n){if(t=ya(t),1>t||!wa(t))return[];var i=-1,r=jo(Sa(t,Ea));for(e=an(e,n,1);++i<t;)Ea>i?r[i]=e(i):e(i);return r}function Lo(t){var e=++na;return r(t)+e}function Ro(t,e){return(+t||0)+(+e||0)}function Ho(t,e,n){return n&&Qn(t,e,n)&&(e=_),e=jn(e,n,3),1==e.length?pe(Es(t)?t:ci(t),e):Je(t,e)}g=g?te.defaults(Qt.Object(),g,te.pick(Qt,Ft)):Qt;var jo=g.Array,Uo=g.Date,Bo=g.Error,Yo=g.Function,qo=g.Math,zo=g.Number,Vo=g.Object,Xo=g.RegExp,Go=g.String,Ko=g.TypeError,Zo=jo.prototype,Jo=Vo.prototype,Qo=Go.prototype,ta=Yo.prototype.toString,ea=Jo.hasOwnProperty,na=0,ia=Jo.toString,ra=Qt._,oa=Xo("^"+ta.call(ea).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),aa=g.ArrayBuffer,sa=g.clearTimeout,la=g.parseFloat,ua=qo.pow,ca=Jo.propertyIsEnumerable,da=qn(g,"Set"),ha=g.setTimeout,pa=Zo.splice,fa=g.Uint8Array,ga=qn(g,"WeakMap"),ma=qo.ceil,va=qn(Vo,"create"),ya=qo.floor,ba=qn(jo,"isArray"),wa=g.isFinite,xa=qn(Vo,"keys"),_a=qo.max,Sa=qo.min,Ca=qn(Uo,"now"),Oa=g.parseInt,Da=qo.random,ka=zo.NEGATIVE_INFINITY,Ta=zo.POSITIVE_INFINITY,Ea=4294967295,Pa=Ea-1,$a=Ea>>>1,Ma=9007199254740991,Ia=ga&&new ga,Aa={};X.support={};X.templateSettings={escape:yt,evaluate:bt,interpolate:wt,variable:"",imports:{_:X}};var Wa=function(){function t(){}return function(e){if(Ar(e)){t.prototype=e;var n=new t;t.prototype=_}return n||{}}}(),Na=hn($e),Fa=hn(Me,!0),La=pn(),Ra=pn(!0),Ha=Ia?function(t,e){return Ia.set(t,e),t}:To,ja=Ia?function(t){return Ia.get(t)}:Io,Ua=Be("length"),Ba=function(){var t=0,e=0;return function(n,i){var r=gs(),o=N-(r-e);if(e=r,o>0){if(++t>=W)return n}else t=0;return Ha(n,i)}}(),Ya=vr(function(t,e){return f(t)&&Zn(t)?Se(t,Ee(e,!1,!0)):[]}),qa=_n(),za=_n(!0),Va=vr(function(t){for(var e=t.length,i=e,r=jo(d),o=Bn(),a=o===n,s=[];i--;){var l=t[i]=Zn(l=t[i])?l:[];r[i]=a&&l.length>=120?gn(i&&l):null}var u=t[0],c=-1,d=u?u.length:0,h=r[0];t:for(;++c<d;)if(l=u[c],(h?Zt(h,l):o(s,l,0))<0){for(var i=e;--i;){var p=r[i];if((p?Zt(p,l):o(t[i],l,0))<0)continue t}h&&h.push(l),s.push(l)}return s}),Xa=vr(function(e,n){n=Ee(n);var i=ye(e,n);return qe(e,n.sort(t)),i}),Ga=Nn(),Ka=Nn(!0),Za=vr(function(t){return Qe(Ee(t,!1,!0))}),Ja=vr(function(t,e){return Zn(t)?Se(t,e):[]}),Qa=vr(Fi),ts=vr(function(t){var e=t.length,n=e>2?t[e-2]:_,i=e>1?t[e-1]:_;return e>2&&"function"==typeof n?e-=2:(n=e>1&&"function"==typeof i?(--e,i):_,i=_),t.length=e,Li(t,n,i)}),es=vr(function(t){return t=Ee(t),this.thru(function(e){return ee(Es(e)?e:[di(e)],t)})}),ns=vr(function(t,e){return ye(t,Ee(e))}),is=cn(function(t,e,n){ea.call(t,n)?++t[n]:t[n]=1}),rs=xn(Na),os=xn(Fa,!0),as=On(ie,Na),ss=On(re,Fa),ls=cn(function(t,e,n){ea.call(t,n)?t[n].push(e):t[n]=[e]}),us=cn(function(t,e,n){t[n]=e}),cs=vr(function(t,e,n){var i=-1,r="function"==typeof e,o=ti(e),a=Zn(t)?jo(t.length):[];return Na(t,function(t){var s=r?e:o&&null!=t?t[e]:_;a[++i]=s?s.apply(t,n):Kn(t,e,n)}),a}),ds=cn(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]}),hs=$n(ce,Na),ps=$n(de,Fa),fs=vr(function(t,e){if(null==t)return[];var n=e[2];return n&&Qn(e[0],e[1],n)&&(e.length=1),Ze(t,Ee(e),[])}),gs=Ca||function(){return(new Uo).getTime()},ms=vr(function(t,e,n){var i=C;if(n.length){var r=m(n,ms.placeholder);i|=E}return Fn(t,i,e,n,r)}),vs=vr(function(t,e){e=e.length?Ee(e):Kr(t);for(var n=-1,i=e.length;++n<i;){var r=e[n];t[r]=Fn(t[r],C,t)}return t}),ys=vr(function(t,e,n){var i=C|O;if(n.length){var r=m(n,ys.placeholder);i|=E}return Fn(e,i,t,n,r)}),bs=yn(k),ws=yn(T),xs=vr(function(t,e){return _e(t,1,e)}),_s=vr(function(t,e,n){return _e(t,e,n)}),Ss=Cn(),Cs=Cn(!0),Os=vr(function(t,e){if(e=Ee(e),"function"!=typeof t||!oe(e,i))throw new Ko(H);var n=e.length;return vr(function(i){for(var r=Sa(i.length,n);r--;)i[r]=e[r](i[r]);return t.apply(this,i)})}),Ds=Pn(E),ks=Pn(P),Ts=vr(function(t,e){return Fn(t,M,_,_,_,Ee(e))}),Es=ba||function(t){return f(t)&&ni(t.length)&&ia.call(t)==B},Ps=dn(je),$s=dn(function(t,e,n){return n?me(t,e,n):ve(t,e)}),Ms=bn($s,fe),Is=bn(Ps,oi),As=Sn($e),Ws=Sn(Me),Ns=Dn(La),Fs=Dn(Ra),Ls=kn($e),Rs=kn(Me),Hs=xa?function(t){var e=null==t?_:t.constructor;return"function"==typeof e&&e.prototype===t||"function"!=typeof t&&Zn(t)?ui(t):Ar(t)?xa(t):[]}:ui,js=Tn(!0),Us=Tn(),Bs=vr(function(t,e){if(null==t)return{};if("function"!=typeof e[0]){var e=le(Ee(e),Go);return ai(t,Se(to(t),e))}var n=an(e[0],e[1],3);return si(t,function(t,e,i){return!n(t,e,i)})}),Ys=vr(function(t,e){return null==t?{}:"function"==typeof e[0]?si(t,an(e[0],e[1],3)):ai(t,Ee(e))}),qs=mn(function(t,e,n){return e=e.toLowerCase(),t+(n?e.charAt(0).toUpperCase()+e.slice(1):e)}),zs=mn(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),Vs=En(),Xs=En(!0),Gs=mn(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}),Ks=mn(function(t,e,n){return t+(n?" ":"")+(e.charAt(0).toUpperCase()+e.slice(1))}),Zs=vr(function(t,e){try{return t.apply(_,e)}catch(n){return $r(n)?n:new Bo(n)}}),Js=vr(function(t,e){return function(n){return Kn(n,t,e)}}),Qs=vr(function(t,e){return function(n){return Kn(t,n,e)}}),tl=Wn("ceil"),el=Wn("floor"),nl=wn(Sr,ka),il=wn(qr,Ta),rl=Wn("round");return X.prototype=J.prototype,tt.prototype=Wa(J.prototype),tt.prototype.constructor=tt,jt.prototype=Wa(J.prototype),jt.prototype.constructor=jt,qt.prototype["delete"]=zt,qt.prototype.get=Vt,qt.prototype.has=Xt,qt.prototype.set=Gt,Kt.prototype.push=Jt,fr.Cache=qt,X.after=cr,X.ary=dr,X.assign=$s,X.at=ns,X.before=hr,X.bind=ms,X.bindAll=vs,X.bindKey=ys,X.callback=Do,X.chain=ji,X.chunk=fi,X.compact=gi,X.constant=ko,X.countBy=is,X.create=Gr,X.curry=bs,X.curryRight=ws,X.debounce=pr,X.defaults=Ms,X.defaultsDeep=Is,X.defer=xs,X.delay=_s,X.difference=Ya,X.drop=mi,X.dropRight=vi,X.dropRightWhile=yi,X.dropWhile=bi,X.fill=wi,X.filter=Zi,X.flatten=_i,X.flattenDeep=Si,X.flow=Ss,X.flowRight=Cs,X.forEach=as,X.forEachRight=ss,X.forIn=Ns,X.forInRight=Fs,X.forOwn=Ls,X.forOwnRight=Rs,X.functions=Kr,X.groupBy=ls,X.indexBy=us,X.initial=Oi,X.intersection=Va,X.invert=Qr,X.invoke=cs,X.keys=Hs,X.keysIn=to,X.map=tr,X.mapKeys=js,X.mapValues=Us,X.matches=Eo,X.matchesProperty=Po,X.memoize=fr,X.merge=Ps,X.method=Js,X.methodOf=Qs,X.mixin=$o,X.modArgs=Os,X.negate=gr,X.omit=Bs,X.once=mr,X.pairs=eo,X.partial=Ds,X.partialRight=ks,X.partition=ds,X.pick=Ys,X.pluck=er,X.property=Ao,X.propertyOf=Wo,X.pull=Ti,X.pullAt=Xa,X.range=No,X.rearg=Ts,X.reject=nr,X.remove=Ei,X.rest=Pi,X.restParam=vr,X.set=io,X.shuffle=rr,X.slice=$i,X.sortBy=sr,X.sortByAll=fs,X.sortByOrder=lr,X.spread=yr,X.take=Mi,X.takeRight=Ii,X.takeRightWhile=Ai,X.takeWhile=Wi,X.tap=Ui,X.throttle=br,X.thru=Bi,X.times=Fo,X.toArray=Vr,X.toPlainObject=Xr,X.transform=ro,X.union=Za,X.uniq=Ni,X.unzip=Fi,X.unzipWith=Li,X.values=oo,X.valuesIn=ao,X.where=ur,X.without=Ja,X.wrap=wr,X.xor=Ri,X.zip=Qa,X.zipObject=Hi,X.zipWith=ts,X.backflow=Cs,X.collect=tr,X.compose=Cs,X.each=as,X.eachRight=ss,X.extend=$s,X.iteratee=Do,X.methods=Kr,X.object=Hi,X.select=Zi,X.tail=Pi,X.unique=Ni,$o(X,X),X.add=Ro,X.attempt=Zs,X.camelCase=qs,X.capitalize=uo,X.ceil=tl,X.clone=xr,X.cloneDeep=_r,X.deburr=co,X.endsWith=ho,X.escape=po,X.escapeRegExp=fo,X.every=Ki,X.find=rs,X.findIndex=qa,X.findKey=As,X.findLast=os,X.findLastIndex=za,X.findLastKey=Ws,X.findWhere=Ji,X.first=xi,X.floor=el,X.get=Zr,X.gt=Sr,X.gte=Cr,X.has=Jr,X.identity=To,X.includes=Qi,X.indexOf=Ci,X.inRange=so,X.isArguments=Or,X.isArray=Es,X.isBoolean=Dr,X.isDate=kr,X.isElement=Tr,X.isEmpty=Er,X.isEqual=Pr,X.isError=$r,X.isFinite=Mr,X.isFunction=Ir,X.isMatch=Wr,X.isNaN=Nr,X.isNative=Fr,X.isNull=Lr,X.isNumber=Rr,X.isObject=Ar,X.isPlainObject=Hr,X.isRegExp=jr,X.isString=Ur,X.isTypedArray=Br,X.isUndefined=Yr,X.kebabCase=zs,X.last=Di,X.lastIndexOf=ki,X.lt=qr,X.lte=zr,X.max=nl,X.min=il,X.noConflict=Mo,X.noop=Io,X.now=gs,X.pad=go,X.padLeft=Vs,X.padRight=Xs,X.parseInt=mo,X.random=lo,X.reduce=hs,X.reduceRight=ps,X.repeat=vo,X.result=no,X.round=rl,X.runInContext=x,X.size=or,X.snakeCase=Gs,X.some=ar,X.sortedIndex=Ga,X.sortedLastIndex=Ka,X.startCase=Ks,X.startsWith=yo,X.sum=Ho,X.template=bo,X.trim=wo,X.trimLeft=xo,X.trimRight=_o,X.trunc=So,X.unescape=Co,X.uniqueId=Lo,X.words=Oo,X.all=Ki,X.any=ar,X.contains=Qi,X.eq=Pr,X.detect=rs,X.foldl=hs,X.foldr=ps,X.head=xi,X.include=Qi,X.inject=hs,$o(X,function(){var t={};return $e(X,function(e,n){X.prototype[n]||(t[n]=e)}),t}(),!1),X.sample=ir,X.prototype.sample=function(t){return this.__chain__||null!=t?this.thru(function(e){return ir(e,t)}):ir(this.value())},X.VERSION=S,ie(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){X[t].placeholder=X}),ie(["drop","take"],function(t,e){jt.prototype[t]=function(n){var i=this.__filtered__;if(i&&!e)return new jt(this);n=null==n?1:_a(ya(n)||0,0);var r=this.clone();return i?r.__takeCount__=Sa(r.__takeCount__,n):r.__views__.push({size:n,type:t+(r.__dir__<0?"Right":"")}),r},jt.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),ie(["filter","map","takeWhile"],function(t,e){var n=e+1,i=n!=R;jt.prototype[t]=function(t,e){var r=this.clone();return r.__iteratees__.push({iteratee:jn(t,e,1),type:n}),r.__filtered__=r.__filtered__||i,r}}),ie(["first","last"],function(t,e){var n="take"+(e?"Right":"");jt.prototype[t]=function(){return this[n](1).value()[0]}}),ie(["initial","rest"],function(t,e){var n="drop"+(e?"":"Right");jt.prototype[t]=function(){return this.__filtered__?new jt(this):this[n](1)}}),ie(["pluck","where"],function(t,e){var n=e?"filter":"map",i=e?Re:Ao;jt.prototype[t]=function(t){return this[n](i(t))}}),jt.prototype.compact=function(){return this.filter(To)},jt.prototype.reject=function(t,e){return t=jn(t,e,1),this.filter(function(e){return!t(e)})},jt.prototype.slice=function(t,e){t=null==t?0:+t||0;var n=this;return n.__filtered__&&(t>0||0>e)?new jt(n):(0>t?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==_&&(e=+e||0,n=0>e?n.dropRight(-e):n.take(e-t)),n)},jt.prototype.takeRightWhile=function(t,e){return this.reverse().takeWhile(t,e).reverse()},jt.prototype.toArray=function(){return this.take(Ta)},$e(jt.prototype,function(t,e){var n=/^(?:filter|map|reject)|While$/.test(e),i=/^(?:first|last)$/.test(e),r=X[i?"take"+("last"==e?"Right":""):e];r&&(X.prototype[e]=function(){var e=i?[1]:arguments,o=this.__chain__,a=this.__wrapped__,s=!!this.__actions__.length,l=a instanceof jt,u=e[0],c=l||Es(a);c&&n&&"function"==typeof u&&1!=u.length&&(l=c=!1);var d=function(t){return i&&o?r(t,1)[0]:r.apply(_,ue([t],e))},h={func:Bi,args:[d],thisArg:_},p=l&&!s;if(i&&!o)return p?(a=a.clone(),a.__actions__.push(h),t.call(a)):r.call(_,this.value())[0];if(!i&&c){a=p?a:new jt(this);var f=t.apply(a,e);return f.__actions__.push(h),new tt(f,o)}return this.thru(d)})}),ie(["join","pop","push","replace","shift","sort","splice","split","unshift"],function(t){var e=(/^(?:replace|split)$/.test(t)?Qo:Zo)[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",i=/^(?:join|pop|replace|shift)$/.test(t);X.prototype[t]=function(){var t=arguments;return i&&!this.__chain__?e.apply(this.value(),t):this[n](function(n){return e.apply(n,t)})}}),$e(jt.prototype,function(t,e){var n=X[e];if(n){var i=n.name+"",r=Aa[i]||(Aa[i]=[]);r.push({name:e,func:n})}}),Aa[Mn(_,O).name]=[{name:"wrapper",func:_}],jt.prototype.clone=Ut,jt.prototype.reverse=Bt,jt.prototype.value=Yt,X.prototype.chain=Yi,X.prototype.commit=qi,X.prototype.concat=es,X.prototype.plant=zi,X.prototype.reverse=Vi,X.prototype.toString=Xi,X.prototype.run=X.prototype.toJSON=X.prototype.valueOf=X.prototype.value=Gi,X.prototype.collect=X.prototype.map,X.prototype.head=X.prototype.first,X.prototype.select=X.prototype.filter,X.prototype.tail=X.prototype.rest,X}var _,S="3.10.1",C=1,O=2,D=4,k=8,T=16,E=32,P=64,$=128,M=256,I=30,A="...",W=150,N=16,F=200,L=1,R=2,H="Expected a function",j="__lodash_placeholder__",U="[object Arguments]",B="[object Array]",Y="[object Boolean]",q="[object Date]",z="[object Error]",V="[object Function]",X="[object Map]",G="[object Number]",K="[object Object]",Z="[object RegExp]",J="[object Set]",Q="[object String]",tt="[object WeakMap]",et="[object ArrayBuffer]",nt="[object Float32Array]",it="[object Float64Array]",rt="[object Int8Array]",ot="[object Int16Array]",at="[object Int32Array]",st="[object Uint8Array]",lt="[object Uint8ClampedArray]",ut="[object Uint16Array]",ct="[object Uint32Array]",dt=/\b__p \+= '';/g,ht=/\b(__p \+=) '' \+/g,pt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,ft=/&(?:amp|lt|gt|quot|#39|#96);/g,gt=/[&<>"'`]/g,mt=RegExp(ft.source),vt=RegExp(gt.source),yt=/<%-([\s\S]+?)%>/g,bt=/<%([\s\S]+?)%>/g,wt=/<%=([\s\S]+?)%>/g,xt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,_t=/^\w*$/,St=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g,Ct=/^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,Ot=RegExp(Ct.source),Dt=/[\u0300-\u036f\ufe20-\ufe23]/g,kt=/\\(\\)?/g,Tt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Et=/\w*$/,Pt=/^0[xX]/,$t=/^\[object .+?Constructor\]$/,Mt=/^\d+$/,It=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,At=/($^)/,Wt=/['\n\r\u2028\u2029\\]/g,Nt=function(){var t="[A-Z\\xc0-\\xd6\\xd8-\\xde]",e="[a-z\\xdf-\\xf6\\xf8-\\xff]+";return RegExp(t+"+(?="+t+e+")|"+t+"?"+e+"|"+t+"+|[0-9]+","g")}(),Ft=["Array","ArrayBuffer","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Math","Number","Object","RegExp","Set","String","_","clearTimeout","isFinite","parseFloat","parseInt","setTimeout","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap"],Lt=-1,Rt={};Rt[nt]=Rt[it]=Rt[rt]=Rt[ot]=Rt[at]=Rt[st]=Rt[lt]=Rt[ut]=Rt[ct]=!0,Rt[U]=Rt[B]=Rt[et]=Rt[Y]=Rt[q]=Rt[z]=Rt[V]=Rt[X]=Rt[G]=Rt[K]=Rt[Z]=Rt[J]=Rt[Q]=Rt[tt]=!1;var Ht={};Ht[U]=Ht[B]=Ht[et]=Ht[Y]=Ht[q]=Ht[nt]=Ht[it]=Ht[rt]=Ht[ot]=Ht[at]=Ht[G]=Ht[K]=Ht[Z]=Ht[Q]=Ht[st]=Ht[lt]=Ht[ut]=Ht[ct]=!0,Ht[z]=Ht[V]=Ht[X]=Ht[J]=Ht[tt]=!1;var jt={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss"},Ut={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},Bt={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},Yt={"function":!0,object:!0},qt={0:"x30",1:"x31",2:"x32",3:"x33",4:"x34",5:"x35",6:"x36",7:"x37",8:"x38",9:"x39",A:"x41",B:"x42",C:"x43",D:"x44",E:"x45",F:"x46",a:"x61",b:"x62",c:"x63",d:"x64",e:"x65",f:"x66",n:"x6e",r:"x72",t:"x74",u:"x75",v:"x76",x:"x78"},zt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Vt=Yt[typeof exports]&&exports&&!exports.nodeType&&exports,Xt=Yt[typeof module]&&module&&!module.nodeType&&module,Gt=Vt&&Xt&&"object"==typeof global&&global&&global.Object&&global,Kt=Yt[typeof self]&&self&&self.Object&&self,Zt=Yt[typeof window]&&window&&window.Object&&window,Jt=Xt&&Xt.exports===Vt&&Vt,Qt=Gt||Zt!==(this&&this.window)&&Zt||Kt||this,te=x();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(Qt._=te,define(function(){return te})):Vt&&Xt?Jt?(Xt.exports=te)._=te:Vt._=te:Qt._=te}.call(this),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.moment=e()}(this,function(){"use strict";function t(){return An.apply(null,arguments)}function e(t){An=t}function n(t){return"[object Array]"===Object.prototype.toString.call(t)}function i(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function r(t,e){var n,i=[];for(n=0;n<t.length;++n)i.push(e(t[n],n));return i}function o(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function a(t,e){for(var n in e)o(e,n)&&(t[n]=e[n]);return o(e,"toString")&&(t.toString=e.toString),o(e,"valueOf")&&(t.valueOf=e.valueOf),t}function s(t,e,n,i){return Tt(t,e,n,i,!0).utc()}function l(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function u(t){return null==t._pf&&(t._pf=l()),t._pf}function c(t){if(null==t._isValid){var e=u(t);t._isValid=!(isNaN(t._d.getTime())||!(e.overflow<0)||e.empty||e.invalidMonth||e.invalidWeekday||e.nullInput||e.invalidFormat||e.userInvalidated),t._strict&&(t._isValid=t._isValid&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour)}return t._isValid}function d(t){var e=s(NaN);return null!=t?a(u(e),t):u(e).userInvalidated=!0,e}function h(t,e){var n,i,r;if("undefined"!=typeof e._isAMomentObject&&(t._isAMomentObject=e._isAMomentObject),"undefined"!=typeof e._i&&(t._i=e._i),"undefined"!=typeof e._f&&(t._f=e._f),"undefined"!=typeof e._l&&(t._l=e._l),"undefined"!=typeof e._strict&&(t._strict=e._strict),"undefined"!=typeof e._tzm&&(t._tzm=e._tzm),"undefined"!=typeof e._isUTC&&(t._isUTC=e._isUTC),"undefined"!=typeof e._offset&&(t._offset=e._offset),"undefined"!=typeof e._pf&&(t._pf=u(e)),"undefined"!=typeof e._locale&&(t._locale=e._locale),Nn.length>0)for(n in Nn)i=Nn[n],r=e[i],"undefined"!=typeof r&&(t[i]=r);return t}function p(e){h(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),Fn===!1&&(Fn=!0,t.updateOffset(this),Fn=!1)}function f(t){return t instanceof p||null!=t&&null!=t._isAMomentObject}function g(t){return 0>t?Math.ceil(t):Math.floor(t)}function m(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=g(e)),n}function v(t,e,n){var i,r=Math.min(t.length,e.length),o=Math.abs(t.length-e.length),a=0;for(i=0;r>i;i++)(n&&t[i]!==e[i]||!n&&m(t[i])!==m(e[i]))&&a++;return a+o}function y(){}function b(t){return t?t.toLowerCase().replace("_","-"):t}function w(t){for(var e,n,i,r,o=0;o<t.length;){for(r=b(t[o]).split("-"),e=r.length,n=b(t[o+1]),n=n?n.split("-"):null;e>0;){if(i=x(r.slice(0,e).join("-")))return i;if(n&&n.length>=e&&v(r,n,!0)>=e-1)break;e--}o++}return null}function x(t){var e=null;if(!Ln[t]&&"undefined"!=typeof module&&module&&module.exports)try{e=Wn._abbr,require("./locale/"+t),_(e)}catch(n){}return Ln[t]}function _(t,e){var n;return t&&(n="undefined"==typeof e?C(t):S(t,e),n&&(Wn=n)),Wn._abbr}function S(t,e){return null!==e?(e.abbr=t,Ln[t]=Ln[t]||new y,Ln[t].set(e),_(t),Ln[t]):(delete Ln[t],null)}function C(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return Wn;if(!n(t)){if(e=x(t))return e;t=[t]}return w(t)}function O(t,e){var n=t.toLowerCase();Rn[n]=Rn[n+"s"]=Rn[e]=t}function D(t){return"string"==typeof t?Rn[t]||Rn[t.toLowerCase()]:void 0}function k(t){var e,n,i={};for(n in t)o(t,n)&&(e=D(n),e&&(i[e]=t[n]));return i}function T(e,n){return function(i){return null!=i?(P(this,e,i),t.updateOffset(this,n),this):E(this,e)}}function E(t,e){return t._d["get"+(t._isUTC?"UTC":"")+e]()}function P(t,e,n){return t._d["set"+(t._isUTC?"UTC":"")+e](n);
}function $(t,e){var n;if("object"==typeof t)for(n in t)this.set(n,t[n]);else if(t=D(t),"function"==typeof this[t])return this[t](e);return this}function M(t,e,n){var i=""+Math.abs(t),r=e-i.length,o=t>=0;return(o?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+i}function I(t,e,n,i){var r=i;"string"==typeof i&&(r=function(){return this[i]()}),t&&(Bn[t]=r),e&&(Bn[e[0]]=function(){return M(r.apply(this,arguments),e[1],e[2])}),n&&(Bn[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),t)})}function A(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function W(t){var e,n,i=t.match(Hn);for(e=0,n=i.length;n>e;e++)Bn[i[e]]?i[e]=Bn[i[e]]:i[e]=A(i[e]);return function(r){var o="";for(e=0;n>e;e++)o+=i[e]instanceof Function?i[e].call(r,t):i[e];return o}}function N(t,e){return t.isValid()?(e=F(e,t.localeData()),Un[e]=Un[e]||W(e),Un[e](t)):t.localeData().invalidDate()}function F(t,e){function n(t){return e.longDateFormat(t)||t}var i=5;for(jn.lastIndex=0;i>=0&&jn.test(t);)t=t.replace(jn,n),jn.lastIndex=0,i-=1;return t}function L(t){return"function"==typeof t&&"[object Function]"===Object.prototype.toString.call(t)}function R(t,e,n){ri[t]=L(e)?e:function(t){return t&&n?n:e}}function H(t,e){return o(ri,t)?ri[t](e._strict,e._locale):new RegExp(j(t))}function j(t){return t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,i,r){return e||n||i||r}).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function U(t,e){var n,i=e;for("string"==typeof t&&(t=[t]),"number"==typeof e&&(i=function(t,n){n[e]=m(t)}),n=0;n<t.length;n++)oi[t[n]]=i}function B(t,e){U(t,function(t,n,i,r){i._w=i._w||{},e(t,i._w,i,r)})}function Y(t,e,n){null!=e&&o(oi,t)&&oi[t](e,n._a,n,t)}function q(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function z(t){return this._months[t.month()]}function V(t){return this._monthsShort[t.month()]}function X(t,e,n){var i,r,o;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;12>i;i++){if(r=s([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(o="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[i]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[i].test(t))return i;if(n&&"MMM"===e&&this._shortMonthsParse[i].test(t))return i;if(!n&&this._monthsParse[i].test(t))return i}}function G(t,e){var n;return"string"==typeof e&&(e=t.localeData().monthsParse(e),"number"!=typeof e)?t:(n=Math.min(t.date(),q(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t)}function K(e){return null!=e?(G(this,e),t.updateOffset(this,!0),this):E(this,"Month")}function Z(){return q(this.year(),this.month())}function J(t){var e,n=t._a;return n&&-2===u(t).overflow&&(e=n[si]<0||n[si]>11?si:n[li]<1||n[li]>q(n[ai],n[si])?li:n[ui]<0||n[ui]>24||24===n[ui]&&(0!==n[ci]||0!==n[di]||0!==n[hi])?ui:n[ci]<0||n[ci]>59?ci:n[di]<0||n[di]>59?di:n[hi]<0||n[hi]>999?hi:-1,u(t)._overflowDayOfYear&&(ai>e||e>li)&&(e=li),u(t).overflow=e),t}function Q(e){t.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function tt(t,e){var n=!0;return a(function(){return n&&(Q(t+"\n"+(new Error).stack),n=!1),e.apply(this,arguments)},e)}function et(t,e){gi[t]||(Q(e),gi[t]=!0)}function nt(t){var e,n,i=t._i,r=mi.exec(i);if(r){for(u(t).iso=!0,e=0,n=vi.length;n>e;e++)if(vi[e][1].exec(i)){t._f=vi[e][0];break}for(e=0,n=yi.length;n>e;e++)if(yi[e][1].exec(i)){t._f+=(r[6]||" ")+yi[e][0];break}i.match(ei)&&(t._f+="Z"),xt(t)}else t._isValid=!1}function it(e){var n=bi.exec(e._i);return null!==n?void(e._d=new Date(+n[1])):(nt(e),void(e._isValid===!1&&(delete e._isValid,t.createFromInputFallback(e))))}function rt(t,e,n,i,r,o,a){var s=new Date(t,e,n,i,r,o,a);return 1970>t&&s.setFullYear(t),s}function ot(t){var e=new Date(Date.UTC.apply(null,arguments));return 1970>t&&e.setUTCFullYear(t),e}function at(t){return st(t)?366:365}function st(t){return t%4===0&&t%100!==0||t%400===0}function lt(){return st(this.year())}function ut(t,e,n){var i,r=n-e,o=n-t.day();return o>r&&(o-=7),r-7>o&&(o+=7),i=Et(t).add(o,"d"),{week:Math.ceil(i.dayOfYear()/7),year:i.year()}}function ct(t){return ut(t,this._week.dow,this._week.doy).week}function dt(){return this._week.dow}function ht(){return this._week.doy}function pt(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")}function ft(t){var e=ut(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")}function gt(t,e,n,i,r){var o,a=6+r-i,s=ot(t,0,1+a),l=s.getUTCDay();return r>l&&(l+=7),n=null!=n?1*n:r,o=1+a+7*(e-1)-l+n,{year:o>0?t:t-1,dayOfYear:o>0?o:at(t-1)+o}}function mt(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")}function vt(t,e,n){return null!=t?t:null!=e?e:n}function yt(t){var e=new Date;return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}function bt(t){var e,n,i,r,o=[];if(!t._d){for(i=yt(t),t._w&&null==t._a[li]&&null==t._a[si]&&wt(t),t._dayOfYear&&(r=vt(t._a[ai],i[ai]),t._dayOfYear>at(r)&&(u(t)._overflowDayOfYear=!0),n=ot(r,0,t._dayOfYear),t._a[si]=n.getUTCMonth(),t._a[li]=n.getUTCDate()),e=0;3>e&&null==t._a[e];++e)t._a[e]=o[e]=i[e];for(;7>e;e++)t._a[e]=o[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[ui]&&0===t._a[ci]&&0===t._a[di]&&0===t._a[hi]&&(t._nextDay=!0,t._a[ui]=0),t._d=(t._useUTC?ot:rt).apply(null,o),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[ui]=24)}}function wt(t){var e,n,i,r,o,a,s;e=t._w,null!=e.GG||null!=e.W||null!=e.E?(o=1,a=4,n=vt(e.GG,t._a[ai],ut(Et(),1,4).year),i=vt(e.W,1),r=vt(e.E,1)):(o=t._locale._week.dow,a=t._locale._week.doy,n=vt(e.gg,t._a[ai],ut(Et(),o,a).year),i=vt(e.w,1),null!=e.d?(r=e.d,o>r&&++i):r=null!=e.e?e.e+o:o),s=gt(n,i,r,a,o),t._a[ai]=s.year,t._dayOfYear=s.dayOfYear}function xt(e){if(e._f===t.ISO_8601)return void nt(e);e._a=[],u(e).empty=!0;var n,i,r,o,a,s=""+e._i,l=s.length,c=0;for(r=F(e._f,e._locale).match(Hn)||[],n=0;n<r.length;n++)o=r[n],i=(s.match(H(o,e))||[])[0],i&&(a=s.substr(0,s.indexOf(i)),a.length>0&&u(e).unusedInput.push(a),s=s.slice(s.indexOf(i)+i.length),c+=i.length),Bn[o]?(i?u(e).empty=!1:u(e).unusedTokens.push(o),Y(o,i,e)):e._strict&&!i&&u(e).unusedTokens.push(o);u(e).charsLeftOver=l-c,s.length>0&&u(e).unusedInput.push(s),u(e).bigHour===!0&&e._a[ui]<=12&&e._a[ui]>0&&(u(e).bigHour=void 0),e._a[ui]=_t(e._locale,e._a[ui],e._meridiem),bt(e),J(e)}function _t(t,e,n){var i;return null==n?e:null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?(i=t.isPM(n),i&&12>e&&(e+=12),i||12!==e||(e=0),e):e}function St(t){var e,n,i,r,o;if(0===t._f.length)return u(t).invalidFormat=!0,void(t._d=new Date(NaN));for(r=0;r<t._f.length;r++)o=0,e=h({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[r],xt(e),c(e)&&(o+=u(e).charsLeftOver,o+=10*u(e).unusedTokens.length,u(e).score=o,(null==i||i>o)&&(i=o,n=e));a(t,n||e)}function Ct(t){if(!t._d){var e=k(t._i);t._a=[e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],bt(t)}}function Ot(t){var e=new p(J(Dt(t)));return e._nextDay&&(e.add(1,"d"),e._nextDay=void 0),e}function Dt(t){var e=t._i,r=t._f;return t._locale=t._locale||C(t._l),null===e||void 0===r&&""===e?d({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),f(e)?new p(J(e)):(n(r)?St(t):r?xt(t):i(e)?t._d=e:kt(t),t))}function kt(e){var o=e._i;void 0===o?e._d=new Date:i(o)?e._d=new Date(+o):"string"==typeof o?it(e):n(o)?(e._a=r(o.slice(0),function(t){return parseInt(t,10)}),bt(e)):"object"==typeof o?Ct(e):"number"==typeof o?e._d=new Date(o):t.createFromInputFallback(e)}function Tt(t,e,n,i,r){var o={};return"boolean"==typeof n&&(i=n,n=void 0),o._isAMomentObject=!0,o._useUTC=o._isUTC=r,o._l=n,o._i=t,o._f=e,o._strict=i,Ot(o)}function Et(t,e,n,i){return Tt(t,e,n,i,!1)}function Pt(t,e){var i,r;if(1===e.length&&n(e[0])&&(e=e[0]),!e.length)return Et();for(i=e[0],r=1;r<e.length;++r)(!e[r].isValid()||e[r][t](i))&&(i=e[r]);return i}function $t(){var t=[].slice.call(arguments,0);return Pt("isBefore",t)}function Mt(){var t=[].slice.call(arguments,0);return Pt("isAfter",t)}function It(t){var e=k(t),n=e.year||0,i=e.quarter||0,r=e.month||0,o=e.week||0,a=e.day||0,s=e.hour||0,l=e.minute||0,u=e.second||0,c=e.millisecond||0;this._milliseconds=+c+1e3*u+6e4*l+36e5*s,this._days=+a+7*o,this._months=+r+3*i+12*n,this._data={},this._locale=C(),this._bubble()}function At(t){return t instanceof It}function Wt(t,e){I(t,0,0,function(){var t=this.utcOffset(),n="+";return 0>t&&(t=-t,n="-"),n+M(~~(t/60),2)+e+M(~~t%60,2)})}function Nt(t){var e=(t||"").match(ei)||[],n=e[e.length-1]||[],i=(n+"").match(Ci)||["-",0,0],r=+(60*i[1])+m(i[2]);return"+"===i[0]?r:-r}function Ft(e,n){var r,o;return n._isUTC?(r=n.clone(),o=(f(e)||i(e)?+e:+Et(e))-+r,r._d.setTime(+r._d+o),t.updateOffset(r,!1),r):Et(e).local()}function Lt(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function Rt(e,n){var i,r=this._offset||0;return null!=e?("string"==typeof e&&(e=Nt(e)),Math.abs(e)<16&&(e=60*e),!this._isUTC&&n&&(i=Lt(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==e&&(!n||this._changeInProgress?ee(this,Kt(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,t.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?r:Lt(this)}function Ht(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}function jt(t){return this.utcOffset(0,t)}function Ut(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(Lt(this),"m")),this}function Bt(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Nt(this._i)),this}function Yt(t){return t=t?Et(t).utcOffset():0,(this.utcOffset()-t)%60===0}function qt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function zt(){if("undefined"!=typeof this._isDSTShifted)return this._isDSTShifted;var t={};if(h(t,this),t=Dt(t),t._a){var e=t._isUTC?s(t._a):Et(t._a);this._isDSTShifted=this.isValid()&&v(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Vt(){return!this._isUTC}function Xt(){return this._isUTC}function Gt(){return this._isUTC&&0===this._offset}function Kt(t,e){var n,i,r,a=t,s=null;return At(t)?a={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(a={},e?a[e]=t:a.milliseconds=t):(s=Oi.exec(t))?(n="-"===s[1]?-1:1,a={y:0,d:m(s[li])*n,h:m(s[ui])*n,m:m(s[ci])*n,s:m(s[di])*n,ms:m(s[hi])*n}):(s=Di.exec(t))?(n="-"===s[1]?-1:1,a={y:Zt(s[2],n),M:Zt(s[3],n),d:Zt(s[4],n),h:Zt(s[5],n),m:Zt(s[6],n),s:Zt(s[7],n),w:Zt(s[8],n)}):null==a?a={}:"object"==typeof a&&("from"in a||"to"in a)&&(r=Qt(Et(a.from),Et(a.to)),a={},a.ms=r.milliseconds,a.M=r.months),i=new It(a),At(t)&&o(t,"_locale")&&(i._locale=t._locale),i}function Zt(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Jt(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function Qt(t,e){var n;return e=Ft(e,t),t.isBefore(e)?n=Jt(t,e):(n=Jt(e,t),n.milliseconds=-n.milliseconds,n.months=-n.months),n}function te(t,e){return function(n,i){var r,o;return null===i||isNaN(+i)||(et(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),o=n,n=i,i=o),n="string"==typeof n?+n:n,r=Kt(n,i),ee(this,r,t),this}}function ee(e,n,i,r){var o=n._milliseconds,a=n._days,s=n._months;r=null==r?!0:r,o&&e._d.setTime(+e._d+o*i),a&&P(e,"Date",E(e,"Date")+a*i),s&&G(e,E(e,"Month")+s*i),r&&t.updateOffset(e,a||s)}function ne(t,e){var n=t||Et(),i=Ft(n,this).startOf("day"),r=this.diff(i,"days",!0),o=-6>r?"sameElse":-1>r?"lastWeek":0>r?"lastDay":1>r?"sameDay":2>r?"nextDay":7>r?"nextWeek":"sameElse";return this.format(e&&e[o]||this.localeData().calendar(o,this,Et(n)))}function ie(){return new p(this)}function re(t,e){var n;return e=D("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=f(t)?t:Et(t),+this>+t):(n=f(t)?+t:+Et(t),n<+this.clone().startOf(e))}function oe(t,e){var n;return e=D("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=f(t)?t:Et(t),+t>+this):(n=f(t)?+t:+Et(t),+this.clone().endOf(e)<n)}function ae(t,e,n){return this.isAfter(t,n)&&this.isBefore(e,n)}function se(t,e){var n;return e=D(e||"millisecond"),"millisecond"===e?(t=f(t)?t:Et(t),+this===+t):(n=+Et(t),+this.clone().startOf(e)<=n&&n<=+this.clone().endOf(e))}function le(t,e,n){var i,r,o=Ft(t,this),a=6e4*(o.utcOffset()-this.utcOffset());return e=D(e),"year"===e||"month"===e||"quarter"===e?(r=ue(this,o),"quarter"===e?r/=3:"year"===e&&(r/=12)):(i=this-o,r="second"===e?i/1e3:"minute"===e?i/6e4:"hour"===e?i/36e5:"day"===e?(i-a)/864e5:"week"===e?(i-a)/6048e5:i),n?r:g(r)}function ue(t,e){var n,i,r=12*(e.year()-t.year())+(e.month()-t.month()),o=t.clone().add(r,"months");return 0>e-o?(n=t.clone().add(r-1,"months"),i=(e-o)/(o-n)):(n=t.clone().add(r+1,"months"),i=(e-o)/(n-o)),-(r+i)}function ce(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function de(){var t=this.clone().utc();return 0<t.year()&&t.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():N(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):N(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function he(e){var n=N(this,e||t.defaultFormat);return this.localeData().postformat(n)}function pe(t,e){return this.isValid()?Kt({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function fe(t){return this.from(Et(),t)}function ge(t,e){return this.isValid()?Kt({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function me(t){return this.to(Et(),t)}function ve(t){var e;return void 0===t?this._locale._abbr:(e=C(t),null!=e&&(this._locale=e),this)}function ye(){return this._locale}function be(t){switch(t=D(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t&&this.weekday(0),"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this}function we(t){return t=D(t),void 0===t||"millisecond"===t?this:this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms")}function xe(){return+this._d-6e4*(this._offset||0)}function _e(){return Math.floor(+this/1e3)}function Se(){return this._offset?new Date(+this):this._d}function Ce(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]}function Oe(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}}function De(){return c(this)}function ke(){return a({},u(this))}function Te(){return u(this).overflow}function Ee(t,e){I(0,[t,t.length],0,e)}function Pe(t,e,n){return ut(Et([t,11,31+e-n]),e,n).week}function $e(t){var e=ut(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==t?e:this.add(t-e,"y")}function Me(t){var e=ut(this,1,4).year;return null==t?e:this.add(t-e,"y")}function Ie(){return Pe(this.year(),1,4)}function Ae(){var t=this.localeData()._week;return Pe(this.year(),t.dow,t.doy)}function We(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)}function Ne(t,e){return"string"!=typeof t?t:isNaN(t)?(t=e.weekdaysParse(t),"number"==typeof t?t:null):parseInt(t,10)}function Fe(t){return this._weekdays[t.day()]}function Le(t){return this._weekdaysShort[t.day()]}function Re(t){return this._weekdaysMin[t.day()]}function He(t){var e,n,i;for(this._weekdaysParse=this._weekdaysParse||[],e=0;7>e;e++)if(this._weekdaysParse[e]||(n=Et([2e3,1]).day(e),i="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[e]=new RegExp(i.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e}function je(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=Ne(t,this.localeData()),this.add(t-e,"d")):e}function Ue(t){var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")}function Be(t){return null==t?this.day()||7:this.day(this.day()%7?t:t-7)}function Ye(t,e){I(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function qe(t,e){return e._meridiemParse}function ze(t){return"p"===(t+"").toLowerCase().charAt(0)}function Ve(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"}function Xe(t,e){e[hi]=m(1e3*("0."+t))}function Ge(){return this._isUTC?"UTC":""}function Ke(){return this._isUTC?"Coordinated Universal Time":""}function Ze(t){return Et(1e3*t)}function Je(){return Et.apply(null,arguments).parseZone()}function Qe(t,e,n){var i=this._calendar[t];return"function"==typeof i?i.call(e,n):i}function tn(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t])}function en(){return this._invalidDate}function nn(t){return this._ordinal.replace("%d",t)}function rn(t){return t}function on(t,e,n,i){var r=this._relativeTime[n];return"function"==typeof r?r(t,e,n,i):r.replace(/%d/i,t)}function an(t,e){var n=this._relativeTime[t>0?"future":"past"];return"function"==typeof n?n(e):n.replace(/%s/i,e)}function sn(t){var e,n;for(n in t)e=t[n],"function"==typeof e?this[n]=e:this["_"+n]=e;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function ln(t,e,n,i){var r=C(),o=s().set(i,e);return r[n](o,t)}function un(t,e,n,i,r){if("number"==typeof t&&(e=t,t=void 0),t=t||"",null!=e)return ln(t,e,n,r);var o,a=[];for(o=0;i>o;o++)a[o]=ln(t,o,n,r);return a}function cn(t,e){return un(t,e,"months",12,"month")}function dn(t,e){return un(t,e,"monthsShort",12,"month")}function hn(t,e){return un(t,e,"weekdays",7,"day")}function pn(t,e){return un(t,e,"weekdaysShort",7,"day")}function fn(t,e){return un(t,e,"weekdaysMin",7,"day")}function gn(){var t=this._data;return this._milliseconds=Gi(this._milliseconds),this._days=Gi(this._days),this._months=Gi(this._months),t.milliseconds=Gi(t.milliseconds),t.seconds=Gi(t.seconds),t.minutes=Gi(t.minutes),t.hours=Gi(t.hours),t.months=Gi(t.months),t.years=Gi(t.years),this}function mn(t,e,n,i){var r=Kt(e,n);return t._milliseconds+=i*r._milliseconds,t._days+=i*r._days,t._months+=i*r._months,t._bubble()}function vn(t,e){return mn(this,t,e,1)}function yn(t,e){return mn(this,t,e,-1)}function bn(t){return 0>t?Math.floor(t):Math.ceil(t)}function wn(){var t,e,n,i,r,o=this._milliseconds,a=this._days,s=this._months,l=this._data;return o>=0&&a>=0&&s>=0||0>=o&&0>=a&&0>=s||(o+=864e5*bn(_n(s)+a),a=0,s=0),l.milliseconds=o%1e3,t=g(o/1e3),l.seconds=t%60,e=g(t/60),l.minutes=e%60,n=g(e/60),l.hours=n%24,a+=g(n/24),r=g(xn(a)),s+=r,a-=bn(_n(r)),i=g(s/12),s%=12,l.days=a,l.months=s,l.years=i,this}function xn(t){return 4800*t/146097}function _n(t){return 146097*t/4800}function Sn(t){var e,n,i=this._milliseconds;if(t=D(t),"month"===t||"year"===t)return e=this._days+i/864e5,n=this._months+xn(e),"month"===t?n:n/12;switch(e=this._days+Math.round(_n(this._months)),t){case"week":return e/7+i/6048e5;case"day":return e+i/864e5;case"hour":return 24*e+i/36e5;case"minute":return 1440*e+i/6e4;case"second":return 86400*e+i/1e3;case"millisecond":return Math.floor(864e5*e)+i;default:throw new Error("Unknown unit "+t)}}function Cn(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*m(this._months/12)}function On(t){return function(){return this.as(t)}}function Dn(t){return t=D(t),this[t+"s"]()}function kn(t){return function(){return this._data[t]}}function Tn(){return g(this.days()/7)}function En(t,e,n,i,r){return r.relativeTime(e||1,!!n,t,i)}function Pn(t,e,n){var i=Kt(t).abs(),r=dr(i.as("s")),o=dr(i.as("m")),a=dr(i.as("h")),s=dr(i.as("d")),l=dr(i.as("M")),u=dr(i.as("y")),c=r<hr.s&&["s",r]||1===o&&["m"]||o<hr.m&&["mm",o]||1===a&&["h"]||a<hr.h&&["hh",a]||1===s&&["d"]||s<hr.d&&["dd",s]||1===l&&["M"]||l<hr.M&&["MM",l]||1===u&&["y"]||["yy",u];return c[2]=e,c[3]=+t>0,c[4]=n,En.apply(null,c)}function $n(t,e){return void 0===hr[t]?!1:void 0===e?hr[t]:(hr[t]=e,!0)}function Mn(t){var e=this.localeData(),n=Pn(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)}function In(){var t,e,n,i=pr(this._milliseconds)/1e3,r=pr(this._days),o=pr(this._months);t=g(i/60),e=g(t/60),i%=60,t%=60,n=g(o/12),o%=12;var a=n,s=o,l=r,u=e,c=t,d=i,h=this.asSeconds();return h?(0>h?"-":"")+"P"+(a?a+"Y":"")+(s?s+"M":"")+(l?l+"D":"")+(u||c||d?"T":"")+(u?u+"H":"")+(c?c+"M":"")+(d?d+"S":""):"P0D"}var An,Wn,Nn=t.momentProperties=[],Fn=!1,Ln={},Rn={},Hn=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,jn=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Un={},Bn={},Yn=/\d/,qn=/\d\d/,zn=/\d{3}/,Vn=/\d{4}/,Xn=/[+-]?\d{6}/,Gn=/\d\d?/,Kn=/\d{1,3}/,Zn=/\d{1,4}/,Jn=/[+-]?\d{1,6}/,Qn=/\d+/,ti=/[+-]?\d+/,ei=/Z|[+-]\d\d:?\d\d/gi,ni=/[+-]?\d+(\.\d{1,3})?/,ii=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,ri={},oi={},ai=0,si=1,li=2,ui=3,ci=4,di=5,hi=6;I("M",["MM",2],"Mo",function(){return this.month()+1}),I("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),I("MMMM",0,0,function(t){return this.localeData().months(this,t)}),O("month","M"),R("M",Gn),R("MM",Gn,qn),R("MMM",ii),R("MMMM",ii),U(["M","MM"],function(t,e){e[si]=m(t)-1}),U(["MMM","MMMM"],function(t,e,n,i){var r=n._locale.monthsParse(t,i,n._strict);null!=r?e[si]=r:u(n).invalidMonth=t});var pi="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),fi="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),gi={};t.suppressDeprecationWarnings=!1;var mi=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,vi=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],yi=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],bi=/^\/?Date\((\-?\d+)/i;t.createFromInputFallback=tt("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),I(0,["YY",2],0,function(){return this.year()%100}),I(0,["YYYY",4],0,"year"),I(0,["YYYYY",5],0,"year"),I(0,["YYYYYY",6,!0],0,"year"),O("year","y"),R("Y",ti),R("YY",Gn,qn),R("YYYY",Zn,Vn),R("YYYYY",Jn,Xn),R("YYYYYY",Jn,Xn),U(["YYYYY","YYYYYY"],ai),U("YYYY",function(e,n){n[ai]=2===e.length?t.parseTwoDigitYear(e):m(e)}),U("YY",function(e,n){n[ai]=t.parseTwoDigitYear(e)}),t.parseTwoDigitYear=function(t){return m(t)+(m(t)>68?1900:2e3)};var wi=T("FullYear",!1);I("w",["ww",2],"wo","week"),I("W",["WW",2],"Wo","isoWeek"),O("week","w"),O("isoWeek","W"),R("w",Gn),R("ww",Gn,qn),R("W",Gn),R("WW",Gn,qn),B(["w","ww","W","WW"],function(t,e,n,i){e[i.substr(0,1)]=m(t)});var xi={dow:0,doy:6};I("DDD",["DDDD",3],"DDDo","dayOfYear"),O("dayOfYear","DDD"),R("DDD",Kn),R("DDDD",zn),U(["DDD","DDDD"],function(t,e,n){n._dayOfYear=m(t)}),t.ISO_8601=function(){};var _i=tt("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var t=Et.apply(null,arguments);return this>t?this:t}),Si=tt("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var t=Et.apply(null,arguments);return t>this?this:t});Wt("Z",":"),Wt("ZZ",""),R("Z",ei),R("ZZ",ei),U(["Z","ZZ"],function(t,e,n){n._useUTC=!0,n._tzm=Nt(t)});var Ci=/([\+\-]|\d\d)/gi;t.updateOffset=function(){};var Oi=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Di=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Kt.fn=It.prototype;var ki=te(1,"add"),Ti=te(-1,"subtract");t.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var Ei=tt("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});I(0,["gg",2],0,function(){return this.weekYear()%100}),I(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Ee("gggg","weekYear"),Ee("ggggg","weekYear"),Ee("GGGG","isoWeekYear"),Ee("GGGGG","isoWeekYear"),O("weekYear","gg"),O("isoWeekYear","GG"),R("G",ti),R("g",ti),R("GG",Gn,qn),R("gg",Gn,qn),R("GGGG",Zn,Vn),R("gggg",Zn,Vn),R("GGGGG",Jn,Xn),R("ggggg",Jn,Xn),B(["gggg","ggggg","GGGG","GGGGG"],function(t,e,n,i){e[i.substr(0,2)]=m(t)}),B(["gg","GG"],function(e,n,i,r){n[r]=t.parseTwoDigitYear(e)}),I("Q",0,0,"quarter"),O("quarter","Q"),R("Q",Yn),U("Q",function(t,e){e[si]=3*(m(t)-1)}),I("D",["DD",2],"Do","date"),O("date","D"),R("D",Gn),R("DD",Gn,qn),R("Do",function(t,e){return t?e._ordinalParse:e._ordinalParseLenient}),U(["D","DD"],li),U("Do",function(t,e){e[li]=m(t.match(Gn)[0],10)});var Pi=T("Date",!0);I("d",0,"do","day"),I("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),I("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),I("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),I("e",0,0,"weekday"),I("E",0,0,"isoWeekday"),O("day","d"),O("weekday","e"),O("isoWeekday","E"),R("d",Gn),R("e",Gn),R("E",Gn),R("dd",ii),R("ddd",ii),R("dddd",ii),B(["dd","ddd","dddd"],function(t,e,n){var i=n._locale.weekdaysParse(t);null!=i?e.d=i:u(n).invalidWeekday=t}),B(["d","e","E"],function(t,e,n,i){e[i]=m(t)});var $i="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Mi="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ii="Su_Mo_Tu_We_Th_Fr_Sa".split("_");I("H",["HH",2],0,"hour"),I("h",["hh",2],0,function(){return this.hours()%12||12}),Ye("a",!0),Ye("A",!1),O("hour","h"),R("a",qe),R("A",qe),R("H",Gn),R("h",Gn),R("HH",Gn,qn),R("hh",Gn,qn),U(["H","HH"],ui),U(["a","A"],function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t}),U(["h","hh"],function(t,e,n){e[ui]=m(t),u(n).bigHour=!0});var Ai=/[ap]\.?m?\.?/i,Wi=T("Hours",!0);I("m",["mm",2],0,"minute"),O("minute","m"),R("m",Gn),R("mm",Gn,qn),U(["m","mm"],ci);var Ni=T("Minutes",!1);I("s",["ss",2],0,"second"),O("second","s"),R("s",Gn),R("ss",Gn,qn),U(["s","ss"],di);var Fi=T("Seconds",!1);I("S",0,0,function(){return~~(this.millisecond()/100)}),I(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),I(0,["SSS",3],0,"millisecond"),I(0,["SSSS",4],0,function(){return 10*this.millisecond()}),I(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),I(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),I(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),I(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),I(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),O("millisecond","ms"),R("S",Kn,Yn),R("SS",Kn,qn),R("SSS",Kn,zn);var Li;for(Li="SSSS";Li.length<=9;Li+="S")R(Li,Qn);for(Li="S";Li.length<=9;Li+="S")U(Li,Xe);var Ri=T("Milliseconds",!1);I("z",0,0,"zoneAbbr"),I("zz",0,0,"zoneName");var Hi=p.prototype;Hi.add=ki,Hi.calendar=ne,Hi.clone=ie,Hi.diff=le,Hi.endOf=we,Hi.format=he,Hi.from=pe,Hi.fromNow=fe,Hi.to=ge,Hi.toNow=me,Hi.get=$,Hi.invalidAt=Te,Hi.isAfter=re,Hi.isBefore=oe,Hi.isBetween=ae,Hi.isSame=se,Hi.isValid=De,Hi.lang=Ei,Hi.locale=ve,Hi.localeData=ye,Hi.max=Si,Hi.min=_i,Hi.parsingFlags=ke,Hi.set=$,Hi.startOf=be,Hi.subtract=Ti,Hi.toArray=Ce,Hi.toObject=Oe,Hi.toDate=Se,Hi.toISOString=de,Hi.toJSON=de,Hi.toString=ce,Hi.unix=_e,Hi.valueOf=xe,Hi.year=wi,Hi.isLeapYear=lt,Hi.weekYear=$e,Hi.isoWeekYear=Me,Hi.quarter=Hi.quarters=We,Hi.month=K,Hi.daysInMonth=Z,Hi.week=Hi.weeks=pt,Hi.isoWeek=Hi.isoWeeks=ft,Hi.weeksInYear=Ae,Hi.isoWeeksInYear=Ie,Hi.date=Pi,Hi.day=Hi.days=je,Hi.weekday=Ue,Hi.isoWeekday=Be,Hi.dayOfYear=mt,Hi.hour=Hi.hours=Wi,Hi.minute=Hi.minutes=Ni,Hi.second=Hi.seconds=Fi,Hi.millisecond=Hi.milliseconds=Ri,Hi.utcOffset=Rt,Hi.utc=jt,Hi.local=Ut,Hi.parseZone=Bt,Hi.hasAlignedHourOffset=Yt,Hi.isDST=qt,Hi.isDSTShifted=zt,Hi.isLocal=Vt,Hi.isUtcOffset=Xt,Hi.isUtc=Gt,Hi.isUTC=Gt,Hi.zoneAbbr=Ge,Hi.zoneName=Ke,Hi.dates=tt("dates accessor is deprecated. Use date instead.",Pi),Hi.months=tt("months accessor is deprecated. Use month instead",K),Hi.years=tt("years accessor is deprecated. Use year instead",wi),Hi.zone=tt("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Ht);var ji=Hi,Ui={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Bi={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Yi="Invalid date",qi="%d",zi=/\d{1,2}/,Vi={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Xi=y.prototype;Xi._calendar=Ui,Xi.calendar=Qe,Xi._longDateFormat=Bi,Xi.longDateFormat=tn,Xi._invalidDate=Yi,Xi.invalidDate=en,Xi._ordinal=qi,Xi.ordinal=nn,Xi._ordinalParse=zi,Xi.preparse=rn,Xi.postformat=rn,Xi._relativeTime=Vi,Xi.relativeTime=on,Xi.pastFuture=an,Xi.set=sn,Xi.months=z,Xi._months=pi,Xi.monthsShort=V,Xi._monthsShort=fi,Xi.monthsParse=X,Xi.week=ct,Xi._week=xi,Xi.firstDayOfYear=ht,Xi.firstDayOfWeek=dt,Xi.weekdays=Fe,Xi._weekdays=$i,Xi.weekdaysMin=Re,Xi._weekdaysMin=Ii,Xi.weekdaysShort=Le,Xi._weekdaysShort=Mi,Xi.weekdaysParse=He,Xi.isPM=ze,Xi._meridiemParse=Ai,Xi.meridiem=Ve,_("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===m(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),t.lang=tt("moment.lang is deprecated. Use moment.locale instead.",_),t.langData=tt("moment.langData is deprecated. Use moment.localeData instead.",C);var Gi=Math.abs,Ki=On("ms"),Zi=On("s"),Ji=On("m"),Qi=On("h"),tr=On("d"),er=On("w"),nr=On("M"),ir=On("y"),rr=kn("milliseconds"),or=kn("seconds"),ar=kn("minutes"),sr=kn("hours"),lr=kn("days"),ur=kn("months"),cr=kn("years"),dr=Math.round,hr={s:45,m:45,h:22,d:26,M:11},pr=Math.abs,fr=It.prototype;fr.abs=gn,fr.add=vn,fr.subtract=yn,fr.as=Sn,fr.asMilliseconds=Ki,fr.asSeconds=Zi,fr.asMinutes=Ji,fr.asHours=Qi,fr.asDays=tr,fr.asWeeks=er,fr.asMonths=nr,fr.asYears=ir,fr.valueOf=Cn,fr._bubble=wn,fr.get=Dn,fr.milliseconds=rr,fr.seconds=or,fr.minutes=ar,fr.hours=sr,fr.days=lr,fr.weeks=Tn,fr.months=ur,fr.years=cr,fr.humanize=Mn,fr.toISOString=In,fr.toString=In,fr.toJSON=In,fr.locale=ve,fr.localeData=ye,fr.toIsoString=tt("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",In),fr.lang=Ei,I("X",0,0,"unix"),I("x",0,0,"valueOf"),R("x",ti),R("X",ni),U("X",function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))}),U("x",function(t,e,n){n._d=new Date(m(t))}),t.version="2.10.6",e(Et),t.fn=ji,t.min=$t,t.max=Mt,t.utc=s,t.unix=Ze,t.months=cn,t.isDate=i,t.locale=_,t.invalid=d,t.duration=Kt,t.isMoment=f,t.weekdays=hn,t.parseZone=Je,t.localeData=C,t.isDuration=At,t.monthsShort=dn,t.weekdaysMin=fn,t.defineLocale=S,t.weekdaysShort=pn,t.normalizeUnits=D,t.relativeTimeThreshold=$n;var gr=t;return gr}),function(t){"use strict";t.module("ng.deviceDetector",["reTree"]).constant("BROWSERS",{CHROME:"chrome",FIREFOX:"firefox",SAFARI:"safari",OPERA:"opera",IE:"ie",MS_EDGE:"ms-edge",PS4:"ps4",VITA:"vita",UNKNOWN:"unknown"}).constant("DEVICES",{ANDROID:"android",I_PAD:"ipad",IPHONE:"iphone",I_POD:"ipod",BLACKBERRY:"blackberry",FIREFOX_OS:"firefox-os",
CHROME_BOOK:"chrome-book",WINDOWS_PHONE:"windows-phone",PS4:"ps4",VITA:"vita",UNKNOWN:"unknown"}).constant("OS",{WINDOWS:"windows",MAC:"mac",IOS:"ios",ANDROID:"android",LINUX:"linux",UNIX:"unix",FIREFOX_OS:"firefox-os",CHROME_OS:"chrome-os",WINDOWS_PHONE:"windows-phone",PS4:"ps4",VITA:"vita",UNKNOWN:"unknown"}).constant("OS_VERSIONS",{WINDOWS_3_11:"windows-3-11",WINDOWS_95:"windows-95",WINDOWS_ME:"windows-me",WINDOWS_98:"windows-98",WINDOWS_CE:"windows-ce",WINDOWS_2000:"windows-2000",WINDOWS_XP:"windows-xp",WINDOWS_SERVER_2003:"windows-server-2003",WINDOWS_VISTA:"windows-vista",WINDOWS_7:"windows-7",WINDOWS_8_1:"windows-8-1",WINDOWS_8:"windows-8",WINDOWS_10:"windows-10",WINDOWS_PHONE_7_5:"windows-phone-7-5",WINDOWS_PHONE_8_1:"windows-phone-8-1",WINDOWS_PHONE_10:"windows-phone-10",WINDOWS_NT_4_0:"windows-nt-4-0",UNKNOWN:"unknown"}).service("detectUtils",["deviceDetector","DEVICES","BROWSERS","OS",function(t,e,n,i){var r=t;this.isMobile=function(){return"unknown"!==r.device},this.isAndroid=function(){return r.device===e.ANDROID||r.OS===i.ANDROID},this.isIOS=function(){return r.os===i.IOS||r.device===e.I_POD||r.device===e.IPHONE}}]).factory("deviceDetector",["$window","DEVICES","BROWSERS","OS","OS_VERSIONS","reTree",function(t,e,n,i,r,o){var a={WINDOWS:{and:[{or:[/\bWindows|(Win\d\d)\b/,/\bWin 9x\b/]},{not:/\bWindows Phone\b/}]},MAC:{and:[/\bMac OS\b/,{not:/Windows Phone/}]},IOS:{and:[{or:[/\biPad\b/,/\biPhone\b/,/\biPod\b/]},{not:/Windows Phone/}]},ANDROID:{and:[/\bAndroid\b/,{not:/Windows Phone/}]},LINUX:/\bLinux\b/,UNIX:/\bUNIX\b/,FIREFOX_OS:{and:[/\bFirefox\b/,/Mobile\b/]},CHROME_OS:/\bCrOS\b/,WINDOWS_PHONE:{or:[/\bIEMobile\b/,/\bWindows Phone\b/]},PS4:/\bMozilla\/5.0 \(PlayStation 4\b/,VITA:/\bMozilla\/5.0 \(Play(S|s)tation Vita\b/},s={CHROME:{and:[{or:[/\bChrome\b/,/\bCriOS\b/]},{not:{or:[/\bOPR\b/,/\bEdge\b/]}}]},FIREFOX:/\bFirefox\b/,SAFARI:{and:[/^((?!CriOS).)*\Safari\b.*$/,{not:{or:[/\bOPR\b/,/\bEdge\b/,/Windows Phone/]}}]},OPERA:{or:[/Opera\b/,/\bOPR\b/]},IE:{or:[/\bMSIE\b/,/\bTrident\b/]},MS_EDGE:{or:[/\bEdge\b/]},PS4:/\bMozilla\/5.0 \(PlayStation 4\b/,VITA:/\bMozilla\/5.0 \(Play(S|s)tation Vita\b/},l={ANDROID:{and:[/\bAndroid\b/,{not:/Windows Phone/}]},I_PAD:/\biPad\b/,IPHONE:{and:[/\biPhone\b/,{not:/Windows Phone/}]},I_POD:/\biPod\b/,BLACKBERRY:/\bblackberry\b/,FIREFOX_OS:{and:[/\bFirefox\b/,/\bMobile\b/]},CHROME_BOOK:/\bCrOS\b/,WINDOWS_PHONE:{or:[/\bIEMobile\b/,/\bWindows Phone\b/]},PS4:/\bMozilla\/5.0 \(PlayStation 4\b/,VITA:/\bMozilla\/5.0 \(Play(S|s)tation Vita\b/},u={WINDOWS_3_11:/Win16/,WINDOWS_95:/(Windows 95|Win95|Windows_95)/,WINDOWS_ME:/(Win 9x 4.90|Windows ME)/,WINDOWS_98:/(Windows 98|Win98)/,WINDOWS_CE:/Windows CE/,WINDOWS_2000:/(Windows NT 5.0|Windows 2000)/,WINDOWS_XP:/(Windows NT 5.1|Windows XP)/,WINDOWS_SERVER_2003:/Windows NT 5.2/,WINDOWS_VISTA:/Windows NT 6.0/,WINDOWS_7:/(Windows 7|Windows NT 6.1)/,WINDOWS_8_1:/(Windows 8.1|Windows NT 6.3)/,WINDOWS_8:/(Windows 8|Windows NT 6.2)/,WINDOWS_10:/(Windows NT 10.0)/,WINDOWS_PHONE_7_5:/(Windows Phone OS 7.5)/,WINDOWS_PHONE_8_1:/(Windows Phone 8.1)/,WINDOWS_PHONE_10:/(Windows Phone 10)/,WINDOWS_NT_4_0:{and:[/(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/,{not:/Windows NT 10.0/}]}},c={CHROME:/\bChrome\/([\d\.]+)\b/,FIREFOX:/\bFirefox\/([\d\.]+)\b/,SAFARI:/\bVersion\/([\d\.]+)\b/,OPERA:[/\bVersion\/([\d\.]+)\b/,/\bOPR\/([\d\.]+)\b/],IE:[/\bMSIE ([\d\.]+\w?)\b/,/\brv:([\d\.]+\w?)\b/],MS_EDGE:/\bEdge\/([\d\.]+)\b/},d=Object.keys(c).reduce(function(t,e){return t[n[e]]=c[e],t},{}),h=t.navigator.userAgent,p={raw:{userAgent:h,os:{},browser:{},device:{}}};if(p.raw.os=Object.keys(i).reduce(function(t,e){return t[i[e]]=o.test(h,a[e]),t},{}),p.raw.browser=Object.keys(n).reduce(function(t,e){return t[n[e]]=o.test(h,s[e]),t},{}),p.raw.device=Object.keys(e).reduce(function(t,n){return t[e[n]]=o.test(h,l[n]),t},{}),p.raw.os_version=Object.keys(r).reduce(function(t,e){return t[r[e]]=o.test(h,u[e]),t},{}),p.os=[i.WINDOWS,i.IOS,i.MAC,i.ANDROID,i.LINUX,i.UNIX,i.FIREFOX_OS,i.CHROME_OS,i.WINDOWS_PHONE,i.PS4,i.VITA].reduce(function(t,e){return t===i.UNKNOWN&&p.raw.os[e]?e:t},i.UNKNOWN),p.browser=[n.CHROME,n.FIREFOX,n.SAFARI,n.OPERA,n.IE,n.MS_EDGE,n.PS4,n.VITA].reduce(function(t,e){return t===n.UNKNOWN&&p.raw.browser[e]?e:t},n.UNKNOWN),p.device=[e.ANDROID,e.I_PAD,e.IPHONE,e.I_POD,e.BLACKBERRY,e.FIREFOX_OS,e.CHROME_BOOK,e.WINDOWS_PHONE,e.PS4,e.VITA].reduce(function(t,n){return t===e.UNKNOWN&&p.raw.device[n]?n:t},e.UNKNOWN),p.os_version=[r.WINDOWS_3_11,r.WINDOWS_95,r.WINDOWS_ME,r.WINDOWS_98,r.WINDOWS_CE,r.WINDOWS_2000,r.WINDOWS_XP,r.WINDOWS_SERVER_2003,r.WINDOWS_VISTA,r.WINDOWS_7,r.WINDOWS_8_1,r.WINDOWS_8,r.WINDOWS_10,r.WINDOWS_PHONE_7_5,r.WINDOWS_PHONE_8_1,r.WINDOWS_PHONE_10,r.WINDOWS_NT_4_0].reduce(function(t,e){return t===r.UNKNOWN&&p.raw.os_version[e]?e:t},r.UNKNOWN),p.browser_version="0",p.browser!==n.UNKNOWN){var f=d[p.browser],g=o.exec(h,f);g&&(p.browser_version=g[1])}return p.isMobile=function(){return[e.ANDROID,e.I_PAD,e.IPHONE,e.I_POD,e.BLACKBERRY,e.FIREFOX_OS,e.WINDOWS_PHONE,e.VITA].some(function(t){return p.device==t})},p.isTablet=function(){return[e.I_PAD,e.FIREFOX_OS].some(function(t){return p.device==t})},p.isDesktop=function(){return[e.PS4,e.CHROME_BOOK,e.UNKNOWN].some(function(t){return p.device==t})},p}]).directive("deviceDetector",["deviceDetector",function(t){return{restrict:"A",link:function(e,n){n.addClass("os-"+t.os),n.addClass("browser-"+t.browser),n.addClass("device-"+t.device)}}}])}(angular),!function(t){"use strict";t.module("ng.deviceDetector",["reTree"]).constant("BROWSERS",{CHROME:"chrome",FIREFOX:"firefox",SAFARI:"safari",OPERA:"opera",IE:"ie",MS_EDGE:"ms-edge",PS4:"ps4",VITA:"vita",UNKNOWN:"unknown"}).constant("DEVICES",{ANDROID:"android",I_PAD:"ipad",IPHONE:"iphone",I_POD:"ipod",BLACKBERRY:"blackberry",FIREFOX_OS:"firefox-os",CHROME_BOOK:"chrome-book",WINDOWS_PHONE:"windows-phone",PS4:"ps4",VITA:"vita",UNKNOWN:"unknown"}).constant("OS",{WINDOWS:"windows",MAC:"mac",IOS:"ios",ANDROID:"android",LINUX:"linux",UNIX:"unix",FIREFOX_OS:"firefox-os",CHROME_OS:"chrome-os",WINDOWS_PHONE:"windows-phone",PS4:"ps4",VITA:"vita",UNKNOWN:"unknown"}).constant("OS_VERSIONS",{WINDOWS_3_11:"windows-3-11",WINDOWS_95:"windows-95",WINDOWS_ME:"windows-me",WINDOWS_98:"windows-98",WINDOWS_CE:"windows-ce",WINDOWS_2000:"windows-2000",WINDOWS_XP:"windows-xp",WINDOWS_SERVER_2003:"windows-server-2003",WINDOWS_VISTA:"windows-vista",WINDOWS_7:"windows-7",WINDOWS_8_1:"windows-8-1",WINDOWS_8:"windows-8",WINDOWS_10:"windows-10",WINDOWS_PHONE_7_5:"windows-phone-7-5",WINDOWS_PHONE_8_1:"windows-phone-8-1",WINDOWS_PHONE_10:"windows-phone-10",WINDOWS_NT_4_0:"windows-nt-4-0",UNKNOWN:"unknown"}).service("detectUtils",["deviceDetector","DEVICES","BROWSERS","OS",function(t,e,n,i){var r=t;this.isMobile=function(){return"unknown"!==r.device},this.isAndroid=function(){return r.device===e.ANDROID||r.OS===i.ANDROID},this.isIOS=function(){return r.os===i.IOS||r.device===e.I_POD||r.device===e.IPHONE}}]).factory("deviceDetector",["$window","DEVICES","BROWSERS","OS","OS_VERSIONS","reTree",function(t,e,n,i,r,o){var a={WINDOWS:{and:[{or:[/\bWindows|(Win\d\d)\b/,/\bWin 9x\b/]},{not:/\bWindows Phone\b/}]},MAC:{and:[/\bMac OS\b/,{not:/Windows Phone/}]},IOS:{and:[{or:[/\biPad\b/,/\biPhone\b/,/\biPod\b/]},{not:/Windows Phone/}]},ANDROID:{and:[/\bAndroid\b/,{not:/Windows Phone/}]},LINUX:/\bLinux\b/,UNIX:/\bUNIX\b/,FIREFOX_OS:{and:[/\bFirefox\b/,/Mobile\b/]},CHROME_OS:/\bCrOS\b/,WINDOWS_PHONE:{or:[/\bIEMobile\b/,/\bWindows Phone\b/]},PS4:/\bMozilla\/5.0 \(PlayStation 4\b/,VITA:/\bMozilla\/5.0 \(Play(S|s)tation Vita\b/},s={CHROME:{and:[{or:[/\bChrome\b/,/\bCriOS\b/]},{not:{or:[/\bOPR\b/,/\bEdge\b/]}}]},FIREFOX:/\bFirefox\b/,SAFARI:{and:[/^((?!CriOS).)*\Safari\b.*$/,{not:{or:[/\bOPR\b/,/\bEdge\b/,/Windows Phone/]}}]},OPERA:{or:[/Opera\b/,/\bOPR\b/]},IE:{or:[/\bMSIE\b/,/\bTrident\b/]},MS_EDGE:{or:[/\bEdge\b/]},PS4:/\bMozilla\/5.0 \(PlayStation 4\b/,VITA:/\bMozilla\/5.0 \(Play(S|s)tation Vita\b/},l={ANDROID:{and:[/\bAndroid\b/,{not:/Windows Phone/}]},I_PAD:/\biPad\b/,IPHONE:{and:[/\biPhone\b/,{not:/Windows Phone/}]},I_POD:/\biPod\b/,BLACKBERRY:/\bblackberry\b/,FIREFOX_OS:{and:[/\bFirefox\b/,/\bMobile\b/]},CHROME_BOOK:/\bCrOS\b/,WINDOWS_PHONE:{or:[/\bIEMobile\b/,/\bWindows Phone\b/]},PS4:/\bMozilla\/5.0 \(PlayStation 4\b/,VITA:/\bMozilla\/5.0 \(Play(S|s)tation Vita\b/},u={WINDOWS_3_11:/Win16/,WINDOWS_95:/(Windows 95|Win95|Windows_95)/,WINDOWS_ME:/(Win 9x 4.90|Windows ME)/,WINDOWS_98:/(Windows 98|Win98)/,WINDOWS_CE:/Windows CE/,WINDOWS_2000:/(Windows NT 5.0|Windows 2000)/,WINDOWS_XP:/(Windows NT 5.1|Windows XP)/,WINDOWS_SERVER_2003:/Windows NT 5.2/,WINDOWS_VISTA:/Windows NT 6.0/,WINDOWS_7:/(Windows 7|Windows NT 6.1)/,WINDOWS_8_1:/(Windows 8.1|Windows NT 6.3)/,WINDOWS_8:/(Windows 8|Windows NT 6.2)/,WINDOWS_10:/(Windows NT 10.0)/,WINDOWS_PHONE_7_5:/(Windows Phone OS 7.5)/,WINDOWS_PHONE_8_1:/(Windows Phone 8.1)/,WINDOWS_PHONE_10:/(Windows Phone 10)/,WINDOWS_NT_4_0:{and:[/(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/,{not:/Windows NT 10.0/}]}},c={CHROME:/\bChrome\/([\d\.]+)\b/,FIREFOX:/\bFirefox\/([\d\.]+)\b/,SAFARI:/\bVersion\/([\d\.]+)\b/,OPERA:[/\bVersion\/([\d\.]+)\b/,/\bOPR\/([\d\.]+)\b/],IE:[/\bMSIE ([\d\.]+\w?)\b/,/\brv:([\d\.]+\w?)\b/],MS_EDGE:/\bEdge\/([\d\.]+)\b/},d=Object.keys(c).reduce(function(t,e){return t[n[e]]=c[e],t},{}),h=t.navigator.userAgent,p={raw:{userAgent:h,os:{},browser:{},device:{}}};if(p.raw.os=Object.keys(i).reduce(function(t,e){return t[i[e]]=o.test(h,a[e]),t},{}),p.raw.browser=Object.keys(n).reduce(function(t,e){return t[n[e]]=o.test(h,s[e]),t},{}),p.raw.device=Object.keys(e).reduce(function(t,n){return t[e[n]]=o.test(h,l[n]),t},{}),p.raw.os_version=Object.keys(r).reduce(function(t,e){return t[r[e]]=o.test(h,u[e]),t},{}),p.os=[i.WINDOWS,i.IOS,i.MAC,i.ANDROID,i.LINUX,i.UNIX,i.FIREFOX_OS,i.CHROME_OS,i.WINDOWS_PHONE,i.PS4,i.VITA].reduce(function(t,e){return t===i.UNKNOWN&&p.raw.os[e]?e:t},i.UNKNOWN),p.browser=[n.CHROME,n.FIREFOX,n.SAFARI,n.OPERA,n.IE,n.MS_EDGE,n.PS4,n.VITA].reduce(function(t,e){return t===n.UNKNOWN&&p.raw.browser[e]?e:t},n.UNKNOWN),p.device=[e.ANDROID,e.I_PAD,e.IPHONE,e.I_POD,e.BLACKBERRY,e.FIREFOX_OS,e.CHROME_BOOK,e.WINDOWS_PHONE,e.PS4,e.VITA].reduce(function(t,n){return t===e.UNKNOWN&&p.raw.device[n]?n:t},e.UNKNOWN),p.os_version=[r.WINDOWS_3_11,r.WINDOWS_95,r.WINDOWS_ME,r.WINDOWS_98,r.WINDOWS_CE,r.WINDOWS_2000,r.WINDOWS_XP,r.WINDOWS_SERVER_2003,r.WINDOWS_VISTA,r.WINDOWS_7,r.WINDOWS_8_1,r.WINDOWS_8,r.WINDOWS_10,r.WINDOWS_PHONE_7_5,r.WINDOWS_PHONE_8_1,r.WINDOWS_PHONE_10,r.WINDOWS_NT_4_0].reduce(function(t,e){return t===r.UNKNOWN&&p.raw.os_version[e]?e:t},r.UNKNOWN),p.browser_version="0",p.browser!==n.UNKNOWN){var f=d[p.browser],g=o.exec(h,f);g&&(p.browser_version=g[1])}return p.isMobile=function(){return[e.ANDROID,e.I_PAD,e.IPHONE,e.I_POD,e.BLACKBERRY,e.FIREFOX_OS,e.CHROME_BOOK,e.WINDOWS_PHONE,e.VITA].some(function(t){return p.device==t})},p.isTablet=function(){return[e.I_PAD,e.FIREFOX_OS,e.CHROME_BOOK].some(function(t){return p.device==t})},p.isDesktop=function(){return[e.PS4,e.UNKNOWN].some(function(t){return p.device==t})},p}]).directive("deviceDetector",["deviceDetector",function(t){return{restrict:"A",link:function(e,n){n.addClass("os-"+t.os),n.addClass("browser-"+t.browser),n.addClass("device-"+t.device)}}}])}(angular),!function(t,e,n){"use strict";function i(t,e){return("string"==typeof e||e instanceof String)&&(e=new RegExp(e)),e instanceof RegExp?e.test(t):e&&Array.isArray(e.and)?e.and.every(function(e){return i(t,e)}):e&&Array.isArray(e.or)?e.or.some(function(e){return i(t,e)}):e&&e.not?!i(t,e.not):!1}function r(t,e){return("string"==typeof e||e instanceof String)&&(e=new RegExp(e)),e instanceof RegExp?e.exec(t):e&&Array.isArray(e)?e.reduce(function(e,n){return e?e:r(t,n)},null):null}n&&n.module("reTree",[]).factory("reTree",[function(){return{test:i,exec:r}}]),e&&(e.reTree={test:i,exec:r}),t&&(t.exports={test:i,exec:r})}("undefined"==typeof module?null:module,"undefined"==typeof window?null:window,"undefined"==typeof angular?null:angular),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.transition","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-popup.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/tooltip/tooltip-template-popup.html","template/popover/popover-html.html","template/popover/popover-template.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("collapse",["$animate",function(t){return{link:function(e,n,i){function r(){n.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),t.addClass(n,"in",{to:{height:n[0].scrollHeight+"px"}}).then(o)}function o(){n.removeClass("collapsing"),n.css({height:"auto"})}function a(){return n.hasClass("collapse")||n.hasClass("in")?(n.css({height:n[0].scrollHeight+"px"}).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),void t.removeClass(n,"in",{to:{height:"0"}}).then(s)):s()}function s(){n.css({height:"0"}),n.removeClass("collapsing"),n.addClass("collapse")}e.$watch(i.collapse,function(t){t?a():r()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(t,e,n){this.groups=[],this.closeOthers=function(i){var r=angular.isDefined(e.closeOthers)?t.$eval(e.closeOthers):n.closeOthers;r&&angular.forEach(this.groups,function(t){t!==i&&(t.isOpen=!1)})},this.addGroup=function(t){var e=this;this.groups.push(t),t.$on("$destroy",function(){e.removeGroup(t)})},this.removeGroup=function(t){var e=this.groups.indexOf(t);-1!==e&&this.groups.splice(e,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",controllerAs:"accordion",transclude:!0,replace:!1,templateUrl:function(t,e){return e.templateUrl||"template/accordion/accordion.html"}}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(t,e){return e.templateUrl||"template/accordion/accordion-group.html"},scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(t){this.heading=t}},link:function(t,e,n,i){i.addGroup(t),t.$watch("isOpen",function(e){e&&i.closeOthers(t)}),t.toggleOpen=function(){t.isDisabled||(t.isOpen=!t.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(t,e,n,i,r){i.setHeading(r(t,angular.noop))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(t,e,n,i){t.$watch(function(){return i[n.accordionTransclude]},function(t){t&&(e.find("span").html(""),e.find("span").append(t))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(t,e){t.closeable=!!e.close,this.close=t.close}]).directive("alert",function(){return{restrict:"EA",controller:"AlertController",controllerAs:"alert",templateUrl:function(t,e){return e.templateUrl||"template/alert/alert.html"},transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}).directive("dismissOnTimeout",["$timeout",function(t){return{require:"alert",link:function(e,n,i,r){t(function(){r.close()},parseInt(i.dismissOnTimeout,10))}}}]),angular.module("ui.bootstrap.bindHtml",[]).value("$bindHtmlUnsafeSuppressDeprecated",!1).directive("bindHtmlUnsafe",["$log","$bindHtmlUnsafeSuppressDeprecated",function(t,e){return function(n,i,r){e||t.warn("bindHtmlUnsafe is now deprecated. Use ngBindHtml instead"),i.addClass("ng-binding").data("$binding",r.bindHtmlUnsafe),n.$watch(r.bindHtmlUnsafe,function(t){i.html(t||"")})}}]),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(t){this.activeClass=t.activeClass||"active",this.toggleEvent=t.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",controllerAs:"buttons",link:function(t,e,n,i){var r=i[0],o=i[1];o.$render=function(){e.toggleClass(r.activeClass,angular.equals(o.$modelValue,t.$eval(n.btnRadio)))},e.bind(r.toggleEvent,function(){if(!n.disabled){var i=e.hasClass(r.activeClass);(!i||angular.isDefined(n.uncheckable))&&t.$apply(function(){o.$setViewValue(i?null:t.$eval(n.btnRadio)),o.$render()})}})}}}).directive("btnCheckbox",function(){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",controllerAs:"button",link:function(t,e,n,i){function r(){return a(n.btnCheckboxTrue,!0)}function o(){return a(n.btnCheckboxFalse,!1)}function a(e,n){var i=t.$eval(e);return angular.isDefined(i)?i:n}var s=i[0],l=i[1];l.$render=function(){e.toggleClass(s.activeClass,angular.equals(l.$modelValue,r()))},e.bind(s.toggleEvent,function(){n.disabled||t.$apply(function(){l.$setViewValue(e.hasClass(s.activeClass)?o():r()),l.$render()})})}}}),angular.module("ui.bootstrap.carousel",[]).controller("CarouselController",["$scope","$element","$interval","$animate",function(t,e,n,i){function r(e,n,r){v||(angular.extend(e,{direction:r,active:!0}),angular.extend(d.currentSlide||{},{direction:r,active:!1}),i.enabled()&&!t.noTransition&&!t.$currentTransition&&e.$element&&d.slides.length>1&&(e.$element.data(g,e.direction),d.currentSlide&&d.currentSlide.$element&&d.currentSlide.$element.data(g,e.direction),t.$currentTransition=!0,p?i.on("addClass",e.$element,function(e,n){"close"===n&&(t.$currentTransition=null,i.off("addClass",e))}):e.$element.one("$animate:close",function(){t.$currentTransition=null})),d.currentSlide=e,m=n,a())}function o(t){if(angular.isUndefined(h[t].index))return h[t];var e;for(h.length,e=0;e<h.length;++e)if(h[e].index==t)return h[e]}function a(){s();var e=+t.interval;!isNaN(e)&&e>0&&(u=n(l,e))}function s(){u&&(n.cancel(u),u=null)}function l(){var e=+t.interval;c&&!isNaN(e)&&e>0&&h.length?t.next():t.pause()}var u,c,d=this,h=d.slides=t.slides=[],p=angular.version.minor>=4,f="uib-noTransition",g="uib-slideDirection",m=-1;d.currentSlide=null;var v=!1;d.select=t.select=function(e,n){var i=t.indexOfSlide(e);void 0===n&&(n=i>d.getCurrentIndex()?"next":"prev"),e&&e!==d.currentSlide&&!t.$currentTransition&&r(e,i,n)},t.$on("$destroy",function(){v=!0}),d.getCurrentIndex=function(){return d.currentSlide&&angular.isDefined(d.currentSlide.index)?+d.currentSlide.index:m},t.indexOfSlide=function(t){return angular.isDefined(t.index)?+t.index:h.indexOf(t)},t.next=function(){var e=(d.getCurrentIndex()+1)%h.length;return 0===e&&t.noWrap()?void t.pause():d.select(o(e),"next")},t.prev=function(){var e=d.getCurrentIndex()-1<0?h.length-1:d.getCurrentIndex()-1;return t.noWrap()&&e===h.length-1?void t.pause():d.select(o(e),"prev")},t.isActive=function(t){return d.currentSlide===t},t.$watch("interval",a),t.$on("$destroy",s),t.play=function(){c||(c=!0,a())},t.pause=function(){t.noPause||(c=!1,s())},d.addSlide=function(e,n){e.$element=n,h.push(e),1===h.length||e.active?(d.select(h[h.length-1]),1==h.length&&t.play()):e.active=!1},d.removeSlide=function(t){angular.isDefined(t.index)&&h.sort(function(t,e){return+t.index>+e.index});var e=h.indexOf(t);h.splice(e,1),h.length>0&&t.active?d.select(e>=h.length?h[e-1]:h[e]):m>e&&m--,0===h.length&&(d.currentSlide=null)},t.$watch("noTransition",function(t){e.data(f,t)})}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",controllerAs:"carousel",require:"carousel",templateUrl:function(t,e){return e.templateUrl||"template/carousel/carousel.html"},scope:{interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(t,e){return e.templateUrl||"template/carousel/slide.html"},scope:{active:"=?",index:"=?"},link:function(t,e,n,i){i.addSlide(t,e),t.$on("$destroy",function(){i.removeSlide(t)}),t.$watch("active",function(e){e&&i.select(t)})}}}).animation(".item",["$injector","$animate",function(t,e){function n(t,e,n){t.removeClass(e),n&&n()}var i="uib-noTransition",r="uib-slideDirection",o=null;return t.has("$animateCss")&&(o=t.get("$animateCss")),{beforeAddClass:function(t,a,s){if("active"==a&&t.parent()&&!t.parent().data(i)){var l=!1,u=t.data(r),c="next"==u?"left":"right",d=n.bind(this,t,c+" "+u,s);return t.addClass(u),o?o(t,{addClass:c}).start().done(d):e.addClass(t,c).then(function(){l||d(),s()}),function(){l=!0}}s()},beforeRemoveClass:function(t,a,s){if("active"===a&&t.parent()&&!t.parent().data(i)){var l=!1,u=t.data(r),c="next"==u?"left":"right",d=n.bind(this,t,c,s);return o?o(t,{addClass:c}).start().done(d):e.addClass(t,c).then(function(){l||d(),s()}),function(){l=!0}}s()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$log","$locale","orderByFilter",function(t,e,n){function i(t){var e=[],i=t.split("");return angular.forEach(a,function(n,r){var o=t.indexOf(r);if(o>-1){t=t.split(""),i[o]="("+n.regex+")",t[o]="$";for(var a=o+1,s=o+r.length;s>a;a++)i[a]="",t[a]="$";t=t.join(""),e.push({index:o,apply:n.apply})}}),{regex:new RegExp("^"+i.join("")+"$"),map:n(e,"index")}}function r(t,e,n){return 1>n?!1:1===e&&n>28?29===n&&(t%4===0&&t%100!==0||t%400===0):3===e||5===e||8===e||10===e?31>n:!0}var o=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.parsers={};var a={yyyy:{regex:"\\d{4}",apply:function(t){this.year=+t}},yy:{regex:"\\d{2}",apply:function(t){this.year=+t+2e3}},y:{regex:"\\d{1,4}",apply:function(t){this.year=+t}},MMMM:{regex:e.DATETIME_FORMATS.MONTH.join("|"),apply:function(t){this.month=e.DATETIME_FORMATS.MONTH.indexOf(t)}},MMM:{regex:e.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(t){this.month=e.DATETIME_FORMATS.SHORTMONTH.indexOf(t)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(t){this.month=t-1}},M:{regex:"[1-9]|1[0-2]",apply:function(t){this.month=t-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(t){this.date=+t}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(t){this.date=+t}},EEEE:{regex:e.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:e.DATETIME_FORMATS.SHORTDAY.join("|")},HH:{regex:"(?:0|1)[0-9]|2[0-3]",apply:function(t){this.hours=+t}},hh:{regex:"0[0-9]|1[0-2]",apply:function(t){this.hours=+t}},H:{regex:"1?[0-9]|2[0-3]",apply:function(t){this.hours=+t}},mm:{regex:"[0-5][0-9]",apply:function(t){this.minutes=+t}},m:{regex:"[0-9]|[1-5][0-9]",apply:function(t){this.minutes=+t}},sss:{regex:"[0-9][0-9][0-9]",apply:function(t){this.milliseconds=+t}},ss:{regex:"[0-5][0-9]",apply:function(t){this.seconds=+t}},s:{regex:"[0-9]|[1-5][0-9]",apply:function(t){this.seconds=+t}},a:{regex:e.DATETIME_FORMATS.AMPMS.join("|"),apply:function(t){12===this.hours&&(this.hours=0),"PM"===t&&(this.hours+=12)}}};this.parse=function(n,a,s){if(!angular.isString(n)||!a)return n;a=e.DATETIME_FORMATS[a]||a,a=a.replace(o,"\\$&"),this.parsers[a]||(this.parsers[a]=i(a));var l=this.parsers[a],u=l.regex,c=l.map,d=n.match(u);if(d&&d.length){var h,p;angular.isDate(s)&&!isNaN(s.getTime())?h={year:s.getFullYear(),month:s.getMonth(),date:s.getDate(),hours:s.getHours(),minutes:s.getMinutes(),seconds:s.getSeconds(),milliseconds:s.getMilliseconds()}:(s&&t.warn("dateparser:","baseDate is not a valid date"),h={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var f=1,g=d.length;g>f;f++){var m=c[f-1];m.apply&&m.apply.call(h,d[f])}return r(h.year,h.month,h.date)&&(p=new Date(h.year,h.month,h.date,h.hours,h.minutes,h.seconds,h.milliseconds||0)),p}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(t,e){function n(t,n){return t.currentStyle?t.currentStyle[n]:e.getComputedStyle?e.getComputedStyle(t)[n]:t.style[n]}function i(t){return"static"===(n(t,"position")||"static")}var r=function(e){for(var n=t[0],r=e.offsetParent||n;r&&r!==n&&i(r);)r=r.offsetParent;return r||n};return{position:function(e){var n=this.offset(e),i={top:0,left:0},o=r(e[0]);o!=t[0]&&(i=this.offset(angular.element(o)),i.top+=o.clientTop-o.scrollTop,i.left+=o.clientLeft-o.scrollLeft);var a=e[0].getBoundingClientRect();return{width:a.width||e.prop("offsetWidth"),height:a.height||e.prop("offsetHeight"),top:n.top-i.top,left:n.left-i.left}},offset:function(n){var i=n[0].getBoundingClientRect();return{width:i.width||n.prop("offsetWidth"),height:i.height||n.prop("offsetHeight"),top:i.top+(e.pageYOffset||t[0].documentElement.scrollTop),left:i.left+(e.pageXOffset||t[0].documentElement.scrollLeft)}},positionElements:function(t,e,n,i){var r,o,a,s,l=n.split("-"),u=l[0],c=l[1]||"center";r=i?this.offset(t):this.position(t),o=e.prop("offsetWidth"),a=e.prop("offsetHeight");var d={center:function(){return r.left+r.width/2-o/2},left:function(){return r.left},right:function(){return r.left+r.width}},h={center:function(){return r.top+r.height/2-a/2},top:function(){return r.top},bottom:function(){return r.top+r.height}};switch(u){case"right":s={top:h[c](),left:d[u]()};break;case"left":s={top:h[c](),left:r.left-o};break;case"bottom":s={top:h[u](),left:d[c]()};break;default:s={top:r.top-a,left:d[c]()}}return s}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).value("$datepickerSuppressError",!1).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null,shortcutPropagation:!1}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$log","dateFilter","datepickerConfig","$datepickerSuppressError",function(t,e,n,i,r,o,a,s){var l=this,u={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","showWeeks","startingDay","yearRange","shortcutPropagation"],function(n,r){l[n]=angular.isDefined(e[n])?6>r?i(e[n])(t.$parent):t.$parent.$eval(e[n]):a[n]}),angular.forEach(["minDate","maxDate"],function(i){e[i]?t.$parent.$watch(n(e[i]),function(t){l[i]=t?new Date(t):null,l.refreshView()}):l[i]=a[i]?new Date(a[i]):null}),angular.forEach(["minMode","maxMode"],function(i){e[i]?t.$parent.$watch(n(e[i]),function(n){l[i]=angular.isDefined(n)?n:e[i],t[i]=l[i],("minMode"==i&&l.modes.indexOf(t.datepickerMode)<l.modes.indexOf(l[i])||"maxMode"==i&&l.modes.indexOf(t.datepickerMode)>l.modes.indexOf(l[i]))&&(t.datepickerMode=l[i])}):(l[i]=a[i]||null,t[i]=l[i])}),t.datepickerMode=t.datepickerMode||a.datepickerMode,t.uniqueId="datepicker-"+t.$id+"-"+Math.floor(1e4*Math.random()),angular.isDefined(e.initDate)?(this.activeDate=t.$parent.$eval(e.initDate)||new Date,t.$parent.$watch(e.initDate,function(t){t&&(u.$isEmpty(u.$modelValue)||u.$invalid)&&(l.activeDate=t,l.refreshView())})):this.activeDate=new Date,t.isActive=function(e){return 0===l.compare(e.date,l.activeDate)?(t.activeDateId=e.uid,!0):!1},this.init=function(t){u=t,u.$render=function(){l.render()}},this.render=function(){if(u.$viewValue){var t=new Date(u.$viewValue),e=!isNaN(t);e?this.activeDate=t:s||r.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var t=u.$viewValue?new Date(u.$viewValue):null;u.$setValidity("dateDisabled",!t||this.element&&!this.isDisabled(t))}},this.createDateObject=function(t,e){var n=u.$viewValue?new Date(u.$viewValue):null;return{date:t,label:o(t,e),selected:n&&0===this.compare(t,n),disabled:this.isDisabled(t),current:0===this.compare(t,new Date),customClass:this.customClass(t)}},this.isDisabled=function(n){return this.minDate&&this.compare(n,this.minDate)<0||this.maxDate&&this.compare(n,this.maxDate)>0||e.dateDisabled&&t.dateDisabled({date:n,mode:t.datepickerMode})},this.customClass=function(e){return t.customClass({date:e,mode:t.datepickerMode})},this.split=function(t,e){for(var n=[];t.length>0;)n.push(t.splice(0,e));return n},this.fixTimeZone=function(t){var e=t.getHours();t.setHours(23===e?e+2:0)},t.select=function(e){if(t.datepickerMode===l.minMode){var n=u.$viewValue?new Date(u.$viewValue):new Date(0,0,0,0,0,0,0);n.setFullYear(e.getFullYear(),e.getMonth(),e.getDate()),u.$setViewValue(n),u.$render()}else l.activeDate=e,t.datepickerMode=l.modes[l.modes.indexOf(t.datepickerMode)-1]},t.move=function(t){var e=l.activeDate.getFullYear()+t*(l.step.years||0),n=l.activeDate.getMonth()+t*(l.step.months||0);l.activeDate.setFullYear(e,n,1),l.refreshView()},t.toggleMode=function(e){e=e||1,t.datepickerMode===l.maxMode&&1===e||t.datepickerMode===l.minMode&&-1===e||(t.datepickerMode=l.modes[l.modes.indexOf(t.datepickerMode)+e])},t.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var c=function(){l.element[0].focus()};t.$on("datepicker.focus",c),t.keydown=function(e){var n=t.keys[e.which];if(n&&!e.shiftKey&&!e.altKey)if(e.preventDefault(),l.shortcutPropagation||e.stopPropagation(),"enter"===n||"space"===n){if(l.isDisabled(l.activeDate))return;t.select(l.activeDate),c()}else!e.ctrlKey||"up"!==n&&"down"!==n?(l.handleKeyDown(n,e),l.refreshView()):(t.toggleMode("up"===n?1:-1),c())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:function(t,e){return e.templateUrl||"template/datepicker/datepicker.html"},scope:{datepickerMode:"=?",dateDisabled:"&",customClass:"&",shortcutPropagation:"&?"},require:["datepicker","^ngModel"],controller:"DatepickerController",controllerAs:"datepicker",link:function(t,e,n,i){var r=i[0],o=i[1];r.init(o)}}}).directive("daypicker",["dateFilter",function(t){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(e,n,i,r){function o(t,e){return 1!==e||t%4!==0||t%100===0&&t%400!==0?l[e]:29}function a(t,e){for(var n,i=new Array(e),o=new Date(t),a=0;e>a;)n=new Date(o),r.fixTimeZone(n),i[a++]=n,o.setDate(o.getDate()+1);return i}function s(t){var e=new Date(t);e.setDate(e.getDate()+4-(e.getDay()||7));var n=e.getTime();return e.setMonth(0),e.setDate(1),Math.floor(Math.round((n-e)/864e5)/7)+1}e.showWeeks=r.showWeeks,r.step={months:1},r.element=n;var l=[31,28,31,30,31,30,31,31,30,31,30,31];r._refreshView=function(){var n=r.activeDate.getFullYear(),i=r.activeDate.getMonth(),o=new Date(n,i,1),l=r.startingDay-o.getDay(),u=l>0?7-l:-l,c=new Date(o);u>0&&c.setDate(-u+1);for(var d=a(c,42),h=0;42>h;h++)d[h]=angular.extend(r.createDateObject(d[h],r.formatDay),{secondary:d[h].getMonth()!==i,uid:e.uniqueId+"-"+h});e.labels=new Array(7);
for(var p=0;7>p;p++)e.labels[p]={abbr:t(d[p].date,r.formatDayHeader),full:t(d[p].date,"EEEE")};if(e.title=t(r.activeDate,r.formatDayTitle),e.rows=r.split(d,7),e.showWeeks){e.weekNumbers=[];for(var f=(11-r.startingDay)%7,g=e.rows.length,m=0;g>m;m++)e.weekNumbers.push(s(e.rows[m][f].date))}},r.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth(),t.getDate())-new Date(e.getFullYear(),e.getMonth(),e.getDate())},r.handleKeyDown=function(t){var e=r.activeDate.getDate();if("left"===t)e-=1;else if("up"===t)e-=7;else if("right"===t)e+=1;else if("down"===t)e+=7;else if("pageup"===t||"pagedown"===t){var n=r.activeDate.getMonth()+("pageup"===t?-1:1);r.activeDate.setMonth(n,1),e=Math.min(o(r.activeDate.getFullYear(),r.activeDate.getMonth()),e)}else"home"===t?e=1:"end"===t&&(e=o(r.activeDate.getFullYear(),r.activeDate.getMonth()));r.activeDate.setDate(e)},r.refreshView()}}}]).directive("monthpicker",["dateFilter",function(t){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(e,n,i,r){r.step={years:1},r.element=n,r._refreshView=function(){for(var n,i=new Array(12),o=r.activeDate.getFullYear(),a=0;12>a;a++)n=new Date(o,a,1),r.fixTimeZone(n),i[a]=angular.extend(r.createDateObject(n,r.formatMonth),{uid:e.uniqueId+"-"+a});e.title=t(r.activeDate,r.formatMonthTitle),e.rows=r.split(i,3)},r.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth())-new Date(e.getFullYear(),e.getMonth())},r.handleKeyDown=function(t){var e=r.activeDate.getMonth();if("left"===t)e-=1;else if("up"===t)e-=3;else if("right"===t)e+=1;else if("down"===t)e+=3;else if("pageup"===t||"pagedown"===t){var n=r.activeDate.getFullYear()+("pageup"===t?-1:1);r.activeDate.setFullYear(n)}else"home"===t?e=0:"end"===t&&(e=11);r.activeDate.setMonth(e)},r.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(t,e,n,i){function r(t){return parseInt((t-1)/o,10)*o+1}var o=i.yearRange;i.step={years:o},i.element=e,i._refreshView=function(){for(var e,n=new Array(o),a=0,s=r(i.activeDate.getFullYear());o>a;a++)e=new Date(s+a,0,1),i.fixTimeZone(e),n[a]=angular.extend(i.createDateObject(e,i.formatYear),{uid:t.uniqueId+"-"+a});t.title=[n[0].label,n[o-1].label].join(" - "),t.rows=i.split(n,5)},i.compare=function(t,e){return t.getFullYear()-e.getFullYear()},i.handleKeyDown=function(t){var e=i.activeDate.getFullYear();"left"===t?e-=1:"up"===t?e-=5:"right"===t?e+=1:"down"===t?e+=5:"pageup"===t||"pagedown"===t?e+=("pageup"===t?-1:1)*i.step.years:"home"===t?e=r(i.activeDate.getFullYear()):"end"===t&&(e=r(i.activeDate.getFullYear())+o-1),i.activeDate.setFullYear(e)},i.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"template/datepicker/popup.html",datepickerTemplateUrl:"template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0,onOpenFocus:!0}).directive("datepickerPopup",["$compile","$parse","$document","$rootScope","$position","dateFilter","dateParser","datepickerPopupConfig","$timeout",function(t,e,n,i,r,o,a,s,l){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&",customClass:"&"},link:function(u,c,d,h){function p(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}function f(t){if(angular.isNumber(t)&&(t=new Date(t)),t){if(angular.isDate(t)&&!isNaN(t))return t;if(angular.isString(t)){var e=a.parse(t,m,u.date);return isNaN(e)?void 0:e}return void 0}return null}function g(t,e){var n=t||e;if(!d.ngRequired&&!n)return!0;if(angular.isNumber(n)&&(n=new Date(n)),n){if(angular.isDate(n)&&!isNaN(n))return!0;if(angular.isString(n)){var i=a.parse(n,m);return!isNaN(i)}return!1}return!0}var m,v=angular.isDefined(d.closeOnDateSelection)?u.$parent.$eval(d.closeOnDateSelection):s.closeOnDateSelection,y=angular.isDefined(d.datepickerAppendToBody)?u.$parent.$eval(d.datepickerAppendToBody):s.appendToBody,b=angular.isDefined(d.onOpenFocus)?u.$parent.$eval(d.onOpenFocus):s.onOpenFocus,w=angular.isDefined(d.datepickerPopupTemplateUrl)?d.datepickerPopupTemplateUrl:s.datepickerPopupTemplateUrl,x=angular.isDefined(d.datepickerTemplateUrl)?d.datepickerTemplateUrl:s.datepickerTemplateUrl;u.showButtonBar=angular.isDefined(d.showButtonBar)?u.$parent.$eval(d.showButtonBar):s.showButtonBar,u.getText=function(t){return u[t+"Text"]||s[t+"Text"]};var _=!1;if(s.html5Types[d.type]?(m=s.html5Types[d.type],_=!0):(m=d.datepickerPopup||s.datepickerPopup,d.$observe("datepickerPopup",function(t){var e=t||s.datepickerPopup;if(e!==m&&(m=e,h.$modelValue=null,!m))throw new Error("datepickerPopup must have a date format specified.")})),!m)throw new Error("datepickerPopup must have a date format specified.");if(_&&d.datepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");var S=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");S.attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":w});var C=angular.element(S.children()[0]);if(C.attr("template-url",x),_&&"month"==d.type&&(C.attr("datepicker-mode",'"month"'),C.attr("min-mode","month")),d.datepickerOptions){var O=u.$parent.$eval(d.datepickerOptions);O&&O.initDate&&(u.initDate=O.initDate,C.attr("init-date","initDate"),delete O.initDate),angular.forEach(O,function(t,e){C.attr(p(e),t)})}u.watchData={},angular.forEach(["minMode","maxMode","minDate","maxDate","datepickerMode","initDate","shortcutPropagation"],function(t){if(d[t]){var n=e(d[t]);if(u.$parent.$watch(n,function(e){u.watchData[t]=e}),C.attr(p(t),"watchData."+t),"datepickerMode"===t){var i=n.assign;u.$watch("watchData."+t,function(t,e){angular.isFunction(i)&&t!==e&&i(u.$parent,t)})}}}),d.dateDisabled&&C.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),d.showWeeks&&C.attr("show-weeks",d.showWeeks),d.customClass&&C.attr("custom-class","customClass({ date: date, mode: mode })"),_?h.$formatters.push(function(t){return u.date=t,t}):(h.$$parserName="date",h.$validators.date=g,h.$parsers.unshift(f),h.$formatters.push(function(t){return u.date=t,h.$isEmpty(t)?t:o(t,m)})),u.dateSelection=function(t){angular.isDefined(t)&&(u.date=t);var e=u.date?o(u.date,m):null;c.val(e),h.$setViewValue(e),v&&(u.isOpen=!1,c[0].focus())},h.$viewChangeListeners.push(function(){u.date=a.parse(h.$viewValue,m,u.date)});var D=function(t){u.isOpen&&!c[0].contains(t.target)&&u.$apply(function(){u.isOpen=!1})},k=function(t){27===t.which&&u.isOpen?(t.preventDefault(),t.stopPropagation(),u.$apply(function(){u.isOpen=!1}),c[0].focus()):40!==t.which||u.isOpen||(t.preventDefault(),t.stopPropagation(),u.$apply(function(){u.isOpen=!0}))};c.bind("keydown",k),u.keydown=function(t){27===t.which&&(u.isOpen=!1,c[0].focus())},u.$watch("isOpen",function(t){t?(u.position=y?r.offset(c):r.position(c),u.position.top=u.position.top+c.prop("offsetHeight"),l(function(){b&&u.$broadcast("datepicker.focus"),n.bind("click",D)},0,!1)):n.unbind("click",D)}),u.select=function(t){if("today"===t){var e=new Date;angular.isDate(u.date)?(t=new Date(u.date),t.setFullYear(e.getFullYear(),e.getMonth(),e.getDate())):t=new Date(e.setHours(0,0,0,0))}u.dateSelection(t)},u.close=function(){u.isOpen=!1,c[0].focus()};var T=t(S)(u);S.remove(),y?n.find("body").append(T):c.after(T),u.$on("$destroy",function(){u.isOpen===!0&&(i.$$phase||u.$apply(function(){u.isOpen=!1})),T.remove(),c.unbind("keydown",k),n.unbind("click",D)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:function(t,e){return e.templateUrl||"template/datepicker/popup.html"}}}),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document","$rootScope",function(t,e){var n=null;this.open=function(e){n||(t.bind("click",i),t.bind("keydown",r)),n&&n!==e&&(n.isOpen=!1),n=e},this.close=function(e){n===e&&(n=null,t.unbind("click",i),t.unbind("keydown",r))};var i=function(t){if(n&&(!t||"disabled"!==n.getAutoClose())){var i=n.getToggleElement();if(!(t&&i&&i[0].contains(t.target))){var r=n.getDropdownElement();t&&"outsideClick"===n.getAutoClose()&&r&&r[0].contains(t.target)||(n.isOpen=!1,e.$$phase||n.$apply())}}},r=function(t){27===t.which?(n.focusToggleElement(),i()):n.isKeynavEnabled()&&/(38|40)/.test(t.which)&&n.isOpen&&(t.preventDefault(),t.stopPropagation(),n.focusDropdownEntry(t.which))}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate","$position","$document","$compile","$templateRequest",function(t,e,n,i,r,o,a,s,l,u){var c,d,h=this,p=t.$new(),f=i.openClass,g=angular.noop,m=e.onToggle?n(e.onToggle):angular.noop,v=!1,y=!1;this.init=function(i){h.$element=i,e.isOpen&&(d=n(e.isOpen),g=d.assign,t.$watch(d,function(t){p.isOpen=!!t})),v=angular.isDefined(e.dropdownAppendToBody),y=angular.isDefined(e.keyboardNav),v&&h.dropdownMenu&&(s.find("body").append(h.dropdownMenu),i.on("$destroy",function(){h.dropdownMenu.remove()}))},this.toggle=function(t){return p.isOpen=arguments.length?!!t:!p.isOpen},this.isOpen=function(){return p.isOpen},p.getToggleElement=function(){return h.toggleElement},p.getAutoClose=function(){return e.autoClose||"always"},p.getElement=function(){return h.$element},p.isKeynavEnabled=function(){return y},p.focusDropdownEntry=function(t){var e=h.dropdownMenu?angular.element(h.dropdownMenu).find("a"):angular.element(h.$element).find("ul").eq(0).find("a");switch(t){case 40:h.selectedOption=angular.isNumber(h.selectedOption)?h.selectedOption===e.length-1?h.selectedOption:h.selectedOption+1:0;break;case 38:if(!angular.isNumber(h.selectedOption))return;h.selectedOption=0===h.selectedOption?0:h.selectedOption-1}e[h.selectedOption].focus()},p.getDropdownElement=function(){return h.dropdownMenu},p.focusToggleElement=function(){h.toggleElement&&h.toggleElement[0].focus()},p.$watch("isOpen",function(e,n){if(v&&h.dropdownMenu){var i=a.positionElements(h.$element,h.dropdownMenu,"bottom-left",!0),s={top:i.top+"px",display:e?"block":"none"},d=h.dropdownMenu.hasClass("dropdown-menu-right");d?(s.left="auto",s.right=window.innerWidth-(i.left+h.$element.prop("offsetWidth"))+"px"):(s.left=i.left+"px",s.right="auto"),h.dropdownMenu.css(s)}if(o[e?"addClass":"removeClass"](h.$element,f).then(function(){angular.isDefined(e)&&e!==n&&m(t,{open:!!e})}),e)h.dropdownMenuTemplateUrl&&u(h.dropdownMenuTemplateUrl).then(function(t){c=p.$new(),l(t.trim())(c,function(t){var e=t;h.dropdownMenu.replaceWith(e),h.dropdownMenu=e})}),p.focusToggleElement(),r.open(p);else{if(h.dropdownMenuTemplateUrl){c&&c.$destroy();var y=angular.element('<ul class="dropdown-menu"></ul>');h.dropdownMenu.replaceWith(y),h.dropdownMenu=y}r.close(p),h.selectedOption=null}angular.isFunction(g)&&g(t,e)}),t.$on("$locationChangeSuccess",function(){"disabled"!==p.getAutoClose()&&(p.isOpen=!1)}),t.$on("$destroy",function(){p.$destroy()})}]).directive("dropdown",function(){return{controller:"DropdownController",link:function(t,e,n,i){i.init(e),e.addClass("dropdown")}}}).directive("dropdownMenu",function(){return{restrict:"AC",require:"?^dropdown",link:function(t,e,n,i){if(i){var r=n.templateUrl;r&&(i.dropdownMenuTemplateUrl=r),i.dropdownMenu||(i.dropdownMenu=e)}}}}).directive("keyboardNav",function(){return{restrict:"A",require:"?^dropdown",link:function(t,e,n,i){e.bind("keydown",function(t){if(-1!==[38,40].indexOf(t.which)){t.preventDefault(),t.stopPropagation();var e=i.dropdownMenu.find("a");switch(t.which){case 40:i.selectedOption=angular.isNumber(i.selectedOption)?i.selectedOption===e.length-1?i.selectedOption:i.selectedOption+1:0;break;case 38:i.selectedOption=0===i.selectedOption?0:i.selectedOption-1}e[i.selectedOption].focus()}})}}}).directive("dropdownToggle",function(){return{require:"?^dropdown",link:function(t,e,n,i){if(i){e.addClass("dropdown-toggle"),i.toggleElement=e;var r=function(r){r.preventDefault(),e.hasClass("disabled")||n.disabled||t.$apply(function(){i.toggle()})};e.bind("click",r),e.attr({"aria-haspopup":!0,"aria-expanded":!1}),t.$watch(i.isOpen,function(t){e.attr("aria-expanded",!!t)}),t.$on("$destroy",function(){e.unbind("click",r)})}}}}),angular.module("ui.bootstrap.modal",[]).factory("$$stackedMap",function(){return{createNew:function(){var t=[];return{add:function(e,n){t.push({key:e,value:n})},get:function(e){for(var n=0;n<t.length;n++)if(e==t[n].key)return t[n]},keys:function(){for(var e=[],n=0;n<t.length;n++)e.push(t[n].key);return e},top:function(){return t[t.length-1]},remove:function(e){for(var n=-1,i=0;i<t.length;i++)if(e==t[i].key){n=i;break}return t.splice(n,1)[0]},removeTop:function(){return t.splice(t.length-1,1)[0]},length:function(){return t.length}}}}}).directive("modalBackdrop",["$animate","$injector","$modalStack",function(t,e,n){function i(e,i,o){o.modalInClass&&(r?r(i,{addClass:o.modalInClass}).start():t.addClass(i,o.modalInClass),e.$on(n.NOW_CLOSING_EVENT,function(e,n){var a=n();r?r(i,{removeClass:o.modalInClass}).start().then(a):t.removeClass(i,o.modalInClass).then(a)}))}var r=null;return e.has("$animateCss")&&(r=e.get("$animateCss")),{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",compile:function(t,e){return t.addClass(e.backdropClass),i}}}]).directive("modalWindow",["$modalStack","$q","$animate","$injector",function(t,e,n,i){var r=null;return i.has("$animateCss")&&(r=i.get("$animateCss")),{restrict:"EA",scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(t,e){return e.templateUrl||"template/modal/window.html"},link:function(i,o,a){o.addClass(a.windowClass||""),i.size=a.size,i.close=function(e){var n=t.getTop();n&&n.value.backdrop&&"static"!=n.value.backdrop&&e.target===e.currentTarget&&(e.preventDefault(),e.stopPropagation(),t.dismiss(n.key,"backdrop click"))},i.$isRendered=!0;var s=e.defer();a.$observe("modalRender",function(t){"true"==t&&s.resolve()}),s.promise.then(function(){a.modalInClass&&(r?r(o,{addClass:a.modalInClass}).start():n.addClass(o,a.modalInClass),i.$on(t.NOW_CLOSING_EVENT,function(t,e){var i=e();r?r(o,{removeClass:a.modalInClass}).start().then(i):n.removeClass(o,a.modalInClass).then(i)}));var e=o[0].querySelectorAll("[autofocus]");e.length?e[0].focus():o[0].focus();var s=t.getTop();s&&t.modalRendered(s.key)})}}}]).directive("modalAnimationClass",[function(){return{compile:function(t,e){e.modalAnimation&&t.addClass(e.modalAnimationClass)}}}]).directive("modalTransclude",function(){return{link:function(t,e,n,i,r){r(t.$parent,function(t){e.empty(),e.append(t)})}}}).factory("$modalStack",["$animate","$timeout","$document","$compile","$rootScope","$q","$injector","$$stackedMap",function(t,e,n,i,r,o,a,s){function l(){for(var t=-1,e=y.keys(),n=0;n<e.length;n++)y.get(e[n]).value.backdrop&&(t=n);return t}function u(t,e){var i=n.find("body").eq(0),r=y.get(t).value;y.remove(t),d(r.modalDomEl,r.modalScope,function(){i.toggleClass(t.openedClass||v,y.length()>0)}),c(),e&&e.focus?e.focus():i.focus()}function c(){if(f&&-1==l()){var t=g;d(f,g,function(){t=null}),f=void 0,g=void 0}}function d(e,n,i){function r(){r.done||(r.done=!0,p?p(e,{event:"leave"}).start().then(function(){e.remove()}):t.leave(e),n.$destroy(),i&&i())}var a,s=null,l=function(){return a||(a=o.defer(),s=a.promise),function(){a.resolve()}};return n.$broadcast(b.NOW_CLOSING_EVENT,l),o.when(s).then(r)}function h(t,e,n){return!t.value.modalScope.$broadcast("modal.closing",e,n).defaultPrevented}var p=null;a.has("$animateCss")&&(p=a.get("$animateCss"));var f,g,m,v="modal-open",y=s.createNew(),b={NOW_CLOSING_EVENT:"modal.stack.now-closing"},w=0,x="a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable=true]";return r.$watch(l,function(t){g&&(g.index=t)}),n.bind("keydown",function(t){if(t.isDefaultPrevented())return t;var e=y.top();if(e&&e.value.keyboard)switch(t.which){case 27:t.preventDefault(),r.$apply(function(){b.dismiss(e.key,"escape key press")});break;case 9:b.loadFocusElementList(e);var n=!1;t.shiftKey?b.isFocusInFirstItem(t)&&(n=b.focusLastFocusableElement()):b.isFocusInLastItem(t)&&(n=b.focusFirstFocusableElement()),n&&(t.preventDefault(),t.stopPropagation())}}),b.open=function(t,e){var o=n[0].activeElement;y.add(t,{deferred:e.deferred,renderDeferred:e.renderDeferred,modalScope:e.scope,backdrop:e.backdrop,keyboard:e.keyboard,openedClass:e.openedClass});var a=n.find("body").eq(0),s=l();if(s>=0&&!f){g=r.$new(!0),g.index=s;var u=angular.element('<div modal-backdrop="modal-backdrop"></div>');u.attr("backdrop-class",e.backdropClass),e.animation&&u.attr("modal-animation","true"),f=i(u)(g),a.append(f)}var c=angular.element('<div modal-window="modal-window"></div>');c.attr({"template-url":e.windowTemplateUrl,"window-class":e.windowClass,size:e.size,index:y.length()-1,animate:"animate"}).html(e.content),e.animation&&c.attr("modal-animation","true");var d=i(c)(e.scope);y.top().value.modalDomEl=d,y.top().value.modalOpener=o,a.append(d),a.addClass(e.openedClass||v),b.clearFocusListCache()},b.close=function(t,e){var n=y.get(t);return n&&h(n,e,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(e),u(t,n.value.modalOpener),!0):!n},b.dismiss=function(t,e){var n=y.get(t);return n&&h(n,e,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(e),u(t,n.value.modalOpener),!0):!n},b.dismissAll=function(t){for(var e=this.getTop();e&&this.dismiss(e.key,t);)e=this.getTop()},b.getTop=function(){return y.top()},b.modalRendered=function(t){var e=y.get(t);e&&e.value.renderDeferred.resolve()},b.focusFirstFocusableElement=function(){return m.length>0?(m[0].focus(),!0):!1},b.focusLastFocusableElement=function(){return m.length>0?(m[m.length-1].focus(),!0):!1},b.isFocusInFirstItem=function(t){return m.length>0?(t.target||t.srcElement)==m[0]:!1},b.isFocusInLastItem=function(t){return m.length>0?(t.target||t.srcElement)==m[m.length-1]:!1},b.clearFocusListCache=function(){m=[],w=0},b.loadFocusElementList=function(t){if((void 0===m||!m.length0)&&t){var e=t.value.modalDomEl;e&&e.length&&(m=e[0].querySelectorAll(x))}},b}]).provider("$modal",function(){var t={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$templateRequest","$controller","$modalStack",function(e,n,i,r,o,a){function s(t){return t.template?i.when(t.template):r(angular.isFunction(t.templateUrl)?t.templateUrl():t.templateUrl)}function l(t){var n=[];return angular.forEach(t,function(t){angular.isFunction(t)||angular.isArray(t)?n.push(i.when(e.invoke(t))):angular.isString(t)&&n.push(i.when(e.get(t)))}),n}var u={};return u.open=function(e){var r=i.defer(),u=i.defer(),c=i.defer(),d={result:r.promise,opened:u.promise,rendered:c.promise,close:function(t){return a.close(d,t)},dismiss:function(t){return a.dismiss(d,t)}};if(e=angular.extend({},t.options,e),e.resolve=e.resolve||{},!e.template&&!e.templateUrl)throw new Error("One of template or templateUrl options is required.");var h=i.all([s(e)].concat(l(e.resolve)));return h.then(function(t){var i=(e.scope||n).$new();i.$close=d.close,i.$dismiss=d.dismiss,i.$on("$destroy",function(){i.$$uibDestructionScheduled||i.$dismiss("$uibUnscheduledDestruction")});var s,l={},u=1;e.controller&&(l.$scope=i,l.$modalInstance=d,angular.forEach(e.resolve,function(e,n){l[n]=t[u++]}),s=o(e.controller,l),e.controllerAs&&(e.bindToController&&angular.extend(s,i),i[e.controllerAs]=s)),a.open(d,{scope:i,deferred:r,renderDeferred:c,content:t[0],animation:e.animation,backdrop:e.backdrop,keyboard:e.keyboard,backdropClass:e.backdropClass,windowClass:e.windowClass,windowTemplateUrl:e.windowTemplateUrl,size:e.size,openedClass:e.openedClass})},function(t){r.reject(t)}),h.then(function(){u.resolve(!0)},function(t){u.reject(t)}),d},u}]};return t}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(t,e,n){var i=this,r={$setViewValue:angular.noop},o=e.numPages?n(e.numPages).assign:angular.noop;this.init=function(a,s){r=a,this.config=s,r.$render=function(){i.render()},e.itemsPerPage?t.$parent.$watch(n(e.itemsPerPage),function(e){i.itemsPerPage=parseInt(e,10),t.totalPages=i.calculateTotalPages()}):this.itemsPerPage=s.itemsPerPage,t.$watch("totalItems",function(){t.totalPages=i.calculateTotalPages()}),t.$watch("totalPages",function(e){o(t.$parent,e),t.page>e?t.selectPage(e):r.$render()})},this.calculateTotalPages=function(){var e=this.itemsPerPage<1?1:Math.ceil(t.totalItems/this.itemsPerPage);return Math.max(e||0,1)},this.render=function(){t.page=parseInt(r.$viewValue,10)||1},t.selectPage=function(e,n){n&&n.preventDefault();var i=!t.ngDisabled||!n;i&&t.page!==e&&e>0&&e<=t.totalPages&&(n&&n.target&&n.target.blur(),r.$setViewValue(e),r.$render())},t.getText=function(e){return t[e+"Text"]||i.config[e+"Text"]},t.noPrevious=function(){return 1===t.page},t.noNext=function(){return t.page===t.totalPages}}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(t,e){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["pagination","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(t,e){return e.templateUrl||"template/pagination/pagination.html"},replace:!0,link:function(n,i,r,o){function a(t,e,n){return{number:t,text:e,active:n}}function s(t,e){var n=[],i=1,r=e,o=angular.isDefined(c)&&e>c;o&&(d?(i=Math.max(t-Math.floor(c/2),1),r=i+c-1,r>e&&(r=e,i=r-c+1)):(i=(Math.ceil(t/c)-1)*c+1,r=Math.min(i+c-1,e)));for(var s=i;r>=s;s++){var l=a(s,s,s===t);n.push(l)}if(o&&!d){if(i>1){var u=a(i-1,"...",!1);n.unshift(u)}if(e>r){var h=a(r+1,"...",!1);n.push(h)}}return n}var l=o[0],u=o[1];if(u){var c=angular.isDefined(r.maxSize)?n.$parent.$eval(r.maxSize):e.maxSize,d=angular.isDefined(r.rotate)?n.$parent.$eval(r.rotate):e.rotate;n.boundaryLinks=angular.isDefined(r.boundaryLinks)?n.$parent.$eval(r.boundaryLinks):e.boundaryLinks,n.directionLinks=angular.isDefined(r.directionLinks)?n.$parent.$eval(r.directionLinks):e.directionLinks,l.init(u,e),r.maxSize&&n.$parent.$watch(t(r.maxSize),function(t){c=parseInt(t,10),l.render()});var h=l.render;l.render=function(){h(),n.page>0&&n.page<=n.totalPages&&(n.pages=s(n.page,n.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(t){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(e,n,i,r){var o=r[0],a=r[1];a&&(e.align=angular.isDefined(i.align)?e.$parent.$eval(i.align):t.align,o.init(a,t))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function t(t){var e=/[A-Z]/g,n="-";return t.replace(e,function(t,e){return(e?n:"")+t.toLowerCase()})}var e={placement:"top",animation:!0,popupDelay:0,useContentExp:!1},n={mouseenter:"mouseleave",click:"click",focus:"blur"},i={};this.options=function(t){angular.extend(i,t)},this.setTriggers=function(t){angular.extend(n,t)},this.$get=["$window","$compile","$timeout","$document","$position","$interpolate","$rootScope",function(r,o,a,s,l,u,c){return function(r,d,h,p){function f(t){var e=(t||p.trigger||h).split(" "),i=e.map(function(t){return n[t]||t});return{show:e,hide:i}}p=angular.extend({},e,i,p);var g=t(r),m=u.startSymbol(),v=u.endSymbol(),y="<div "+g+'-popup title="'+m+"title"+v+'" '+(p.useContentExp?'content-exp="contentExp()" ':'content="'+m+"content"+v+'" ')+'placement="'+m+"placement"+v+'" popup-class="'+m+"popupClass"+v+'" animation="animation" is-open="isOpen"origin-scope="origScope" ></div>';return{restrict:"EA",compile:function(){var t=o(y);return function(e,n,i){function o(){$.isOpen?h():u()}function u(){(!P||e.$eval(i[d+"Enable"]))&&(b(),$.popupDelay?k||(k=a(g,$.popupDelay,!1),k.then(function(t){t()})):g()())}function h(){m(),c.$$phase||c.$digest()}function g(){return k=null,D&&(a.cancel(D),D=null),(p.useContentExp?$.contentExp():$.content)?(v(),C.css({top:0,left:0,display:"block"}),I(),$.isOpen=!0,$.$apply(),I):angular.noop}function m(){$.isOpen=!1,a.cancel(k),k=null,$.animation?D||(D=a(y,500)):y()}function v(){C&&y(),O=$.$new(),C=t(O,function(t){T?s.find("body").append(t):n.after(t)}),p.useContentExp&&(O.$watch("contentExp()",function(t){!t&&$.isOpen&&m()}),O.$watch(function(){M||(M=!0,O.$$postDigest(function(){M=!1,A()}))}))}function y(){D=null,C&&(C.remove(),C=null),O&&(O.$destroy(),O=null)}function b(){w(),x(),_()}function w(){$.popupClass=i[d+"Class"]}function x(){var t=i[d+"Placement"];$.placement=angular.isDefined(t)?t:p.placement}function _(){var t=i[d+"PopupDelay"],e=parseInt(t,10);$.popupDelay=isNaN(e)?p.popupDelay:e}function S(){var t=i[d+"Trigger"];W(),E=f(t),E.show.forEach(function(t,e){t===E.hide[e]?n.bind(t,o):t&&(n.bind(t,u),n.bind(E.hide[e],h))})}var C,O,D,k,T=angular.isDefined(p.appendToBody)?p.appendToBody:!1,E=f(void 0),P=angular.isDefined(i[d+"Enable"]),$=e.$new(!0),M=!1,I=function(){if(C){var t=l.positionElements(n,C,$.placement,T);t.top+="px",t.left+="px",C.css(t)}},A=function(){a(I,0,!1)};$.origScope=e,$.isOpen=!1,$.contentExp=function(){return e.$eval(i[r])},p.useContentExp||i.$observe(r,function(t){$.content=t,!t&&$.isOpen?m():A()}),i.$observe("disabled",function(t){k&&t&&a.cancel(k),t&&$.isOpen&&m()}),i.$observe(d+"Title",function(t){$.title=t,A()}),i.$observe(d+"Placement",function(){$.isOpen&&a(function(){x(),g()()},0,!1)});var W=function(){E.show.forEach(function(t){n.unbind(t,u)}),E.hide.forEach(function(t){n.unbind(t,h)})};S();var N=e.$eval(i[d+"Animation"]);$.animation=angular.isDefined(N)?!!N:p.animation;var F=e.$eval(i[d+"AppendToBody"]);T=angular.isDefined(F)?F:T,T&&e.$on("$locationChangeSuccess",function(){$.isOpen&&m()}),e.$on("$destroy",function(){a.cancel(D),a.cancel(k),W(),y(),$=null})}}}}}]}).directive("tooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(t,e,n,i){return{link:function(r,o,a){var s,l,u,c=r.$eval(a.tooltipTemplateTranscludeScope),d=0,h=function(){l&&(l.remove(),l=null),s&&(s.$destroy(),s=null),u&&(t.leave(u).then(function(){l=null}),l=u,u=null)};r.$watch(e.parseAsResourceUrl(a.tooltipTemplateTransclude),function(e){var a=++d;e?(i(e,!0).then(function(i){if(a===d){var r=c.$new(),l=i,p=n(l)(r,function(e){h(),t.enter(e,o)});s=r,u=p,s.$emit("$includeContentLoaded",e)}},function(){a===d&&(h(),r.$emit("$includeContentError",e))}),r.$emit("$includeContentRequested",e)):h()}),r.$on("$destroy",h)}}}]).directive("tooltipClasses",function(){return{restrict:"A",link:function(t,e,n){t.placement&&e.addClass(t.placement),t.popupClass&&e.addClass(t.popupClass),t.animation()&&e.addClass(n.tooltipAnimationClass)}}}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(t){return t("tooltip","tooltip","mouseenter")}]).directive("tooltipTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/tooltip/tooltip-template-popup.html"}}).directive("tooltipTemplate",["$tooltip",function(t){return t("tooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-popup.html"}}).directive("tooltipHtml",["$tooltip",function(t){return t("tooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).value("tooltipHtmlUnsafeSuppressDeprecated",!1).directive("tooltipHtmlUnsafe",["$tooltip","tooltipHtmlUnsafeSuppressDeprecated","$log",function(t,e,n){return e||n.warn("tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead."),t("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/popover/popover-template.html"}}).directive("popoverTemplate",["$tooltip",function(t){return t("popoverTemplate","popover","click",{useContentExp:!0})}]).directive("popoverHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",title:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover-html.html"}}).directive("popoverHtml",["$tooltip",function(t){return t("popoverHtml","popover","click",{useContentExp:!0})}]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(t){return t("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(t,e,n){var i=this,r=angular.isDefined(e.animate)?t.$parent.$eval(e.animate):n.animate;this.bars=[],t.max=angular.isDefined(t.max)?t.max:n.max,this.addBar=function(e,n){r||n.css({transition:"none"}),this.bars.push(e),e.max=t.max,e.$watch("value",function(){e.recalculatePercentage()}),e.recalculatePercentage=function(){e.percent=+(100*e.value/e.max).toFixed(2);var t=0;i.bars.forEach(function(e){t+=e.percent}),t>100&&(e.percent-=t-100)},e.$on("$destroy",function(){n=null,i.removeBar(e)})},this.removeBar=function(t){this.bars.splice(this.bars.indexOf(t),1)},t.$watch("max",function(){i.bars.forEach(function(e){e.max=t.max,e.recalculatePercentage()})})}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(t,e,n,i){i.addBar(t,e)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",max:"=?",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(t,e,n,i){i.addBar(t,angular.element(e.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null,titles:["one","two","three","four","five"]}).controller("RatingController",["$scope","$attrs","ratingConfig",function(t,e,n){var i={$setViewValue:angular.noop};this.init=function(r){i=r,i.$render=this.render,i.$formatters.push(function(t){return angular.isNumber(t)&&t<<0!==t&&(t=Math.round(t)),t}),this.stateOn=angular.isDefined(e.stateOn)?t.$parent.$eval(e.stateOn):n.stateOn,this.stateOff=angular.isDefined(e.stateOff)?t.$parent.$eval(e.stateOff):n.stateOff;var o=angular.isDefined(e.titles)?t.$parent.$eval(e.titles):n.titles;this.titles=angular.isArray(o)&&o.length>0?o:n.titles;var a=angular.isDefined(e.ratingStates)?t.$parent.$eval(e.ratingStates):new Array(angular.isDefined(e.max)?t.$parent.$eval(e.max):n.max);
t.range=this.buildTemplateObjects(a)},this.buildTemplateObjects=function(t){for(var e=0,n=t.length;n>e;e++)t[e]=angular.extend({index:e},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(e)},t[e]);return t},this.getTitle=function(t){return t>=this.titles.length?t+1:this.titles[t]},t.rate=function(e){!t.readonly&&e>=0&&e<=t.range.length&&(i.$setViewValue(i.$viewValue===e?0:e),i.$render())},t.enter=function(e){t.readonly||(t.value=e),t.onHover({value:e})},t.reset=function(){t.value=i.$viewValue,t.onLeave()},t.onKeydown=function(e){/(37|38|39|40)/.test(e.which)&&(e.preventDefault(),e.stopPropagation(),t.rate(t.value+(38===e.which||39===e.which?1:-1)))},this.render=function(){t.value=i.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(t,e,n,i){var r=i[0],o=i[1];r.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(t){var e=this,n=e.tabs=t.tabs=[];e.select=function(t){angular.forEach(n,function(e){e.active&&e!==t&&(e.active=!1,e.onDeselect())}),t.active=!0,t.onSelect()},e.addTab=function(t){n.push(t),1===n.length&&t.active!==!1?t.active=!0:t.active?e.select(t):t.active=!1},e.removeTab=function(t){var r=n.indexOf(t);if(t.active&&n.length>1&&!i){var o=r==n.length-1?r-1:r+1;e.select(n[o])}n.splice(r,1)};var i;t.$on("$destroy",function(){i=!0})}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(t,e,n){t.vertical=angular.isDefined(n.vertical)?t.$parent.$eval(n.vertical):!1,t.justified=angular.isDefined(n.justified)?t.$parent.$eval(n.justified):!1}}}).directive("tab",["$parse","$log",function(t,e){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},link:function(n,i,r,o,a){n.$watch("active",function(t){t&&o.select(n)}),n.disabled=!1,r.disable&&n.$parent.$watch(t(r.disable),function(t){n.disabled=!!t}),r.disabled&&(e.warn('Use of "disabled" attribute has been deprecated, please use "disable"'),n.$parent.$watch(t(r.disabled),function(t){n.disabled=!!t})),n.select=function(){n.disabled||(n.active=!0)},o.addTab(n),n.$on("$destroy",function(){o.removeTab(n)}),n.$transcludeFn=a}}}]).directive("tabHeadingTransclude",[function(){return{restrict:"A",require:"^tab",link:function(t,e){t.$watch("headingElement",function(t){t&&(e.html(""),e.append(t))})}}}]).directive("tabContentTransclude",function(){function t(t){return t.tagName&&(t.hasAttribute("tab-heading")||t.hasAttribute("data-tab-heading")||"tab-heading"===t.tagName.toLowerCase()||"data-tab-heading"===t.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(e,n,i){var r=e.$eval(i.tabContentTransclude);r.$transcludeFn(r.$parent,function(e){angular.forEach(e,function(e){t(e)?r.headingElement=e:n.append(e)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(t,e,n,i,r,o){function a(){var e=parseInt(t.hours,10),n=t.showMeridian?e>0&&13>e:e>=0&&24>e;return n?(t.showMeridian&&(12===e&&(e=0),t.meridian===m[1]&&(e+=12)),e):void 0}function s(){var e=parseInt(t.minutes,10);return e>=0&&60>e?e:void 0}function l(t){return angular.isDefined(t)&&t.toString().length<2?"0"+t:t.toString()}function u(t){c(),g.$setViewValue(new Date(f)),d(t)}function c(){g.$setValidity("time",!0),t.invalidHours=!1,t.invalidMinutes=!1}function d(e){var n=f.getHours(),i=f.getMinutes();t.showMeridian&&(n=0===n||12===n?12:n%12),t.hours="h"===e?n:l(n),"m"!==e&&(t.minutes=l(i)),t.meridian=f.getHours()<12?m[0]:m[1]}function h(t,e){var n=new Date(t.getTime()+6e4*e),i=new Date(t);return i.setHours(n.getHours(),n.getMinutes()),i}function p(t){f=h(f,t),u()}var f=new Date,g={$setViewValue:angular.noop},m=angular.isDefined(e.meridians)?t.$parent.$eval(e.meridians):o.meridians||r.DATETIME_FORMATS.AMPMS;this.init=function(n,i){g=n,g.$render=this.render,g.$formatters.unshift(function(t){return t?new Date(t):null});var r=i.eq(0),a=i.eq(1),s=angular.isDefined(e.mousewheel)?t.$parent.$eval(e.mousewheel):o.mousewheel;s&&this.setupMousewheelEvents(r,a);var l=angular.isDefined(e.arrowkeys)?t.$parent.$eval(e.arrowkeys):o.arrowkeys;l&&this.setupArrowkeyEvents(r,a),t.readonlyInput=angular.isDefined(e.readonlyInput)?t.$parent.$eval(e.readonlyInput):o.readonlyInput,this.setupInputEvents(r,a)};var v=o.hourStep;e.hourStep&&t.$parent.$watch(n(e.hourStep),function(t){v=parseInt(t,10)});var y=o.minuteStep;e.minuteStep&&t.$parent.$watch(n(e.minuteStep),function(t){y=parseInt(t,10)});var b;t.$parent.$watch(n(e.min),function(t){var e=new Date(t);b=isNaN(e)?void 0:e});var w;t.$parent.$watch(n(e.max),function(t){var e=new Date(t);w=isNaN(e)?void 0:e}),t.noIncrementHours=function(){var t=h(f,60*v);return t>w||f>t&&b>t},t.noDecrementHours=function(){var t=h(f,60*-v);return b>t||t>f&&t>w},t.noIncrementMinutes=function(){var t=h(f,y);return t>w||f>t&&b>t},t.noDecrementMinutes=function(){var t=h(f,-y);return b>t||t>f&&t>w},t.noToggleMeridian=function(){return f.getHours()<13?h(f,720)>w:h(f,-720)<b},t.showMeridian=o.showMeridian,e.showMeridian&&t.$parent.$watch(n(e.showMeridian),function(e){if(t.showMeridian=!!e,g.$error.time){var n=a(),i=s();angular.isDefined(n)&&angular.isDefined(i)&&(f.setHours(n),u())}else d()}),this.setupMousewheelEvents=function(e,n){var i=function(t){t.originalEvent&&(t=t.originalEvent);var e=t.wheelDelta?t.wheelDelta:-t.deltaY;return t.detail||e>0};e.bind("mousewheel wheel",function(e){t.$apply(i(e)?t.incrementHours():t.decrementHours()),e.preventDefault()}),n.bind("mousewheel wheel",function(e){t.$apply(i(e)?t.incrementMinutes():t.decrementMinutes()),e.preventDefault()})},this.setupArrowkeyEvents=function(e,n){e.bind("keydown",function(e){38===e.which?(e.preventDefault(),t.incrementHours(),t.$apply()):40===e.which&&(e.preventDefault(),t.decrementHours(),t.$apply())}),n.bind("keydown",function(e){38===e.which?(e.preventDefault(),t.incrementMinutes(),t.$apply()):40===e.which&&(e.preventDefault(),t.decrementMinutes(),t.$apply())})},this.setupInputEvents=function(e,n){if(t.readonlyInput)return t.updateHours=angular.noop,void(t.updateMinutes=angular.noop);var i=function(e,n){g.$setViewValue(null),g.$setValidity("time",!1),angular.isDefined(e)&&(t.invalidHours=e),angular.isDefined(n)&&(t.invalidMinutes=n)};t.updateHours=function(){var t=a();angular.isDefined(t)?(f.setHours(t),b>f||f>w?i(!0):u("h")):i(!0)},e.bind("blur",function(){!t.invalidHours&&t.hours<10&&t.$apply(function(){t.hours=l(t.hours)})}),t.updateMinutes=function(){var t=s();angular.isDefined(t)?(f.setMinutes(t),b>f||f>w?i(void 0,!0):u("m")):i(void 0,!0)},n.bind("blur",function(){!t.invalidMinutes&&t.minutes<10&&t.$apply(function(){t.minutes=l(t.minutes)})})},this.render=function(){var e=g.$viewValue;isNaN(e)?(g.$setValidity("time",!1),i.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(e&&(f=e),b>f||f>w?(g.$setValidity("time",!1),t.invalidHours=!0,t.invalidMinutes=!0):c(),d())},t.showSpinners=angular.isDefined(e.showSpinners)?t.$parent.$eval(e.showSpinners):o.showSpinners,t.incrementHours=function(){t.noIncrementHours()||p(60*v)},t.decrementHours=function(){t.noDecrementHours()||p(60*-v)},t.incrementMinutes=function(){t.noIncrementMinutes()||p(y)},t.decrementMinutes=function(){t.noDecrementMinutes()||p(-y)},t.toggleMeridian=function(){t.noToggleMeridian()||p(720*(f.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",replace:!0,scope:{},templateUrl:"template/timepicker/timepicker.html",link:function(t,e,n,i){var r=i[0],o=i[1];o&&r.init(o,e.find("input"))}}}),angular.module("ui.bootstrap.transition",[]).value("$transitionSuppressDeprecated",!1).factory("$transition",["$q","$timeout","$rootScope","$log","$transitionSuppressDeprecated",function(t,e,n,i,r){function o(t){for(var e in t)if(void 0!==s.style[e])return t[e]}r||i.warn("$transition is now deprecated. Use $animate from ngAnimate instead.");var a=function(i,r,o){o=o||{};var s=t.defer(),l=a[o.animation?"animationEndEventName":"transitionEndEventName"],u=function(){n.$apply(function(){i.unbind(l,u),s.resolve(i)})};return l&&i.bind(l,u),e(function(){angular.isString(r)?i.addClass(r):angular.isFunction(r)?r(i):angular.isObject(r)&&i.css(r),l||s.resolve(i)}),s.promise.cancel=function(){l&&i.unbind(l,u),s.reject("Transition cancelled")},s.promise},s=document.createElement("trans"),l={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},u={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return a.transitionEndEventName=o(l),a.animationEndEventName=o(u),a}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).factory("typeaheadParser",["$parse",function(t){var e=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var i=n.match(e);if(!i)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:i[3],source:t(i[4]),viewMapper:t(i[2]||i[1]),modelMapper:t(i[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$window","$rootScope","$position","typeaheadParser",function(t,e,n,i,r,o,a,s,l){var u=[9,13,27,38,40],c=200;return{require:"ngModel",link:function(d,h,p,f){function g(){M.moveInProgress||(M.moveInProgress=!0,M.$digest()),R&&i.cancel(R),R=i(function(){M.matches.length&&m(),M.moveInProgress=!1,M.$digest()},c)}function m(){M.position=k?s.offset(h):s.position(h),M.position.top+=h.prop("offsetHeight")}var v=d.$eval(p.typeaheadMinLength);v||0===v||(v=1);var y,b,w=d.$eval(p.typeaheadWaitMs)||0,x=d.$eval(p.typeaheadEditable)!==!1,_=e(p.typeaheadLoading).assign||angular.noop,S=e(p.typeaheadOnSelect),C=angular.isDefined(p.typeaheadSelectOnBlur)?d.$eval(p.typeaheadSelectOnBlur):!1,O=e(p.typeaheadNoResults).assign||angular.noop,D=p.typeaheadInputFormatter?e(p.typeaheadInputFormatter):void 0,k=p.typeaheadAppendToBody?d.$eval(p.typeaheadAppendToBody):!1,T=d.$eval(p.typeaheadFocusFirst)!==!1,E=p.typeaheadSelectOnExact?d.$eval(p.typeaheadSelectOnExact):!1,P=e(p.ngModel).assign,$=l.parse(p.typeahead),M=d.$new();d.$on("$destroy",function(){M.$destroy()});var I="typeahead-"+M.$id+"-"+Math.floor(1e4*Math.random());h.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":I});var A=angular.element("<div typeahead-popup></div>");A.attr({id:I,matches:"matches",active:"activeIdx",select:"select(activeIdx)","move-in-progress":"moveInProgress",query:"query",position:"position"}),angular.isDefined(p.typeaheadTemplateUrl)&&A.attr("template-url",p.typeaheadTemplateUrl);var W=function(){M.matches=[],M.activeIdx=-1,h.attr("aria-expanded",!1)},N=function(t){return I+"-option-"+t};M.$watch("activeIdx",function(t){0>t?h.removeAttr("aria-activedescendant"):h.attr("aria-activedescendant",N(t))});var F=function(t,e){return M.matches.length>e&&t?t.toUpperCase()===M.matches[e].label.toUpperCase():!1},L=function(t){var e={$viewValue:t};_(d,!0),O(d,!1),n.when($.source(d,e)).then(function(n){var i=t===f.$viewValue;if(i&&y)if(n&&n.length>0){M.activeIdx=T?0:-1,O(d,!1),M.matches.length=0;for(var r=0;r<n.length;r++)e[$.itemName]=n[r],M.matches.push({id:N(r),label:$.viewMapper(M,e),model:n[r]});M.query=t,m(),h.attr("aria-expanded",!0),E&&1===M.matches.length&&F(t,0)&&M.select(0)}else W(),O(d,!0);i&&_(d,!1)},function(){W(),_(d,!1),O(d,!0)})};k&&(angular.element(o).bind("resize",g),r.find("body").bind("scroll",g));var R;M.moveInProgress=!1,W(),M.query=void 0;var H,j=function(t){H=i(function(){L(t)},w)},U=function(){H&&i.cancel(H)};f.$parsers.unshift(function(t){return y=!0,0===v||t&&t.length>=v?w>0?(U(),j(t)):L(t):(_(d,!1),U(),W()),x?t:t?void f.$setValidity("editable",!1):(f.$setValidity("editable",!0),null)}),f.$formatters.push(function(t){var e,n,i={};return x||f.$setValidity("editable",!0),D?(i.$model=t,D(d,i)):(i[$.itemName]=t,e=$.viewMapper(d,i),i[$.itemName]=void 0,n=$.viewMapper(d,i),e!==n?e:t)}),M.select=function(t){var e,n,r={};b=!0,r[$.itemName]=n=M.matches[t].model,e=$.modelMapper(d,r),P(d,e),f.$setValidity("editable",!0),f.$setValidity("parse",!0),S(d,{$item:n,$model:e,$label:$.viewMapper(d,r)}),W(),i(function(){h[0].focus()},0,!1)},h.bind("keydown",function(t){if(0!==M.matches.length&&-1!==u.indexOf(t.which)){if(-1===M.activeIdx&&(9===t.which||13===t.which))return W(),void M.$digest();t.preventDefault(),40===t.which?(M.activeIdx=(M.activeIdx+1)%M.matches.length,M.$digest()):38===t.which?(M.activeIdx=(M.activeIdx>0?M.activeIdx:M.matches.length)-1,M.$digest()):13===t.which||9===t.which?M.$apply(function(){M.select(M.activeIdx)}):27===t.which&&(t.stopPropagation(),W(),M.$digest())}}),h.bind("blur",function(){C&&M.matches.length&&-1!==M.activeIdx&&!b&&(b=!0,M.$apply(function(){M.select(M.activeIdx)})),y=!1,b=!1});var B=function(t){h[0]!==t.target&&3!==t.which&&0!==M.matches.length&&(W(),a.$$phase||M.$digest())};r.bind("click",B),d.$on("$destroy",function(){r.unbind("click",B),k&&Y.remove(),A.remove()});var Y=t(A)(M);k?r.find("body").append(Y):h.after(Y)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&"},replace:!0,templateUrl:"template/typeahead/typeahead-popup.html",link:function(t,e,n){t.templateUrl=n.templateUrl,t.isOpen=function(){return t.matches.length>0},t.isActive=function(e){return t.active==e},t.selectActive=function(e){t.active=e},t.selectMatch=function(e){t.select({activeIdx:e})}}}}).directive("typeaheadMatch",["$templateRequest","$compile","$parse",function(t,e,n){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(i,r,o){var a=n(o.templateUrl)(i.$parent)||"template/typeahead/typeahead-match.html";t(a).then(function(t){e(t.trim())(i,function(t){r.replaceWith(t)})})}}}]).filter("typeaheadHighlight",function(){function t(t){return t.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}return function(e,n){return n?(""+e).replace(new RegExp(t(n),"gi"),"<strong>$&</strong>"):e}}),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(t){t.put("template/accordion/accordion-group.html",'<div class="panel panel-default" ng-class="{\'panel-open\': isOpen}">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a href tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(t){t.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(t){t.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close($event)">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(t){t.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(t){t.put("template/carousel/slide.html",'<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n')}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-if="isOpen" style="display: block" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group pull-left">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(t){t.put("template/modal/backdrop.html",'<div class="modal-backdrop"\n     modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(t){t.put("template/modal/window.html",'<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    modal-animation-class="fade"\n    modal-in-class="in"\n	ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="size ? \'modal-\' + size : \'\'"><div class="modal-content" modal-transclude></div></div>\n</div>\n')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(t){t.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(t){t.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n')}]),angular.module("template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-html-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-template-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("template/popover/popover-html.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover-html.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind-html="contentExp()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover-template.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover-template.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content"\n        tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n</div>\n')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(t){t.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}" ></i>\n</span>\n')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(t){t.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a href ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(t){t.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(t){t.put("template/timepicker/timepicker.html",'<table>\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td>:</td>\n      <td class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td ng-show="showMeridian"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n');
}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(t){t.put("template/typeahead/typeahead-match.html",'<a href tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>\n')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(t){t.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{::match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),!angular.$$csp()&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),exports.normalizePhoneNumber=normalizePhoneNumber;
//# sourceMappingURL=data:application/json;base64,
